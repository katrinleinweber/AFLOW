// ***************************************************************************
// *                                                                         *
// *           Aflow STEFANO CURTAROLO - Duke University 2003-2018           *
// *           Aflow COREY OSES - Duke University 2013-2018                  *
// *                                                                         *
// ***************************************************************************
// Written by Corey Oses
// corey.oses@duke.edu
// Previous versions also written by Eric Perim and Eric Gossett

#include "aflow.h"
#include "aflow_chull.h"
#include "aflow_compare_structure.h"

// DEFINITIONS
const string AFLOW_WEB = string("http://" + AFLOWLIB_MATERIALS_SERVER);
const string ENTRY_PAGE_URL_PREFIX = string(AFLOW_WEB + "/material.php?id=");
static const string AFLOW_HULL_ENDPOINT_STRING = "aflow_hull_endpoint";

// DEFAULTS
const int CHULL_PRECISION = 8;                          //must be less than _precision_ in aflow_xatom.cpp, which is currently set to 14
const int FULL_PRECISION = 15;                          //max printing precision
const int COEF_PRECISION = 4;
const double ZERO_TOL = pow(10,-CHULL_PRECISION);       //lower bound for absolute resolution of floats, significant differences among floats should be well above this threshold
const double ROUNDOFF_TOL = pow(10,-CHULL_PRECISION+2); //make less strigent so we don't get 1e-6
const double ZERO_COEF_TOL = pow(10,-COEF_PRECISION);
const double ENERGY_TOL = 0.015;                        //eV, CO NOTES - structures within this thresold may be equivalent, I've seen as large as 5meV, keep at 15 to be safe
const int ZERO_RANGE_TOL = 1;
const uint BINARY_ENTRIES_THRESHOLD = 200;

// USAGE FLAGS
const bool IGNORE_BAD_DATABASE = true;   //skip bad entries
const bool CORRECT_BAD_DATABASE = true;  //make minor corrections

// LATEX PRINTING MODES
const char ADDPLOT_MODE_HULL_POINTS = 'P';
const char ADDPLOT_MODE_OFF_HULL_POINTS = 'O';
const char ADDPLOT_MODE_HULL_FACETS = 'F';
const char ADDPLOT_MODE_HULL_FACETSDROP_SHADOWS = 'D';
const char ADDPLOT_MODE_HEAT_MAPS = 'H';

// AFLOW LOGO
const std::string _AFLOW_LOGO_BASE64_ = "";

// CITATION INFO
const std::string CHULL_AUTHORS = "C. Oses, E. Perim, E. Gossett, D. Hicks, F. Rose, C. Nyshadham, J. E. Hansen, G. L. W. Hart, I. Takeuchi, S. Sanvito, C. Toher, and S. Curtarolo";
const std::string CHULL_TITLE = "AFLOW-HULL: Platform for low-temperature thermodynamic phase stability analyses";
const std::string CHULL_JOURNAL = "submitted to Comput. Mater. Sci. (2018)";

namespace chull {
  CHullRuntimeError::CHullRuntimeError(const std::string& function,const std::string& message) : std::runtime_error(message),f_name(function) {}  // I/O or computer type errors (no entries loaded)
  string CHullRuntimeError::where(){return f_name;}
  CHullLogicError::CHullLogicError(const std::string& function,const std::string& message) : std::logic_error(message),f_name(function) {}    //errors in logic, unintended (and insurmountable) use of functionality
  string CHullLogicError::where(){return f_name;}
} // namespace chull

namespace chull {
  bool convexHull(aurostd::xoption& vpflow) {
    bool LDEBUG=(FALSE || XHOST.DEBUG);
    ostream& oss = cout;
    ofstream FileMESSAGE;
    string soliloquy = "chull::convexHull():";
    stringstream message;

    //////////////////////////////////////////////////////////////////////////////
    // START Display usage, if requested
    //////////////////////////////////////////////////////////////////////////////

    string usage_usage="aflow --convex_hull=|--chull --alloy=MnPdPt[,AlCuZn,...] [chull_options] [--destination=[DIRECTORY]]";
    vector<string> usage_options;
    usage_options.push_back(usage_usage);
    usage_options.push_back(" ");
    usage_options.push_back("chull_options:");
    usage_options.push_back("--usage");
    usage_options.push_back("--output=|--o=|--print=|--p=latex|pdf|json|text");
    usage_options.push_back("--image_only|--imageonly|--image");
    usage_options.push_back("--no_document|--nodocument|--no_doc|--nodoc|--full_page_image|--fullpageimage");
    usage_options.push_back("--document_only|--documentonly|--doc_only|--doconly|--doc");
    usage_options.push_back("--keep=tex|--keep_tex|--keeptex|--tex");
    usage_options.push_back("--keep=log|--keep_log|--keeplog|--log");
    usage_options.push_back(" ");
    usage_options.push_back("LOADING OPTIONS:");
    usage_options.push_back("--load_library=|--loadlibrary=|--ll=icsd|lib1|lib2|lib3");
    usage_options.push_back("--load_API|--load_api|--loadapi|--lapi|--api");
    usage_options.push_back("--load_entries_entry_output|--loadentriesentryoutput|--leo");
    usage_options.push_back("--neglect=|--ban=aflow:bb0d45ab555bc208);aflow:fb9eaa58604ce774");
    usage_options.push_back("--see_neglect|--seeneglect|--sn");
    usage_options.push_back("--remove_extreme_points=|--removeextremepoints=|--remove_extrema=|--removeextrema=|--rep=-1000");
    usage_options.push_back("--entropic_temperature|--entropictemperature|--entroptemp");
    usage_options.push_back(" ");
    usage_options.push_back("ANALYSIS OPTIONS:");
    usage_options.push_back("--stability_criterion=|--stabilitycriterion=|--stable_criterion=|--scriterion=|--sc=aflow:bb0d45ab555bc208,aflow:fb9eaa58604ce774");
    usage_options.push_back("--distance_to_hull=|--dist2hull=0.25,0.25");
    usage_options.push_back("--skip_structure_comparison|--skipstructruecomparison|--skipstructcomp|--ssc");
    usage_options.push_back("--include_unreliable_hulls|--include_unreliable|--iuh");
    usage_options.push_back("--include_outliers|--io");
    usage_options.push_back("--force");
    usage_options.push_back(" ");
    usage_options.push_back("GENERAL LATEX OPTIONS:");
    usage_options.push_back("--latex_output|--latexoutput");
    usage_options.push_back("--latex_interactive|--latexinteractive");
    usage_options.push_back("--light_contrast|--lightcontrast|--lc");
    usage_options.push_back("--large_font|--largefont|--large|--lf");
    usage_options.push_back(" ");
    // output usage
    if(vpflow.flag("CHULL::USAGE")) {
      init::ErrorOption(cout, "--usage", "CHULL()", usage_options);
      return TRUE;
    }

    //////////////////////////////////////////////////////////////////////////////
    // END Display usage, if requested
    //////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////
    // START Flag manipulation
    //////////////////////////////////////////////////////////////////////////////

    // address possible flag issues
    // get libraries to load from flags
    vector<string> vlibraries;
    if(!vpflow.flag("PFLOW::LOAD_LIBRARY")) {vpflow.addattachedscheme("PFLOW::LOAD_LIBRARY", "all", true);}
    aurostd::string2tokens(vpflow.getattachedscheme("PFLOW::LOAD_LIBRARY"),vlibraries,",");
    // special case, all
    if((vlibraries.size() == 1) && (vlibraries[0] == "all")) {pflow::defaultLoadEntriesFlags(vpflow, FileMESSAGE, oss, std::string("A"), false, true);}
    else {
      bool found;
      for (uint i = 0; i < vlibraries.size(); i++) {
        found = false;
        for (uint j = 0; j <= _AFLOW_LIB_MAX_ && !found; j++) {
          string LIB = aurostd::utype2string(j + 1);
          if(vlibraries[i] == "lib" + LIB || vlibraries[i] == "LIB" + LIB) {
            pflow::defaultLoadEntriesFlags(vpflow, FileMESSAGE, oss, LIB, false, true);
            found = true;
          }
        }
        if(!found && (vlibraries[i] == "icsd" || vlibraries[i] == "ICSD")) {
          pflow::defaultLoadEntriesFlags(vpflow, FileMESSAGE, oss, "ICSD", false, true);
          found = true;
        }
        //} else {
        if(!found) {
          message << "Incorrect input for loadlibraries \"" << vlibraries[i] << "\"";
          pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_ERROR_);
          if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
          return FALSE;
        }
      }
    }
    // get desired output from flags
    // give an error if input is not as desired
    if(vpflow.flag("CHULL::OUTPUT")) {
      vector<string> out_forms;
      aurostd::string2tokens(vpflow.getattachedscheme("CHULL::OUTPUT"), out_forms, ",");
      for (uint i = 0; i < out_forms.size(); i++) {
        if(!((out_forms[i][0] == 'A' || out_forms[i][0] == 'a') ||
              (out_forms[i][0] == 'F' || out_forms[i][0] == 'f') ||
              (out_forms[i][0] == 'T' || out_forms[i][0] == 't') ||
              (out_forms[i][0] == 'J' || out_forms[i][0] == 'j') ||
              (out_forms[i][0] == 'W' || out_forms[i][0] == 'w') ||
              (out_forms[i][0] == 'L' || out_forms[i][0] == 'l' || out_forms[i][0] == 'P' || out_forms[i][0] == 'p'))) {
          message << "Incorrect input for output \"" << out_forms[i] << "\"";
          pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_ERROR_);
          if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
          return FALSE;
        }
      }
    }

    //////////////////////////////////////////////////////////////////////////////
    // END Flag manipulation
    //////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////
    // START Gathering hull inputs
    //////////////////////////////////////////////////////////////////////////////

    // get elements input
    vector<string> vinputs, velements;
    string inputs = vpflow.getattachedscheme("PFLOW::ALLOY");
    if(inputs.empty()) {
      pflow::logger(soliloquy, "No input given for elements", FileMESSAGE, oss, _LOGGER_ERROR_);
      if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
      //really drive the point home
      init::ErrorOption(cout, "--alloy=" + vpflow.getattachedscheme("PFLOW::ALLOY"), "PFLOW()", usage_options);
      return FALSE;
    }
    // if multiple requests separated by comma, get requests
    aurostd::string2tokens(inputs, vinputs, ",");

    //////////////////////////////////////////////////////////////////////////////
    // END Gathering hull inputs
    //////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////
    // START Looping over hull inputs and creating desired output
    //////////////////////////////////////////////////////////////////////////////
    string log_name;
    for (uint i = 0; i < vinputs.size(); i++) {
      // go through each request
      // create log specific to that request
      velements = pflow::makeAlphabeticVector(vinputs[i], FileMESSAGE,oss);
      if(!velements.size()){
        pflow::logger(soliloquy, "Invalid input (" + vinputs[i] + "), please capitalize element symbols", FileMESSAGE, oss, _LOGGER_ERROR_);
        return FALSE;
      }
      if(vpflow.flag("CHULL::LOG")) {
        log_name = "aflow_" + aurostd::joinWDelimiter(velements,"") + "_hull.log";
        string log_destination = getPath(vpflow, FileMESSAGE, oss) + log_name;  // no output before banner //CO 180220
        FileMESSAGE.open(log_destination.c_str());
      }
      // spit out banner for only the first request
      message << aflow::Banner("BANNER_NORMAL");
      pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_RAW_, i);
      message << "Starting " << aurostd::joinWDelimiter(velements,"") << " convex hull";
      pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_MESSAGE_);
      getPath(vpflow, FileMESSAGE, oss, false); //CO 180220 - directory stuff for logging
      chull::flagCheck(vpflow, FileMESSAGE, oss, i);  // spit out all flag options
      
      ////////////////////////////////////////////////////////////////////////////
      // START Stability criterion calculation
      ////////////////////////////////////////////////////////////////////////////
      if(vpflow.flag("CHULL::STABILITY_CRITERION")) {
        message << "Starting stable criterion calculation of " << vpflow.getattachedscheme("CHULL::STABILITY_CRITERION");
        message << " on " << vinputs[i] << " hull";
        pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_MESSAGE_);
        vector<string> vauid;
        vector<double> vscriterion;
        aurostd::string2tokens(vpflow.getattachedscheme("CHULL::STABILITY_CRITERION"), vauid, ",");
        if(!stabilityCriterion(vpflow,velements,vauid,vscriterion,FileMESSAGE,oss)) {return FALSE;} //HAS to be thermal hull by virtue of input
        if(vpflow.flag("CHULL::SCREEN_ONLY")){
          if(!(vpflow.flag("CHULL::TEXT_DOC")||vpflow.flag("CHULL::JSON_DOC"))){vpflow.flag("CHULL::JSON_DOC",true);}
          if(vpflow.flag("CHULL::TEXT_DOC")){
            for (uint ia = 0; ia < vauid.size(); ia++) {
              message << vauid[ia] << ": " << chull::convertUnits(vscriterion[ia], (!vpflow.flag("CHULL::ENTROPIC_TEMPERATURE")?_m_:_std_)) << endl;
            }
            oss << message.str();
          }else if(vpflow.flag("CHULL::JSON_DOC")){
            vector<string> vmes;
            stringstream dummy;
            for (uint ia = 0; ia < vauid.size(); ia++) {
              dummy << "\"" <<vauid[ia] << "\":" << chull::convertUnits(vscriterion[ia], (!vpflow.flag("CHULL::ENTROPIC_TEMPERATURE")?_m_:_std_));
              vmes.push_back(dummy.str()); dummy.str("");
            }
            oss << aurostd::wrapString(aurostd::joinWDelimiter(vmes,","),"{","}");
          }//else{ //WON'T PRINT ANYWAY
          //  pflow::logger(soliloquy, "Unknown print option, only --print=text or --print=json available", FileMESSAGE, oss, _LOGGER_ERROR_);
          //  if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
          //  return FALSE;
          //}
        }else{
          for (uint ia = 0; ia < vauid.size(); ia++) {
            if(!vpflow.flag("CHULL::ENTROPIC_TEMPERATURE")) {
              message << vauid[ia] << " criterion = " << chull::convertUnits(vscriterion[ia], _m_) << " (meV/atom)";
              if(std::signbit(vscriterion[ia])) {  //-4e-13 is still negative!
                message << ", may NOT be on the hull (negative value)";
                pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_WARNING_);
              } else {pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_COMPLETE_);}
            } else {
              message << vauid[ia] << " criterion = " << vscriterion[ia] << " (K)";
              if(!std::signbit(vscriterion[ia])) {
                message << ", may NOT be on the hull (positive value)";
                pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_WARNING_);
              } else {pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_COMPLETE_);}
            }
          }
        }
        continue;
      }
      ////////////////////////////////////////////////////////////////////////////
      // END Stability criterion calculation
      ////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////
      // START Hull initialization
      ////////////////////////////////////////////////////////////////////////////

      ConvexHull hull(vpflow,velements,FileMESSAGE,oss);
      if(!hull.m_initialized) {
        pflow::logger(soliloquy, "Hull was not created successfully", FileMESSAGE, oss, _LOGGER_ERROR_);
        if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
        return FALSE;
      }
      uint dimension = hull.getDim();
      if(!dimension) {
        pflow::logger(soliloquy, "Hull has no dimensions", FileMESSAGE, oss, _LOGGER_ERROR_);
        if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
        return FALSE;
      }
      if(dimension < 2) {
        pflow::logger(soliloquy, "Unable to calculate hulls with dimensions less than 2", FileMESSAGE, oss, _LOGGER_ERROR_);
        if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
        return FALSE;
      }
      if(dimension != velements.size()) {
        pflow::logger(soliloquy, "Dimension of hull does not reflect the number of elements", FileMESSAGE, oss, _LOGGER_ERROR_);
        if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
        return FALSE;
      }

      ////////////////////////////////////////////////////////////////////////////
      // END Hull initialization
      ////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////
      // START Distance to hull calculation
      ////////////////////////////////////////////////////////////////////////////
      if(vpflow.flag("CHULL::DISTANCE_TO_HULL")) {
        message << "Starting distance to hull calculation of " << vpflow.getattachedscheme("CHULL::DISTANCE_TO_HULL");
        message << " on " << vinputs[i] << " hull";
        pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_MESSAGE_);
        vector<double> _coords;
        xvector<double> coords(dimension-1,0);
        aurostd::string2tokens<double>(vpflow.getattachedscheme("CHULL::DISTANCE_TO_HULL"), _coords, ",");
        for(uint j=0;j<_coords.size()&&j<dimension;j++){coords[j]=_coords[j];}
        if(LDEBUG){cerr << soliloquy << " coords=" << coords << endl;}
        double dist2hull;
        try{
          ChullPoint cp(coords,FileMESSAGE,hull.m_has_stoich_coords,true,oss);  //not a real point
          dist2hull=hull.getDistanceToHull(cp);
        }
        catch(CHullRuntimeError& re){pflow::logger(re.where(), re.what(), FileMESSAGE, oss, _LOGGER_ERROR_);return false;}
        catch(CHullLogicError& le){pflow::logger(le.where(), le.what(), FileMESSAGE, oss, _LOGGER_ERROR_);return false;}

        if(vpflow.flag("CHULL::SCREEN_ONLY")){
          oss << chull::convertUnits(dist2hull, (!vpflow.flag("CHULL::ENTROPIC_TEMPERATURE")?_m_:_std_));
        }else{
          message << "distance[coords=";
          for(int j=coords.lrows;j<=coords.urows;j++){
            message << coords[j];
            if(j!=(int)dimension-1){message << ",";}
          }
          message << "] = ";
          if(!vpflow.flag("CHULL::ENTROPIC_TEMPERATURE")) {message << chull::convertUnits(dist2hull, _m_) << " (meV/atom)";}
          else{message << dist2hull << " (K)";}
          pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_COMPLETE_);
        }
        continue;
      }
      ////////////////////////////////////////////////////////////////////////////
      // END Distance to hull calculation
      ////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////
      // START outputs
      ////////////////////////////////////////////////////////////////////////////

      if(vpflow.flag("CHULL::TEXT_DOC")) {if(!hull.write(_txt_)) {if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();} return FALSE;}} // text doc
      if(vpflow.flag("CHULL::JSON_DOC")) {if(!hull.write(_json_)) {if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();} return FALSE;}} // json doc
      if(vpflow.flag("CHULL::WEB_DOC")) {if(!hull.write(_web_)) {if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();} return FALSE;}} // web-specific json doc
      if(vpflow.flag("CHULL::LATEX_DOC")) {if(!hull.write(_pdf_)) {if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();} return FALSE;}} // latex doc

      ////////////////////////////////////////////////////////////////////////////
      // END outputs
      ////////////////////////////////////////////////////////////////////////////

      // close input specific log
      if(vpflow.flag("CHULL::LOG")) {FileMESSAGE.close();}
    }
    //////////////////////////////////////////////////////////////////////////////
    // END Looping over hull inputs and creating desired output
    //////////////////////////////////////////////////////////////////////////////
    return TRUE;
  }
} // namespace chull

namespace chull {
//***************************************************************************//
// chull::getPath(aurostd::xoption& vpflow,const bool& silent,ostringstream&
// oss,ofstream& FileMESSAGE)
//***************************************************************************//
// gets path to redirect output
string getPath(const aurostd::xoption& vpflow, ostream& oss, bool silent) {  // overload
  ofstream FileMESSAGE;
  return getPath(vpflow, FileMESSAGE, oss, silent);
}
string getPath(const aurostd::xoption& vpflow, ofstream& FileMESSAGE, ostream& oss, bool silent) {  // main function
  string soliloquy = "chull::getPath():";
  stringstream message;
  if(!vpflow.flag("CHULL::PATH")) {
    string pwd = aurostd::execute2string(XHOST.command("pwd")) + "/";
    if(!silent){
      message << "Directing output to current directory: " << pwd;
      pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_OPTION_); //, silent);  //CO 180220 - silent now means print AT ALL
    }
    return pwd;
  }
  return getPath(vpflow.getattachedscheme("CHULL::PATH"), FileMESSAGE, oss, silent);
}
//***************************************************************************//
// chull::getPath(string _path,const bool& silent,ostream& oss,ofstream&
// FileMESSAGE)
//***************************************************************************//
// gets path to redirect output
string getPath(string _path, ostream& oss, bool silent) {  // overload
  ofstream FileMESSAGE;
  return getPath(_path, FileMESSAGE, oss, silent);
}
string getPath(string _path, ofstream& FileMESSAGE, ostream& oss, bool silent) {  // main function
  string soliloquy = "chull::getPath():";
  stringstream message;
  string pwd = aurostd::execute2string(XHOST.command("pwd"));
  string home = aurostd::execute2string(XHOST.command("echo") + " $HOME");
  string path;
  // add '/' if _path doesn't already have it
  if(_path.at(_path.length() - 1) != '/') {
    _path += "/";
  }
  // remove ./ for relative paths
  if(_path[0] == '.') {
    _path = _path.substr(1, _path.length());
    if(!_path.empty() && _path[0] == '/') {
      _path = _path.substr(1, _path.length());
    }
  }
  // home doesn't have last '/'
  if(!_path.empty() && _path[0] == '~') {
    _path = _path.substr(1, _path.length());
    if(!_path.empty() && _path[0] == '/') {
      _path = _path.substr(1, _path.length());
    }
    _path = home + "/" + _path;
  }
  // if not root path (starting with '/'), it's a relative path, add it to pwd,
  // pwd doesn't have last '/'
  if(_path.empty() || (!_path.empty() && _path[0] != '/')) {
    path = pwd + "/";
    path += _path;
  } else {
    path = _path;
  }
  
  //test of stupidity
  if(!aurostd::IsDirectory(path)){
    message << path << " does not seem to be a viable directory, changing to pwd=" << pwd;
    pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_WARNING_);
    path=pwd+"/";
  }

  if(!silent){
    message << "Directing output to " << path;
    pflow::logger(soliloquy, message, FileMESSAGE, oss, _LOGGER_OPTION_); //, silent);  //CO 180220 - silent now means print AT AL
  }
  return path;
}
} // namespace chull

namespace chull {
//***************************************************************************//
// chull::flagCheck(aurostd::xoption& vpflow,bool silent,ostringstream&
// oss,ofstream& FileMESSAGE)
//***************************************************************************//
// logs which flags are on
void flagCheck(aurostd::xoption& vpflow, ostream& oss, bool silent) {  // overload
  ofstream FileMESSAGE;
  flagCheck(vpflow, FileMESSAGE, oss, silent);
}
void flagCheck(aurostd::xoption& vpflow, ofstream& FileMESSAGE, ostream& oss, bool silent) {  // main function
  string soliloquy = "chull::flagCheck():";
  stringstream message;
  if(vpflow.flag("CHULL::TEXT_DOC")) {
    pflow::logger(soliloquy, "CHULL::TEXT_DOC set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::JSON_DOC")) {
    pflow::logger(soliloquy, "CHULL::JSON_DOC set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::WEB_DOC")) {
    pflow::logger(soliloquy, "CHULL::WEB_DOC set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::LATEX_DOC")) {
    pflow::logger(soliloquy, "CHULL::LATEX_DOC set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    if(vpflow.flag("CHULL::IMAGE_ONLY")) {
      pflow::logger(soliloquy, "CHULL::IMAGE_ONLY set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::NO_DOC")) {
      pflow::logger(soliloquy, "CHULL::NO_DOC set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::DOC_ONLY")) {
      pflow::logger(soliloquy, "CHULL::DOC_ONLY set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::KEEP_TEX")) {
      pflow::logger(soliloquy, "CHULL::KEEP_TEX set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::LATEX_OUTPUT")) {
      pflow::logger(soliloquy, "CHULL::LATEX_OUTPUT set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::LATEX_INTERACTIVE")) {
      pflow::logger(soliloquy, "CHULL::LATEX_INTERACTIVE set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::LIGHT_CONTRAST")) {
      pflow::logger(soliloquy, "CHULL::LIGHT_CONTRAST set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
    if(vpflow.flag("CHULL::LARGE_FONT")) {
      pflow::logger(soliloquy, "CHULL::LARGE_FONT set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
    }
  }
  if(vpflow.flag("CHULL::LOG")) {
    pflow::logger(soliloquy, "CHULL::LOG set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_ENTRIES_LOAD_LIB1")) {
    pflow::logger(soliloquy, "PFLOW::LOAD_ENTRIES_LOAD_LIB1 set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_ENTRIES_LOAD_LIB2")) {
    pflow::logger(soliloquy, "PFLOW::LOAD_ENTRIES_LOAD_LIB2 set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_ENTRIES_NARIES_MINUS_ONE")) {
    pflow::logger(soliloquy, "PFLOW::PFLOW::LOAD_ENTRIES_NARIES_MINUS_ONE set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_ENTRIES_LOAD_LIB3")) {
    pflow::logger(soliloquy, "PFLOW::LOAD_ENTRIES_LOAD_LIB3 set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_ENTRIES_LOAD_ICSD")) {
    pflow::logger(soliloquy, "PFLOW::LOAD_ENTRIES_LOAD_ICSD set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_API")) {
    pflow::logger(soliloquy, "PFLOW::LOAD_API set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("PFLOW::LOAD_ENTRIES_ENTRY_OUTPUT")) {
    pflow::logger(soliloquy, "PFLOW::LOAD_ENTRIES_ENTRY_OUTPUT set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::NEGLECT")) {
    pflow::logger(soliloquy, "CHULL::NEGLECT set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::SEE_NEGLECT")) {
    pflow::logger(soliloquy, "CHULL::SEE_NEGLECT set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::REMOVE_EXTREMA")) {
    pflow::logger(soliloquy, "CHULL::REMOVE_EXTREMA set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::ENTROPIC_TEMPERATURE")) {
    pflow::logger(soliloquy, "CHULL::ENTROPIC_TEMPERATURE set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::STABILITY_CRITERION")) {
    pflow::logger(soliloquy, "CHULL::STABILITY_CRITERION set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::DISTANCE_TO_HULL")) {
    pflow::logger(soliloquy, "CHULL::DISTANCE_TO_HULL set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::SKIP_STRUCTURE_COMPARISON")) {
    pflow::logger(soliloquy, "CHULL::SKIP_STRUCTURE_COMPARISON set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::INCLUDE_UNRELIABLE_HULLS")) {
    pflow::logger(soliloquy, "CHULL::INCLUDE_UNRELIABLE_HULLS set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("CHULL::INCLUDE_OUTLIERS")) {
    pflow::logger(soliloquy, "CHULL::INCLUDE_OUTLIERS set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
  if(vpflow.flag("FORCE")) {
    pflow::logger(soliloquy, "CHULL::FORCE set to TRUE", FileMESSAGE, oss, _LOGGER_OPTION_, silent);
  }
}
} // namespace chull

namespace chull {
  bool stabilityCriterion(const vector<string>& velements,const string& auid,double& scriterion,ostream& oss){
    ofstream FileMESSAGE;
    return stabilityCriterion(velements,auid,scriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const vector<string>& velements,const string& auid,double& scriterion,ofstream& FileMESSAGE,ostream& oss){
    vector<string> vauid;
    vauid.push_back(auid);
    vector<double> vscriterion;
    if(!stabilityCriterion(velements,vauid,vscriterion,FileMESSAGE,oss)) {return FALSE;}
    scriterion = vscriterion[0];
    return true;
  }
  bool stabilityCriterion(const vector<string>& velements,const vector<string>& vauid,vector<double>& vscriterion,ostream& oss){
    ofstream FileMESSAGE;
    return stabilityCriterion(velements,vauid,vscriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const vector<string>& velements,const vector<string>& vauid,vector<double>& vscriterion,ofstream& FileMESSAGE,ostream& oss){
    aurostd::xoption vpflow;
    pflow::defaultLoadEntriesFlags(vpflow,FileMESSAGE,oss,std::string("A"),false,true);
    return stabilityCriterion(vpflow,velements,vauid,vscriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,double& scriterion,ostream& oss){
    ofstream FileMESSAGE;
    return stabilityCriterion(vpflow,velements,scriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,double& scriterion,ofstream& FileMESSAGE,ostream& oss){
    string soliloquy = "chull::stabilityCriterion():";
    stringstream message;
    if(!vpflow.flag("CHULL::NEGLECT")) {
      pflow::logger(soliloquy,"CHULL::NEGLECT not set",FileMESSAGE,oss,_LOGGER_ERROR_);
      return false;
    }
    vector<string> points_neglect;
    aurostd::string2tokens(vpflow.getattachedscheme("CHULL::NEGLECT"),points_neglect,",");
    if(points_neglect.size()!=1) {
      message << "Can only handle one AUID at a time, " << points_neglect.size() << " given";
      pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
      return FALSE;
    }
    return stabilityCriterion(vpflow,velements,points_neglect[0],scriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,const string& auid,double& scriterion,ostream& oss){
    ofstream FileMESSAGE;
    return stabilityCriterion(vpflow,velements,auid,scriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,const string& auid,double& scriterion,ofstream& FileMESSAGE,ostream& oss){
    vector<string> vauid;
    vauid.push_back(auid);
    vector<double> vscriterion;
    if(!stabilityCriterion(vpflow,velements,vauid,vscriterion,FileMESSAGE,oss)) {return FALSE;}
    scriterion = vscriterion[0];
    return true;
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,vector<double>& vscriterion,ostream& oss){
    ofstream FileMESSAGE;
    return stabilityCriterion(vpflow,velements,vscriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,vector<double>& vscriterion,ofstream& FileMESSAGE,ostream& oss){
    string soliloquy = "chull::stabilityCriterion():";
    stringstream message;
    if(!vpflow.flag("CHULL::NEGLECT")) {
      pflow::logger(soliloquy,"CHULL::NEGLECT not set",FileMESSAGE,oss,_LOGGER_ERROR_);
      return FALSE;
    }
    vector<string> points_neglect;
    aurostd::string2tokens(vpflow.getattachedscheme("CHULL::NEGLECT"),points_neglect,",");
    return stabilityCriterion(vpflow,velements,points_neglect,vscriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,const vector<string>& vauid,vector<double>& vscriterion,ostream& oss) {
    ofstream FileMESSAGE;
    return stabilityCriterion(vpflow,velements,vauid,vscriterion,FileMESSAGE,oss);
  }
  bool stabilityCriterion(const aurostd::xoption& vpflow,const vector<string>& velements,const vector<string>& vauid,vector<double>& vscriterion,ofstream& FileMESSAGE,ostream& oss) {
    string soliloquy = "chull::stabilityCriterion():";
    stringstream message;
    
    //don't only remove vauid, but also equivalent gstates
    //we need organized points, simply initialize dummy hull instead of calculating TWO full hulls
    ConvexHull dummy(vpflow,FileMESSAGE,oss);
    try{dummy.initializePoints(velements);}
    catch(CHullRuntimeError& re){pflow::logger(re.where(), re.what(), FileMESSAGE, oss, _LOGGER_ERROR_);return false;}
    catch(CHullLogicError& le){pflow::logger(le.where(), le.what(), FileMESSAGE, oss, _LOGGER_ERROR_);return false;}
    dummy.m_initialized=true; //hack so we can get at the g-states
    uint i_point,i_coord_group,g_state;
    vector<uint> eq_gstates;
    bool found;
    vector<ChullPoint> points_to_neglect; //follows vauid
    for(uint i=0;i<vauid.size();i++){
      const string& auid=vauid[i];
      if(auid.empty()){
        message << "Empty auid found";
        pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
        return false;
      }
      if(!dummy.findPoint(auid,i_point)){
        message << "Specified auid not found on hull (auid=" << auid << ")";
        pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
        return false;
      }
      const ChullPoint& point=dummy.m_points[i_point];  //this point may not be on the hull, it may be an equivalent structure, but coordgroup is
      if(!dummy.getCoordGroupIndex(point,i_coord_group)){
        message << "Coordgroup index not set (auid=" << auid << ")";
        pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
        return false;
      }
      if(!dummy.m_coord_groups[i_coord_group].m_points.size()){
        message << "No points found within coordgroup (auid=" << auid << ")";
        pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
        return false;
      }
      //assume user knows what he's doing, we will check for sure later
      dummy.m_coord_groups[i_coord_group].m_is_on_hull=true;
      g_state=dummy.m_coord_groups[i_coord_group].m_ref_state;
      dummy.m_points[g_state].m_is_g_state=true;
      eq_gstates=dummy.getEquivalentGStates(g_state);
      //check to make sure entry with specified auid among gstates
      found=false;
      for(uint i=0;i<eq_gstates.size();i++){
        if(dummy.m_points[eq_gstates[i]].m_entry.auid==auid){found=true;}
        points_to_neglect.push_back(dummy.m_points[eq_gstates[i]]);
      }
      if(!found){
        message << "Point was not found to be an equivalent ground state structure (auid=" << auid << ")";
        pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
        return false;
      }
    }
    
    //////////////////////////////////////////////////////////////////////////////
    // START Getting entries to be neglected
    //////////////////////////////////////////////////////////////////////////////

    vector<ChullPoint> new_points;
    const vector<ChullPoint>& points=dummy.m_points;
    for(uint i=0;i<points.size();i++){
      if(points[i].m_is_artificial){continue;}  //they will be added again
      found=false;
      for(uint j=0;j<points_to_neglect.size()&&!found;j++){
        if(points[i].m_entry.auid==points_to_neglect[j].m_entry.auid){
          message << "Removing equivalent ground state (auid=" << points_to_neglect[j].m_entry.auid << ")";
          pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_MESSAGE_);
          found=true;
        }
      }
      if(found){continue;}
      new_points.push_back(points[i]);
    }
    
    //////////////////////////////////////////////////////////////////////////////
    // END Getting entries to be neglected
    //////////////////////////////////////////////////////////////////////////////
    
    message << "Create new hull without relevant g-states";
    pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_MESSAGE_);
    aurostd::xoption cflags=vpflow;
    cflags.flag("CHULL::SKIP_THERMO_POSTPROCESSING",true); //postprocessing NOT needed, just need hull
    ConvexHull hull(cflags,new_points,velements,FileMESSAGE,oss,true,true);
    if(!hull.m_initialized){return false;}
    //since i_nary and i_alloy don't change, the getDistanceToHull function should work fine (getRelevantFacets())
    uint i_nary,i_alloy;
    for (uint i=0;i<points_to_neglect.size();i++) {
      ChullPoint& point=points_to_neglect[i];
      if(!dummy.getAlloyIndex(point,i_nary,i_alloy)){
        message << "Alloy index not set (auid=" << point.m_entry.auid << ")";
        pflow::logger(soliloquy,message,FileMESSAGE,oss,_LOGGER_ERROR_);
        return false;
      }
      xvector<int>& elements_present=dummy.m_naries[i_nary].m_alloys[i_alloy].m_elements_present;
      point.setHullCoords(elements_present);
      try{vscriterion.push_back(hull.getDistanceToHull(point));}
      catch(CHullRuntimeError& re){pflow::logger(re.where(), re.what(), FileMESSAGE, oss, _LOGGER_ERROR_);return false;}
      catch(CHullLogicError& le){pflow::logger(le.where(), le.what(), FileMESSAGE, oss, _LOGGER_ERROR_);return false;}
    }

    return true;
  }
} // namespace chull

namespace chull {
// ***************************************************************************
// chull::convertUnits(double value,char units)
// ***************************************************************************
// returns value in desired units
double convertUnits(double value, char units) {
  if(units == _m_) {return value * 1e3;}
  return value;
}
double Hf_atom(const ChullPoint& point, char units) {return Hf_atom(point.m_entry,units);}
double Hf_atom(const aflowlib::_aflowlib_entry& entry, char units){return convertUnits(entry.enthalpy_formation_atom,units);}
double dist2Hull(const ChullPoint& point, char units){
  if(point.m_formation_energy_coord){return convertUnits(point.m_dist_2_hull,units);}
  else{return point.m_dist_2_hull;}  //no unit conversions coded yet here
}
double Ts(const ChullPoint& point){return Ts(point.m_entry);}
double Ts(const aflowlib::_aflowlib_entry& entry){return entry.entropic_temperature;}

int roundDouble(double doub, int multiple, bool up) {
  // rounds double to the nearest (multiple), choose round up or down
  // http://stackoverflow.com/questions/3407012/c-rounding-up-to-the-nearest-multiple-of-a-number
  int numToRound = round(doub);
  if(multiple == 0) {return numToRound;}
  int remainder = abs(numToRound) % multiple;
  if(remainder == 0) {return numToRound;}
  if(up) {
    if(numToRound < 0) {return -(abs(numToRound) - remainder);}
    else {return numToRound + multiple - remainder;}
  } else {  //down
    if(numToRound < 0) {return -(abs(numToRound) + (multiple - remainder));}
    else {return numToRound - remainder;}
  }
}
} // namespace chull

namespace chull {
//--------------------------------------------------------------------------------
// class ChullPoint
//--------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
ChullPoint::ChullPoint(bool has_stoich_coords,bool is_artificial,ostream& oss) : p_FileMESSAGE(NULL) {initialize(has_stoich_coords,is_artificial,oss);}
ChullPoint::ChullPoint(const xvector<double>& coord,bool has_stoich_coords,bool is_artificial,ostream& oss) : p_FileMESSAGE(NULL) {initialize(coord,has_stoich_coords,is_artificial,oss);}
ChullPoint::ChullPoint(const vector<string>& velements,const aflowlib::_aflowlib_entry& entry,bool formation_energy_hull,ostream& oss) : p_FileMESSAGE(NULL) {initialize(velements,entry,formation_energy_hull,oss);}
ChullPoint::ChullPoint(ofstream& FileMESSAGE,bool has_stoich_coords,bool is_artificial,ostream& oss) : p_FileMESSAGE(NULL) {initialize(FileMESSAGE,has_stoich_coords,is_artificial,oss);}
ChullPoint::ChullPoint(const xvector<double>& coord,ofstream& FileMESSAGE,bool has_stoich_coords,bool is_artificial,ostream& oss) : p_FileMESSAGE(NULL) {initialize(coord,FileMESSAGE,has_stoich_coords,is_artificial,oss);}
ChullPoint::ChullPoint(const vector<string>& velements,const aflowlib::_aflowlib_entry& entry,ofstream& FileMESSAGE,bool formation_energy_hull,ostream& oss) : p_FileMESSAGE(NULL) {initialize(velements,entry,FileMESSAGE,formation_energy_hull,oss);}
ChullPoint::ChullPoint(const ChullPoint& b) {copy(b);} // copy PUBLIC

ChullPoint::~ChullPoint() {
  free();
  if(new_ofstream){delete p_FileMESSAGE;}
}

const ChullPoint& ChullPoint::operator=(const ChullPoint& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

void ChullPoint::HullCopy(const ChullPoint& b){ //copies ALL chull stuff, no entry data
  m_initialized=b.m_initialized;
  m_coords=b.m_coords;
  m_has_stoich_coords=b.m_has_stoich_coords;
  m_has_entry=b.m_has_entry;
  m_formation_energy_coord=b.m_formation_energy_coord;
  m_is_artificial=b.m_is_artificial;
  m_i_nary=b.m_i_nary;
  m_i_alloy=b.m_i_alloy;
  m_i_coord_group=b.m_i_coord_group;
  s_coords=b.s_coords;
  c_coords=b.c_coords;
  m_elements_present=b.m_elements_present;
  m_is_on_hull=b.m_is_on_hull;
  m_is_g_state=b.m_is_g_state;
  m_is_equivalent_g_state=b.m_is_equivalent_g_state;
  m_dist_2_hull=b.m_dist_2_hull;
  m_decomp_coefs=b.m_decomp_coefs;
  p_oss=b.p_oss;
  new_ofstream=b.new_ofstream;  //very important! seg faults otherwise
  p_FileMESSAGE=b.p_FileMESSAGE;
  h_coords=b.h_coords;
}

bool ChullPoint::operator<(const ChullPoint& other) const {
  //NB: this is ALWAYS sorted in descending order of stoich, no need to make options for ascending order
  //but, sorts in ascending order for energy
  string soliloquy="ChullPoint::operator<():";
  if(m_coords.rows!=other.m_coords.rows){throw CHullLogicError(soliloquy,"Dimension mismatch among points");}
  for(uint i=0;i<(uint)m_coords.rows;i++){if(m_coords[i]!=other.m_coords[i]){return (m_coords[i]<other.m_coords[i]);}}
  return false;
}

void ChullPoint::clear() {ChullPoint a; copy(a);}  //clear PUBLIC
void ChullPoint::free() {
  m_initialized=false;
  m_coords.clear();
  m_has_stoich_coords=false;
  m_entry.clear(); if(m_entry.vsg.size()==0){m_entry.vsg.push_back(NOSG);} if(m_entry.vsg2.size()==0){m_entry.vsg2.push_back(NOSG);}  //hack so it doesn't break with front(),back(),[0]
  m_has_entry=false;
  m_formation_energy_coord=false;
  m_is_artificial=false;
  m_i_nary=AUROSTD_MAX_UINT;
  m_i_alloy=AUROSTD_MAX_UINT;
  m_i_coord_group=AUROSTD_MAX_UINT;
  s_coords.clear();
  c_coords.clear();
  m_elements_present.clear();
  m_is_on_hull=false;
  m_is_g_state=false;
  m_is_equivalent_g_state=false;
  m_dist_2_hull=AUROSTD_NAN;
  m_decomp_coefs.clear();
  p_oss=NULL;
  p_FileMESSAGE=NULL;
  new_ofstream=false;
  cleanPoint();
}

void ChullPoint::copy(const ChullPoint& b) {  //copy PRIVATE
  HullCopy(b);  //copies ALL chull stuff, no entry data
  m_entry=b.m_entry; if(m_entry.vsg.size()==0){m_entry.vsg.push_back(NOSG);} if(m_entry.vsg2.size()==0){m_entry.vsg2.push_back(NOSG);}  //hack so it doesn't break with front(),back(),[0]
}

void ChullPoint::setOFStream(ofstream& FileMESSAGE){p_FileMESSAGE=&FileMESSAGE;}
void ChullPoint::setOSS(ostream& oss) {p_oss=&oss;}

bool ChullPoint::initialize(bool has_stoich_coords,bool is_artificial,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(*_p_FileMESSAGE,has_stoich_coords,is_artificial,oss); 
  new_ofstream=true;  //override
  return m_initialized;
}

bool ChullPoint::initialize(const xvector<double>& coord,bool has_stoich_coords,bool is_artificial,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(coord,*_p_FileMESSAGE,has_stoich_coords,is_artificial,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ChullPoint::initialize(const vector<string>& velements,const aflowlib::_aflowlib_entry& entry,bool formation_energy_hull,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(velements,entry,*_p_FileMESSAGE,formation_energy_hull,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ChullPoint::initialize(ofstream& FileMESSAGE,bool has_stoich_coords,bool is_artificial,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  m_has_stoich_coords=has_stoich_coords;
  m_is_artificial=is_artificial;
  m_initialized=false;  //no point
  return m_initialized;
}

bool ChullPoint::initialize(const xvector<double>& coord,ofstream& FileMESSAGE,bool has_stoich_coords,bool is_artificial,ostream& oss) {
  //we start by setting the most general coords, m_coords, relating to highest d-hull
  //then, if we can, we derive stoich and composition coords
  //it may seem "backwards", as stoich and composition are most accesible to entries, but
  //this code is GENERAL (any type of coords, not just energy/stoich)
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  initializeCoords(coord);
  m_has_stoich_coords=has_stoich_coords;
  if(m_has_stoich_coords){setStoichCoords();}
  m_is_artificial=is_artificial;
  m_initialized=true;
  return m_initialized;
}

bool ChullPoint::initialize(const vector<string>& velements,const aflowlib::_aflowlib_entry& entry,ofstream& FileMESSAGE,bool formation_energy_hull,ostream& oss) {
  //we start by setting the most general coords, m_coords, relating to highest d-hull
  //then, if we can, we derive stoich and composition coords
  //it may seem "backwards", as stoich and composition are most accesible to entries, but
  //this code is GENERAL (any type of coords, not just energy/stoich)
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  initializeCoords(velements,entry,formation_energy_hull);
  m_has_stoich_coords=true;
  setStoichCoords();
  m_is_artificial=false;
  m_initialized=true;
  return m_initialized;
}

bool ChullPoint::isGState() const{
  string soliloquy="ConvexHull::isGState():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  return m_is_on_hull || m_is_g_state || m_is_equivalent_g_state;
}

xvector<double> ChullPoint::getTruncatedGenCoords() const{
  xvector<double> r_coords(m_coords.rows-2,0);
  for(uint i=0;i<(uint)m_coords.rows-1;i++){r_coords[i]=m_coords[i];}
  return r_coords;
}

xvector<double> ChullPoint::getTruncatedCoords(const xvector<double>& coords,const xvector<int>& elements_present) const{
  string soliloquy="ChullPoint::getTruncatedStoich():";
  if(coords.rows!=elements_present.rows){throw CHullLogicError(soliloquy,"Reduction invalid, coords mismatch");}
  uint h_dim=sum(elements_present);
  xvector<double> red_coords(h_dim-1,0);
  vector<uint> relevant_indices=getRelevantIndices(elements_present);
  for(uint i=0;i<relevant_indices.size();i++){red_coords[i]=coords[relevant_indices[i]];}
  return red_coords;
}

xvector<double> ChullPoint::getTruncatedStoich(const xvector<int>& elements_present) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullPoint::getTruncatedStoich():";
  if(!m_has_stoich_coords){throw CHullLogicError(soliloquy,"Non-stoich coordinates");}
  xvector<double> coords=getTruncatedCoords(s_coords,elements_present);
  if(LDEBUG){cerr << soliloquy << " truncated stoich for " << s_coords << " is " << coords << " (elements_present=" << elements_present << ")" << endl;}
  return coords;
}

xvector<double> ChullPoint::getTruncatedComp(const xvector<int>& elements_present) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullPoint::getTruncatedComp():";
  if(!m_has_stoich_coords){throw CHullLogicError(soliloquy,"Non-stoich coordinates");}
  xvector<double> coords=getTruncatedCoords(c_coords,elements_present);
  if(LDEBUG){cerr << soliloquy << " truncated comp for " << c_coords << " is " << coords << " (elements_present=" << elements_present << ")" << endl;}
  return coords;
}

xvector<double> ChullPoint::getRedComp() const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullPoint::getRedComp():";
  if(!m_has_stoich_coords){throw CHullLogicError(soliloquy,"Non-stoich coordinates");}
  xvector<double> coords=aurostd::reduceByGCD(c_coords,ZERO_TOL);
  if(LDEBUG){cerr << soliloquy << " reduced comp for " << c_coords << " is " << coords << endl;}
  return coords;
}

uint ChullPoint::loadXstructures(bool relaxed_only) {  //load relaxed only
  if(!pflow::loadXstructures(m_entry,*p_FileMESSAGE,*p_oss,relaxed_only)){return false;}
  return m_entry.vstr.size();
}

bool ChullPoint::getMostRelaxedXstructure(xstructure& xstr) const { //this is const!
  aflowlib::_aflowlib_entry entry; entry.auid=m_entry.auid; entry.aurl=m_entry.aurl;  //fast copy
  if(!pflow::loadXstructures(entry,*p_FileMESSAGE,*p_oss,true)){return false;}
  if(entry.vstr.size()==1){xstr=entry.vstr[0]; return true;}
  return false;
}

//small get()'s of fundamental types get copies, otherwise const&
double ChullPoint::getLastCoord() const {return m_coords[m_coords.urows];}
uint ChullPoint::getDim() const {return m_coords.rows;}
bool ChullPoint::isUnary() const {return m_i_nary==0;}
double ChullPoint::getEnergy() const {return m_entry.enthalpy_formation_atom;}
double ChullPoint::getEntropicTemperature() const {return m_entry.entropic_temperature;}
const string& ChullPoint::getSG() const {return m_entry.vsg.back();}  //tight tolerance fine!

//since we don't check ALL attributes of entry, then we weed out MORE
//entries existing in different catalogs will not be strictly identical
//avoid this by comparing only the most pertinent information
bool ChullPoint::entryIdentical(const aflowlib::_aflowlib_entry& other) const {
  return (m_entry.compound==other.compound) && 
    (m_entry.prototype==other.prototype) && //believe it or not, compound + prototype is PROBABLY enough, but let's be sure
    (aurostd::identical(m_entry.enthalpy_formation_atom,other.enthalpy_formation_atom,ENERGY_TOL)) &&
    (m_entry.vsg==other.vsg);
}

void ChullPoint::initializeCoords(const xvector<double>& coord) {
  clear();
  setGenCoords(coord);
  setHullCoords();  //default, will change later with increasing dims
}

void ChullPoint::initializeCoords(const vector<string>& velements,const aflowlib::_aflowlib_entry& entry,bool formation_energy_hull) {
  clear();
  addEntry(entry);
  setGenCoords(velements,m_entry,formation_energy_hull);
  setHullCoords();  //default, will change later with increasing dims
  m_has_entry=true;
}

void ChullPoint::addEntry(const aflowlib::_aflowlib_entry& entry) {
  m_entry=entry;
  if(CORRECT_BAD_DATABASE){m_entry.correctBadDatabase(*p_FileMESSAGE,true,*p_oss);} //verbose
}

void ChullPoint::setGenCoords(const xvector<double>& coord) {m_coords=coord;aurostd::shiftlrows(m_coords,0);}
void ChullPoint::setGenCoords(const vector<string>& velements,const aflowlib::_aflowlib_entry& entry,bool formation_energy_hull) {
  xvector<double> coord(velements.size()-1,0);
  double c_sum=0.0;
  bool found;
  for(uint i=0;i<entry.vcomposition.size();i++){c_sum+=entry.vcomposition[i];}  //derive stoich exactly!
  for(uint i=0;i<velements.size()-1;i++){
    found=false;
    for(uint j=0;j<entry.vspecies.size() && !found;j++){
      if(velements[i]==entry.vspecies[j]){
        coord[i]=entry.vcomposition[j]/c_sum;
        found=true;
      }
    }
  }
  m_formation_energy_coord=formation_energy_hull;
  if(m_formation_energy_coord){coord[coord.urows]=entry.enthalpy_formation_atom;}
  else{coord[coord.urows]=entry.entropic_temperature;}  //entropic temperature is positive for stable compounds (we want upper half convex-hull)
  setGenCoords(coord);
}

vector<uint> ChullPoint::getRelevantIndices(const xvector<int>& elements_present) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullPoint::getRelevantIndices():";
  if(!m_has_stoich_coords){throw CHullLogicError(soliloquy,"Non-stoich coordinates");}
  if(elements_present.rows!=s_coords.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between point and elements_present");}
  vector<uint> relevant_indices;
  for(uint i=0;i<(uint)elements_present.rows;i++){
    if(elements_present[i]==0 && abs(s_coords[i])>=ZERO_TOL){throw CHullLogicError(soliloquy,"Attempting to reduce non-zero coord");}
    if(elements_present[i]==1){relevant_indices.push_back(i);}
  }
  if(LDEBUG){
    cerr << soliloquy << " relevant indices=";
    for(uint i=0;i<relevant_indices.size();i++){cerr << relevant_indices[i] << (i!=relevant_indices.size()-1?",":"");}
    cerr << " (elements_present=" << elements_present << ")" << endl;
  }
  return relevant_indices;
}

void ChullPoint::setStoichCoords() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullPoint::setStoichCoords():";
  if(!m_has_stoich_coords){throw CHullLogicError(soliloquy,"Non-stoich coordinates");}
  double c_sum=0.0; //concentration sum
  xvector<double> stoich(m_coords.urows,0);
  xvector<int> elements_present(m_coords.urows,0);
  if(LDEBUG){cerr << soliloquy << " m_coords=" << m_coords << endl;}
  for(uint j=0;j<(uint)m_coords.rows-1;j++){
    if(std::signbit(m_coords[j])){throw CHullLogicError(soliloquy,"Negative stoich coordinate found");} //no negative numbers in stoich coordinates, only energy
    stoich[j]=m_coords[j];
    if(m_coords[j]>=ZERO_TOL){elements_present[j]=1;}
    c_sum+=m_coords[j];
  }
  stoich[stoich.urows]=(1.0-c_sum); //hidden dimension
  if(std::signbit(stoich[stoich.urows])){throw CHullLogicError(soliloquy,"Negative stoich coordinate found");}  //no negative numbers
  if(stoich[stoich.urows]>=ZERO_TOL){elements_present[elements_present.urows]=1;}   //check if nary++
  s_coords=stoich;
  c_coords=s_coords;
  if(m_has_entry){
    c_sum=0.0;
    for(uint i=0;i<m_entry.vcomposition.size();i++){c_sum+=m_entry.vcomposition[i];}  //derive stoich exactly! better than natoms (double vs. uint)
    c_coords*=c_sum;
  }
  m_elements_present=elements_present;
  m_i_nary=sum(elements_present)-1;
  setHullCoords(elements_present);  //default, will change later with increasing dims
}

void ChullPoint::setHullCoords() {setHullCoords(m_coords);}  //default to m_coords
void ChullPoint::setHullCoords(const xvector<double>& coords) {h_coords=coords;}
void ChullPoint::setHullCoords(const xvector<int>& elements_present) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullPoint::setHullCoords():";
  uint h_dim=sum(elements_present);
  xvector<double> coords(h_dim-1,0);
  vector<uint> relevant_indices=getRelevantIndices(elements_present);
  for(uint i=0;i<relevant_indices.size();i++){coords[i]=m_coords[relevant_indices[i]];}
  coords[coords.urows]=getLastCoord(); //overwrite last coord appropriately
  
  if(LDEBUG){
    cerr << soliloquy << " elements_present=" << elements_present << endl;
    cerr << soliloquy << " s_coords=" << s_coords << endl;
    cerr << soliloquy << " c_coords=" << c_coords << endl;
    cerr << soliloquy << " setting h_coords=" << coords << endl;
  }

  setHullCoords(coords);
}

void ChullPoint::cleanPoint() {h_coords.clear();}
} // namespace chull

namespace chull {
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
FacetPoint::FacetPoint() {free();}
FacetPoint::FacetPoint(const ChullPoint& point,uint index,bool full_copy){initialize(point,index,full_copy);}  //need BOTH point and index, otherwise, just use point/index independently
FacetPoint::FacetPoint(const FacetPoint& b) {copy(b);}  // copy PUBLIC
FacetPoint::~FacetPoint() {free();}

const FacetPoint& FacetPoint::operator=(const FacetPoint& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

//simple sort, so ONLY sort facets from the same hull
bool FacetPoint::operator<(const FacetPoint& other) const {return ch_index<other.ch_index;}
void FacetPoint::clear() {FacetPoint a; copy(a);} //clear PUBLIC
void FacetPoint::free() {
  m_initialized=false;
  ch_index=AUROSTD_MAX_UINT;
  ch_point.clear();
}

void FacetPoint::copy(const FacetPoint& b) { //copy PRIVATE
  m_initialized=b.m_initialized;
  ch_index=b.ch_index;
  ch_point=b.ch_point;
}

void FacetPoint::initialize(const ChullPoint& point,uint index,bool full_copy) {
  if(full_copy){ch_point=point;}
  else{ch_point.HullCopy(point);} //fast copy of just hull relevant data, not extra entry data, for this, use index in ConvexHull
  ch_index=index;
  m_initialized=true;
}
} // namespace chull

//nice sorters for points we know sit on a thermo hull (stoich coords + energy dimension)
namespace chull {
bool sortThermoPoints::operator() (const FacetPoint& fpi,const FacetPoint& fpj) const{
  string soliloquy="ConvexHull::sortThermoPoints::operator():";
  const ChullPoint& ci=fpi.ch_point;
  const ChullPoint& cj=fpj.ch_point;
  return (*this).operator()(ci,cj);
}

bool sortThermoPoints::operator() (const ChullPoint& ci,const ChullPoint& cj) const{
  string soliloquy="ConvexHull::sortThermoPoints::operator():";
  if(!(ci.m_initialized && cj.m_initialized)){throw CHullLogicError(soliloquy,"Points not initialized");}
  //do not first sort binaries from ternaries, screws up facet sorting
  //keep sorting based on concentration of elements in relative order
  //if(ci.m_has_stoich_coords&&cj.m_has_stoich_coords){
  //  if(ci.m_i_nary!=cj.m_i_nary){return ci.m_i_nary<cj.m_i_nary;} //binaries before ternaries
  //}
  if(ci.m_coords.rows!=cj.m_coords.rows){throw CHullLogicError(soliloquy,"Dimension mismatch among points");}
  else{
    for(uint i=0;i<(uint)ci.m_coords.rows-1;i++){
      if(ci.m_coords[i]!=cj.m_coords[i]){
        return m_sort_stoich_ascending ? (ci.m_coords[i]<cj.m_coords[i]) : (ci.m_coords[i]>cj.m_coords[i]);
      }
    }
    if(ci.getLastCoord()!=cj.getLastCoord()){
      return m_sort_energy_ascending ? (ci.getLastCoord()<cj.getLastCoord()) : (ci.getLastCoord()>cj.getLastCoord());
    }
    return false; //true; //breaks if true
  }
}
} //namespace chull

namespace chull {
//--------------------------------------------------------------------------------
// class ChullFacet
//--------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
ChullFacet::ChullFacet(ostream& oss) : p_FileMESSAGE(NULL) {create(oss);}
ChullFacet::ChullFacet(ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {create(FileMESSAGE,oss);}
ChullFacet::ChullFacet(const ChullFacet& b) {copy(b);} // copy PUBLIC
ChullFacet::~ChullFacet() {
  free();
  if(new_ofstream){delete p_FileMESSAGE;}
}

const ChullFacet& ChullFacet::operator=(const ChullFacet& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

bool ChullFacet::operator<(const ChullFacet& other) const {
  string soliloquy="ChullFacet::operator<():";
  if(m_vertices.size()!=other.m_vertices.size()){throw CHullLogicError(soliloquy,"Dimension mismatch between facet points");}

  //simply sort by m_point (indices)
  for(uint i=0;i<m_vertices.size();i++){
    if(!(m_vertices[i].m_initialized && other.m_vertices[i].m_initialized)){throw CHullLogicError(soliloquy,"Uninitialized facetpoint");}
    if(m_vertices[i].ch_index!=other.m_vertices[i].ch_index){return m_vertices[i].ch_index<other.m_vertices[i].ch_index;}
  }
  return false;
}

void ChullFacet::clear() {ChullFacet a; copy(a);}  //clear PRIVATE
void ChullFacet::free() {
  m_initialized=false;
  m_vertices.clear();
  m_dim=AUROSTD_MAX_UINT;
  m_has_stoich_coords=false;
  m_directive_vectors.clear();
  m_normal.clear();
  m_offset=AUROSTD_NAN;
  m_facet_centroid.clear();
  m_hull_reference.clear();
  m_is_vertical=false;
  m_is_artificial=false;
  m_in_lower_hemisphere=false;
  m_ridges.clear();
  p_oss=NULL;
  p_FileMESSAGE=NULL;
  new_ofstream=false;
  cleanFacet();
}

void ChullFacet::copy(const ChullFacet& b) {  //copy PRIVATE
  m_initialized=b.m_initialized;
  m_vertices.clear(); for(uint i=0;i<b.m_vertices.size();i++){m_vertices.push_back(b.m_vertices[i]);}
  m_dim=b.m_dim;
  m_has_stoich_coords=b.m_has_stoich_coords;
  m_directive_vectors.clear(); for(uint i=0;i<b.m_directive_vectors.size();i++){m_directive_vectors.push_back(b.m_directive_vectors[i]);}
  m_normal=b.m_normal;
  m_offset=b.m_offset;
  m_facet_centroid=b.m_facet_centroid;
  m_hull_reference=b.m_hull_reference;
  m_is_vertical=b.m_is_vertical;
  m_is_artificial=b.m_is_artificial;
  m_in_lower_hemisphere=b.m_in_lower_hemisphere;
  f_visited=b.f_visited;
  f_outside_set.clear(); for(uint i=0;i<b.f_outside_set.size();i++){f_outside_set.push_back(b.f_outside_set[i]);}
  f_furthest_point=b.f_furthest_point;
  m_ridges.clear(); for(uint i=0;i<b.m_ridges.size();i++){m_ridges.push_back(b.m_ridges[i]);}
  f_neighbors.clear(); for(uint i=0;i<b.f_neighbors.size();i++){f_neighbors.push_back(b.f_neighbors[i]);}
  p_oss=b.p_oss;
  new_ofstream=b.new_ofstream;  //very important! seg faults otherwise
  p_FileMESSAGE=b.p_FileMESSAGE;
}

bool ChullFacet::shareRidge(const ChullFacet& other) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::shareRidge():";
  bool match;
  for(uint i=0;i<m_ridges.size();i++){
    const vector<uint>& ridge_indices1=m_ridges[i].getCHIndices();
    for(uint j=0;j<other.m_ridges.size();j++){
      const vector<uint>& ridge_indices2=other.m_ridges[j].getCHIndices();
      if(LDEBUG){
        cerr << soliloquy << " comparing ";
        for(uint ri=0;ri<ridge_indices1.size();ri++){cerr << ridge_indices1[ri] << " ";}
        cerr << " vs. ";
        for(uint rj=0;rj<ridge_indices1.size();rj++){cerr << ridge_indices2[rj] << " ";}
      }
      match=ridge_indices1==ridge_indices2;
      if(LDEBUG){cerr << (match?"MATCH":"NO") << endl;}
      if(match){return true;}
    }
  }
  return false;
}

bool ChullFacet::isPointOnFacet(const FacetPoint& fp) const {
  string soliloquy="ChullFacet::isPointOnFacet():";
  if(!fp.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized facetpoint");}
  return isPointOnFacet(fp.ch_index);
}

bool ChullFacet::isPointOnFacet(uint i_point) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::isPointOnFacet():";
  if(m_vertices.size()==0){throw CHullLogicError(soliloquy,"Facet has no vertices");}
  //if(!m_initialized){throw CHullLogicError(soliloquy,"Uninitialized facet");}
  if(LDEBUG){cerr << soliloquy << "checking if point[" << i_point << "] is on this facet" << endl;}
  for(uint i=0;i<m_vertices.size();i++){
    if(LDEBUG){cerr << soliloquy << "m_vertices[i].ch_index==" << m_vertices[i].ch_index << " ?= i_point==" << i_point << endl;}
    if(m_vertices[i].ch_index==i_point){return true;}
  }
  if(LDEBUG){cerr << soliloquy << " point[" << i_point << "] is not on this facet" << endl;}
  return false;
}

bool ChullFacet::isPointOutside(const FacetPoint& f_point) const {
  string soliloquy="ChullFacet::isPointOutside():";
  if(!f_point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized facetpoint");}
  if(isPointOnFacet(f_point)){return false;}
  return isPointOutside(f_point.ch_point);
}

bool ChullFacet::isPointOutside(const ChullPoint& point) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::isPointOutside():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Facet not initialized");}
  double dist_point=pointPlaneDistance(point);
  bool is_outside;
  //special case no longer needed, but we keep here just in case
  //if(m_is_vertical){
  //  if(LDEBUG){cerr << soliloquy << " performing special VERTICAL facet check for outside-ness" << endl;}
  //  xvector<double> ref=m_hull_reference;
  //  for(uint i=0;i<(uint)ref.rows-1;i++){ref[i]=1.0/m_dim;}
  //  if(LDEBUG){cerr << soliloquy << " ref=" << ref << endl;}
  //  double dist_ref=pointPlaneDistance(point);
  //  is_outside=(std::signbit(dist_point)!=std::signbit(dist_ref) && abs(dist_point)>=ZERO_TOL);
  //  if(LDEBUG){cerr << soliloquy << " sign of distance indicates point is " << (is_outside?"OUTSIDE":"INSIDE") << " hull" << endl;}
  //  return is_outside;
  //}
  //if(LDEBUG){cerr << soliloquy << " performing normal check for outside-ness (not vertical facet)" << endl;}
  if(LDEBUG){
    cerr << soliloquy << " looking at facet with vertices: ";
    for(uint i=0;i<m_vertices.size();i++){
      cerr << m_vertices[i].ch_point.m_coords << " | ";
    }
    cerr << "m_normal=" << m_normal << endl;
    cerr << soliloquy << " checking if point[h_coords=" << point.h_coords << "] is on this facet" << endl;
    cerr << soliloquy << " dist=" << dist_point << endl;
  }     
  //point is on facet
  if(abs(dist_point)<ZERO_TOL){
    if(LDEBUG){cerr << soliloquy << " point appears to be right on top of facet" << endl;}
    return false;
  }
  is_outside=(std::signbit(dist_point));
  if(LDEBUG){cerr << soliloquy << " sign of distance indicates point is " << (is_outside?"OUTSIDE":"INSIDE") << " hull" << endl;}
  return std::signbit(dist_point);                //shortcut with inward-aligned normal
}

double ChullFacet::pointPlaneDistance(const ChullPoint& point) const {return pointPlaneDistance(point.h_coords);}
double ChullFacet::pointPlaneDistance(const xvector<double>& point) const {
  string soliloquy="ChullFacet::pointPlaneDistance():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Facet not initialized");}
  if(point.rows!=m_vertices[0].ch_point.h_coords.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between point and facet");}
  xvector<double> diff=point-m_vertices[0].ch_point.h_coords;
  return scalar_product(m_normal,diff);
}

double ChullFacet::zeroPointProjectionDistance(const ChullPoint& point) const {
  string soliloquy="ChullFacet::zeroPointProjectionDistance():";
  return zeroPointProjectionDistance(point.h_coords);
}

double ChullFacet::zeroPointProjectionDistance(const xvector<double>& point) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::zeroPointProjectionDistance():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Uninitialized facet");}
  if(m_normal.rows!=point.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between facet["+aurostd::utype2string(m_normal.rows)+"] and point["+aurostd::utype2string(point.rows)+"]");}
  double dist=-m_offset;
  for(uint i=0;i<(uint)point.rows-1;i++){dist-=m_normal[i]*point[i];} //note that we don't go to rows (because we assume it is zero)
  dist/=m_normal[m_normal.urows];
  if(LDEBUG){
    cerr << soliloquy << " point=" << point << " projected onto facet with normal=" << m_normal << " and offset=" << m_offset << endl;
    cerr << soliloquy << " dist=" << dist << endl;
  }
  return dist;
}

double ChullFacet::verticalDistance(const ChullPoint& point,bool zero_point_projection_only) const {
  string soliloquy="ChullFacet::verticalDistance():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Uninitialized facet");}
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  return verticalDistance(point.h_coords,zero_point_projection_only);
}

double ChullFacet::verticalDistance(const xvector<double>& point,bool zero_point_projection_only) const {
  //NB: we approximate the facet to be a hyperplane (hence not verticalDistance2Facet)
  //also, this is the vertical distance, not the shortest (vertical is chemically meaningful)
  //to find the true distance between point and facet, must use quadratic programming
  //https://www.mathworks.com/matlabcentral/answers/107595-how-can-i-find-the-minimum-distance-from-convex-boundary
  //https://stackoverflow.com/questions/18230259/computing-distance-from-a-point-to-a-triangulation-in-3d-with-matlab
  string soliloquy="ChullFacet::verticalDistance():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Uninitialized facet");}
  double dist=zeroPointProjectionDistance(point);
  if(zero_point_projection_only){return dist;}
  dist-=point[point.urows];
  return dist;
}

vector<uint> ChullFacet::getCHIndices() const {
  string soliloquy="ChullFacet::getCHIndices():";
  if(!m_vertices.size()){throw CHullLogicError(soliloquy,"No vertices found");}
  vector<uint> vi;
  for(uint i=0;i<m_vertices.size();i++){vi.push_back(m_vertices[i].ch_index);}
  return vi;
}

void ChullFacet::create(ostream& oss) { //this it NOT an initialization, as we do this piece by piece
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  create(*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
}

void ChullFacet::create(ofstream& FileMESSAGE,ostream& oss) { //this it NOT an initialization, as we do this piece by piece
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
}

void ChullFacet::setOFStream(ofstream& FileMESSAGE){p_FileMESSAGE=&FileMESSAGE;}
void ChullFacet::setOSS(ostream& oss) {p_oss=&oss;}

void ChullFacet::addVertex(const FacetPoint& fp){m_vertices.push_back(fp);}
void ChullFacet::addVertex(const ChullPoint& point,uint index) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  stringstream message;
  string soliloquy="ChullFacet::addVertex():";
  if(m_vertices.size()==0){
    m_has_stoich_coords=point.m_has_stoich_coords;
    if(LDEBUG){cerr << soliloquy << " setting has_stoich_coords=" << m_has_stoich_coords << endl;}
  }
  else{
    if(m_has_stoich_coords && !point.m_has_stoich_coords){
      message << "Mismatch among coord types (stoich vs. non-stoich coords), assuming non-stoich coords";
      pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
      m_has_stoich_coords=false; //(m_has_stoich_coords && point.m_has_stoich_coords);
    }
  }
  m_vertices.push_back(FacetPoint(point,index,false));  //no need for full copy
}

void ChullFacet::initialize(const xvector<double>& ref,uint h_dim,bool check_validity){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::initialize():";
  if(LDEBUG){
    cerr << soliloquy << " initialize facet with points: " << endl;
    for(uint i=0;i<m_vertices.size();i++){cerr << "    " << m_vertices[i].ch_point.h_coords << endl;}
  }
  m_dim=h_dim;
  m_hull_reference=ref;
  setDirectiveVectors(check_validity);
  setNormal(check_validity);
  setOffset();  //FIX after normal alignment
  setCentroid();
  alignNormalInward(); //hull centroid
  setVertical();
  setArtificial();
  setHemisphere();
  setRidges();
  m_initialized=true;
}

bool ChullFacet::hasValidPoints(string& error){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::hasValidPoints():";
  error.clear();
  if(!m_vertices.size()){error="Facet has no defining points";return false;}
  for(uint i=0;i<m_vertices.size();i++){if(!m_vertices[i].m_initialized){error="Uninitialized facetpoint";}}
  if((uint)m_vertices[0].ch_point.h_coords.rows!=m_vertices.size()){
    if(LDEBUG){
      cerr << soliloquy << " m_vertices[0].ch_point.h_coords.rows=" << m_vertices[0].ch_point.h_coords.rows;
      cerr << " vs. m_vertices.size()=" << m_vertices.size() << endl;
    }
    error="Dimension mismatch among points and coordinates";return false;
  }
  for(uint i=1;i<m_vertices.size();i++){
    if(LDEBUG){
      cerr << soliloquy << " " << m_vertices[i].ch_index << "  h_coords=" << m_vertices[i].ch_point.h_coords << endl;
      cerr << soliloquy << " m_vertices[i].ch_point.h_coords.rows=" << m_vertices[i].ch_point.h_coords.rows << " vs. m_vertices[0].ch_point.h_coords.rows=" << m_vertices[0].ch_point.h_coords.rows << endl;
    }
    if(m_vertices[i].ch_point.h_coords.rows!=m_vertices[0].ch_point.h_coords.rows){error="Dimension mismatch among facet points";return false;}
  }
  for(uint i=0;i<m_vertices.size();i++) {
    for(uint j=i+1;j<m_vertices.size();j++) {
      if(m_vertices[i].ch_index==m_vertices[j].ch_index){error="Facet points are degenerate";return false;}
    }
  }
  if(m_vertices.size()!=(uint)m_vertices[0].ch_point.h_coords.rows){error="Facet has wrong number of defining points given dimension";return false;}
  return true;
}

void ChullFacet::setDirectiveVectors(bool check_validity){  //perhaps we already checked...
  string soliloquy="ChullFacet::setDirectiveVectors():";
  m_directive_vectors.clear();
  string error;
  if(check_validity && !hasValidPoints(error)){throw CHullLogicError(soliloquy,error);}
  
  std::sort(m_vertices.begin(),m_vertices.end());
  for(uint i=1;i<m_vertices.size();i++){
    m_directive_vectors.push_back( m_vertices[i].ch_point.h_coords - m_vertices[0].ch_point.h_coords );
  }
}

bool ChullFacet::pointsMatchDirectiveVectors(string& error){
  error.clear();
  //now we can define 
  if(m_directive_vectors.size()!=m_vertices.size()-1){error="Dimension mismatch among directive vectors and points";return false;}
  if((uint)m_directive_vectors[0].rows!=m_vertices.size()){error="Dimension mismatch among directive vectors coordinates and points";return false;}
  return true;
}

bool ChullFacet::hasValidDirectiveVectors(string& error){
  error.clear();
  if(!m_directive_vectors.size()){error="No directive vectors found";return false;}
  for(uint i=1;i<m_directive_vectors.size();i++){
    if(m_directive_vectors[i].rows!=m_directive_vectors[0].rows){error="Dimension mismatch among directive vectors coordinates";return false;}
  }
  for(uint i=0;i<m_directive_vectors.size();i++){if(modulus(m_directive_vectors[i])<ZERO_TOL){error="Ill-defined directive vectors";return false;}}
  return true;
}

bool ChullFacet::hasCollinearVectors(bool check_validity){  //perhaps we already checked...
  string soliloquy="ChullFacet::hasCollinearVectors():";
  string error;
  if(check_validity && !pointsMatchDirectiveVectors(error)){throw CHullLogicError(soliloquy,error);}
  if(check_validity && !hasValidDirectiveVectors(error)){throw CHullLogicError(soliloquy,error);}
  for(uint i=0;i<(m_directive_vectors.size()-1);i++) {
    for(uint j=i+1;j<m_directive_vectors.size();j++) {
      if(aurostd::isCollinear(m_directive_vectors[i],m_directive_vectors[j],ZERO_TOL)){return true;}
    }
  }
  return false;
}

bool ChullFacet::isValid(string& error) {
  error.clear();
  if(!hasValidPoints(error)){return false;}
  setDirectiveVectors(false);
  if(!pointsMatchDirectiveVectors(error)){return false;}
  if(!hasValidDirectiveVectors(error)){return false;}
  if(hasCollinearVectors(false)){error="Directive vectors are collinear";return false;}
  return true;
}

void ChullFacet::setNormal(bool check_validity){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::setNormal():";
  m_normal.clear();
  string error;
  if(check_validity && !isValid(error)){throw CHullLogicError(soliloquy,error);}
  if(LDEBUG){
    for(uint i=0;i<m_directive_vectors.size();i++){
      cerr << soliloquy << " directive_vector[" << i << "]=" << m_directive_vectors[i] << endl;
    }
  }
  if(!m_directive_vectors.size()){throw CHullLogicError(soliloquy,"No directive vectors calculated");}
  m_normal=aurostd::getGeneralNormal(m_directive_vectors);
  if(aurostd::modulus(m_normal)<ZERO_TOL){throw CHullLogicError(soliloquy,"Invalid normal calculated");}
  if(LDEBUG){cerr << soliloquy << " normal=" << m_normal << endl;}
}

void ChullFacet::setOffset(){
  string soliloquy="ChullFacet::setOffset():";
  if(!m_vertices.size()){throw CHullLogicError(soliloquy,"Facet has not been defined");}
  const xvector<double>& plane_point=m_vertices[0].ch_point.h_coords;
  if(m_normal.rows!=plane_point.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between normal and point");}
  m_offset=-scalar_product(m_normal,plane_point);
}

void ChullFacet::setCentroid() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::setCentroid():";
  vector<xvector<double> > points;
  for(uint i=0;i<m_vertices.size();i++){points.push_back(m_vertices[i].ch_point.h_coords);}
  m_facet_centroid=aurostd::getCentroid(points);
  if(LDEBUG){cerr << soliloquy << " centroid: " << m_facet_centroid << endl;}
}

//_AFLOW_CHULL_VERTICAL_PLANE_TOLERANCE_ = 1e-4 for Hf_atom, else 1e-9 for Ts
void ChullFacet::setVertical(){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::setVertical():";
  if(LDEBUG){cerr << soliloquy << " looking if vertical hull: normal=" << m_normal << endl;}
  m_is_vertical=(abs(m_normal[m_normal.urows])<ZERO_TOL); //simple
}

void ChullFacet::setArtificial(){  //in half hulls, this finds the facet of all artificial points
  string soliloquy="ChullFacet::setArtificial():";
  for(uint i=0;i<m_vertices.size();i++){if(!m_vertices[i].ch_point.m_is_artificial){m_is_artificial=false;return;;}}
  m_is_artificial=true;return;
}

void ChullFacet::alignNormalInward() { 
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::alignNormalInward():";
  //we want normal pointing inward
  double dist=scalar_product(m_normal,m_hull_reference)+m_offset;  //point-plane distance formula without normalization
  if(LDEBUG){
    cerr << soliloquy << " m_normal=" << m_normal << endl;
    cerr << soliloquy << " h_reference=" << m_hull_reference << endl;
    cerr << soliloquy << " dist=" << dist << endl;
  }
  bool negate=std::signbit(dist);
  if(negate){
    if(LDEBUG){cerr << soliloquy << " NEGATING" << endl;}
    m_normal=-m_normal; 
    m_offset=-m_offset; //flips sign of offset
  }
  if(LDEBUG){cerr << soliloquy << " aligned normal=" << m_normal << endl;}
}

void ChullFacet::setHemisphere() {
  string soliloquy="ChullFacet::alignNormalInward():";
  //vertical facets are NOT considered lower_hemisphere
  m_in_lower_hemisphere=(!m_is_vertical && !std::signbit(m_normal[m_normal.urows])); //not flat and upward pointed normal
}

void ChullFacet::setFurthestPoint(){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::setFurthestPoint():";
  f_furthest_point.clear();
  if(!m_initialized){throw CHullLogicError(soliloquy,"Facet not initialized");}
  if(!f_outside_set.size()){return;}
  if(LDEBUG){cerr << soliloquy << " getting furthest point for facet with normal " << m_normal << " (is_artificial=" << m_is_artificial << ")" << endl;}
  double dist=AUROSTD_MAX_DOUBLE,max_dist=0;
  for(uint i=0;i<f_outside_set.size();i++){
    dist=abs(pointPlaneDistance(f_outside_set[i].ch_point.h_coords)); //we only care about magnitude here
    if(LDEBUG){cerr << soliloquy << " point=" << f_outside_set[i].ch_point.h_coords << " is " << dist << " from facet" << endl;}
    if(dist>max_dist){
      max_dist=dist;
      f_furthest_point=f_outside_set[i];
    }
  }
  if(LDEBUG){
    cerr << soliloquy << " furthest point from facet:" << endl;
    for(uint i=0;i<m_vertices.size();i++){cerr << "       point[" << m_vertices[i].ch_index << "]=" << m_vertices[i].ch_point.h_coords << endl;}
    cerr << "    is point[" << f_furthest_point.ch_index << "]=" << f_furthest_point.ch_point.h_coords << endl;
  }
}

void ChullFacet::setRidges(){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ChullFacet::setRidges():";
  m_ridges.clear();
  if(!m_vertices.size()){throw CHullLogicError(soliloquy,"Facet has no vertices");}
  for(uint i=(m_vertices.size()-1);i<m_vertices.size();i--){  //wrap around to HUGE number
    m_ridges.push_back(ChullFacet());
    for(uint j=0;j<m_vertices.size();j++){
      if(i!=j){m_ridges.back().m_vertices.push_back(m_vertices[j]);}
    }
    if(m_ridges.back().m_vertices.size()!=m_dim-1){throw CHullLogicError(soliloquy,"Ridge vertex count and facet dimension mismatch");}
    std::sort(m_ridges.back().m_vertices.begin(),m_ridges.back().m_vertices.end());
  }
  std::sort(m_ridges.begin(),m_ridges.end());
  
  if(LDEBUG){
    for(uint i=0;i<m_ridges.size();i++){
      cerr << soliloquy << " ridges for facet[" << i << "]: ";
      for(uint j=0;j<m_ridges[i].m_vertices.size();j++){
        cerr << m_ridges[i].m_vertices[j].ch_index << " " ;
      }
      cerr << endl;
    }
  }
}

void ChullFacet::cleanFacet() {
  f_visited=false;
  f_outside_set.clear();
  f_furthest_point.clear();
  f_neighbors.clear();
}
} // namespace chull

namespace chull {
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
CoordGroup::CoordGroup() {free();}
CoordGroup::CoordGroup(const xvector<double>& coord,bool has_stoich_coords) {initialize(coord,has_stoich_coords);}
CoordGroup::CoordGroup(const CoordGroup& b) {copy(b);}  // copy PUBLIC
CoordGroup::~CoordGroup() {free();}

const CoordGroup& CoordGroup::operator=(const CoordGroup& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

bool CoordGroup::operator<(const CoordGroup& other) const {
  // safety, so it doesn't break, but it's outside scope of function
  string soliloquy="CoordGroup::operator<():";
  if(m_coords.rows!=other.m_coords.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between stoichiometries");} //{return (m_coords.rows<other.m_coords.rows);}
  for(uint i=0;i<(uint)m_coords.rows;i++) {
    if(m_coords(i)!=other.m_coords(i)) {return (m_coords(i)<other.m_coords(i));}
  }
  return false;
}

void CoordGroup::clear() {CoordGroup a; copy(a);} //clear PUBLIC
void CoordGroup::free() {
  m_initialized=false;
  m_coords.clear();
  m_points.clear();
  m_has_stoich_coords=false;
  m_has_artificial_unary=false;
  m_is_on_hull=false;
  m_hull_member=AUROSTD_MAX_UINT;
  m_ref_state=AUROSTD_MAX_UINT;
  m_hull_points.clear();
  m_i_nary=AUROSTD_MAX_UINT;
  m_i_alloy=AUROSTD_MAX_UINT;
  m_nearest_facet=AUROSTD_MAX_UINT;
  m_nearest_distance=AUROSTD_MAX_DOUBLE;
  m_decomp_phases.clear();
  m_decomp_coefs.clear();
  m_equilibrium_phases.clear();
  m_equivalent_g_states.clear();
}

void CoordGroup::copy(const CoordGroup& b) {
  m_initialized=b.m_initialized;
  m_coords=b.m_coords;
  m_points.clear(); for(uint i=0;i<b.m_points.size();i++){m_points.push_back(b.m_points[i]);}
  m_has_stoich_coords=b.m_has_stoich_coords;
  m_has_artificial_unary=b.m_has_artificial_unary;
  m_is_on_hull=b.m_is_on_hull;
  m_hull_member=b.m_hull_member;
  m_ref_state=b.m_ref_state;
  m_hull_points.clear(); for(uint i=0;i<b.m_hull_points.size();i++){m_hull_points.push_back(b.m_hull_points[i]);}
  m_i_nary=b.m_i_nary;
  m_i_alloy=b.m_i_alloy;
  m_nearest_facet=b.m_nearest_facet;
  m_nearest_distance=b.m_nearest_distance;
  m_decomp_phases.clear(); for(uint i=0;i<b.m_decomp_phases.size();i++){m_decomp_phases.push_back(b.m_decomp_phases[i]);}
  m_decomp_coefs=b.m_decomp_coefs;
  for(uint i=0;i<m_equilibrium_phases.size();i++){m_equilibrium_phases.clear();} m_equilibrium_phases.clear(); for(uint i=0;i<b.m_equilibrium_phases.size();i++){m_equilibrium_phases.push_back(b.m_equilibrium_phases[i]);}
  m_equivalent_g_states.clear(); for(uint i=0;i<b.m_equivalent_g_states.size();i++){m_equivalent_g_states.push_back(b.m_equivalent_g_states[i]);}
}

void CoordGroup::initialize(const xvector<double>& coord,bool has_stoich_coords) {
  free();
  m_coords=coord;
  m_has_stoich_coords=has_stoich_coords;
  m_has_artificial_unary=false;
  m_initialized=true;
}

xvector<int> CoordGroup::getElementsPresent() const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  //quick checks
  string soliloquy="CoordGroup::getElementsPresent():";
  if(!m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  for(uint i=0;i<(uint)m_coords.rows;i++){
    if(std::signbit(m_coords[i]) || m_coords[i]>1.0){throw CHullLogicError(soliloquy,"Coord("+aurostd::utype2string(i)+") is outside of [0,1] range of a generalized stoichiometry coordinate");}
  }
  double hid_dim=1.0-sum(m_coords);
  if(LDEBUG){cerr << soliloquy << " hid_dim=" << hid_dim << endl;}
  if(std::signbit(hid_dim) || hid_dim>1.0) {throw CHullLogicError(soliloquy,"Coord("+aurostd::utype2string(m_coords.rows)+") is outside of [0,1] range of a generalized stoichiometry coordinate");}

  xvector<int> elements_present(m_coords.rows,0);
  for(uint i=0;i<(uint)m_coords.rows;i++){if(m_coords[i]>=ZERO_TOL){elements_present[i]=1;}}
  if(hid_dim>=ZERO_TOL){elements_present[m_coords.rows]=1;}

  if(LDEBUG){cerr << soliloquy << " elements_present=" << elements_present << endl;}
  return elements_present;
}

uint CoordGroup::getDim() const {
  if(!m_initialized){
    string soliloquy="CoordGroup::getDim():";
    throw CHullLogicError(soliloquy,"Uninitialized coordgroup");
  }
  return sum(getElementsPresent());
}

} // namespace chull

namespace chull {
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
Alloy::Alloy() {free();}
Alloy::Alloy(const xvector<int>& elements_present) {initialize(elements_present);}
Alloy::Alloy(const Alloy& b) {copy(b);}
Alloy::~Alloy() {free();}

const Alloy& Alloy::operator=(const Alloy& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

bool Alloy::operator<(const Alloy& other) const {
  // safety, so it doesn't break, but it's outside scope of function
  string soliloquy="Alloy::operator<():";
  if(m_elements_present.rows!=other.m_elements_present.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between alloys");} //{return (m_elements_present.rows<other.m_elements_present.rows);}
  for(uint i=0;i<(uint)m_elements_present.rows;i++) {
    if(m_elements_present[i]!=other.m_elements_present[i]) {return (m_elements_present[i]<other.m_elements_present[i]);}
  }
  return false;
}

void Alloy::clear() {Alloy a; copy(a);} //clear PUBLIC
void Alloy::free() { 
  m_initialized=false;
  m_elements_present.clear();
  m_dim=AUROSTD_MAX_UINT;
  m_coord_groups.clear();
  m_facets.clear();
}

void Alloy::copy(const Alloy& b) {
  m_initialized=b.m_initialized;
  m_elements_present=b.m_elements_present;
  m_dim=b.m_dim;
  m_coord_groups.clear(); for(uint i=0;i<b.m_coord_groups.size();i++){m_coord_groups.push_back(b.m_coord_groups[i]);}
  m_facets.clear(); for(uint i=0;i<b.m_facets.size();i++){m_facets.push_back(b.m_facets[i]);}
}

void Alloy::initialize(const xvector<int>& elements_present){
  free();
  m_elements_present=elements_present;
  m_dim=sum(elements_present);
  m_initialized=true;
}
}

namespace chull { 
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
Nary::Nary() {free();}
Nary::Nary(uint dim) {initialize(dim);}
Nary::Nary(const Nary& b) {copy(b);}
Nary::~Nary() {free();}

const Nary& Nary::operator=(const Nary& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

bool Nary::operator<(const Nary& other) const {return (nary<other.nary);}

void Nary::clear() {Nary a; copy(a);}
void Nary::free() {
  m_initialized=false;
  nary=AUROSTD_MAX_UINT;
  m_alloys.clear();
}

void Nary::copy(const Nary& b) {
  m_initialized=b.m_initialized;
  nary=b.nary;
  m_alloys.clear(); for(uint i=0;i<b.m_alloys.size();i++){m_alloys.push_back(b.m_alloys[i]);}
}

void Nary::initialize(uint dim) {
  free();
  nary=dim;
  m_initialized=true;
}
} // namespace chull

namespace chull {
//--------------------------------------------------------------------------------
// class ConvexHull
//--------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
ConvexHull::ConvexHull(ostream& oss) : p_FileMESSAGE(NULL) {initialize(oss);}
ConvexHull::ConvexHull(string alloy,ostream& oss) : p_FileMESSAGE(NULL) {initialize(alloy,oss);}
ConvexHull::ConvexHull(const vector<string>& velements,ostream& oss) : p_FileMESSAGE(NULL) {initialize(velements,oss);}
ConvexHull::ConvexHull(const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ostream& oss) : p_FileMESSAGE(NULL) {initialize(velements,entries,oss);}
ConvexHull::ConvexHull(const vector<xvector<double> >& vcoords,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vcoords,oss,has_stoich_coords,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const vector<ChullPoint>& vpoints,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpoints,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const vector<ChullPoint>& vpoints,const vector<string>& velements,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpoints,velements,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(FileMESSAGE,oss);}
ConvexHull::ConvexHull(string alloy,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(alloy,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(velements,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(velements,entries,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const vector<xvector<double> >& vcoords,ofstream& FileMESSAGE,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vcoords,FileMESSAGE,oss,has_stoich_coords,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const vector<ChullPoint>& vpoints,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpoints,FileMESSAGE,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const vector<ChullPoint>& vpoints,const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpoints,velements,FileMESSAGE,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,string alloy,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,alloy,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<string>& velements,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,velements,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,velements,entries,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<xvector<double> >& vcoords,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpflow,vcoords,oss,has_stoich_coords,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpflow,vpoints,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,const vector<string>& velements,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpflow,vpoints,velements,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,string alloy,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,alloy,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,velements,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ofstream& FileMESSAGE,ostream& oss) : p_FileMESSAGE(NULL) {initialize(vpflow,velements,entries,FileMESSAGE,oss);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<xvector<double> >& vcoords,ofstream& FileMESSAGE,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpflow,vcoords,FileMESSAGE,oss,has_stoich_coords,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpflow,vpoints,FileMESSAGE,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) : p_FileMESSAGE(NULL) {initialize(vpflow,vpoints,velements,FileMESSAGE,oss,half_hull,add_artificial_unaries);}
ConvexHull::ConvexHull(const ConvexHull& b) {copy(b);}

ConvexHull::~ConvexHull() {
  free();
  if(new_ofstream){delete p_FileMESSAGE;}
}

const ConvexHull& ConvexHull::operator=(const ConvexHull& other) {
  if(this!=&other) {free();copy(other);}
  return *this;
}

void ConvexHull::clear() {ConvexHull a; copy(a);}  //clear PRIVATE
void ConvexHull::free() {
  m_initialized=false;
  m_velements.clear();
  m_points.clear();
  m_naries.clear();
  m_coord_groups.clear();
  m_dim=AUROSTD_MAX_UINT;
  m_half_hull=false;
  m_lower_hull=false;
  m_has_stoich_coords=false;
  m_add_artificial_unaries=false;
  m_thermo_hull=false;
  m_formation_energy_hull=false;
  m_facets.clear();
  m_i_facets.clear();
  m_sort_energy_ascending=true;
  m_cflags.clear();
  p_oss=NULL;
  p_FileMESSAGE=NULL;
  new_ofstream=false;
  cleanHull();
}

void ConvexHull::copy(const ConvexHull& b) {  //copy PRIVATE
  m_initialized=b.m_initialized;
  m_velements.clear(); for(uint i=0;i<b.m_velements.size();i++){m_velements.push_back(b.m_velements[i]);}
  m_points.clear(); for(uint i=0;i<b.m_points.size();i++){m_points.push_back(b.m_points[i]);}
  m_naries.clear(); for(uint i=0;i<b.m_naries.size();i++){m_naries.push_back(b.m_naries[i]);}
  m_coord_groups.clear(); for(uint i=0;i<b.m_coord_groups.size();i++){m_coord_groups.push_back(b.m_coord_groups[i]);}
  m_dim=b.m_dim;
  m_half_hull=b.m_half_hull;
  m_lower_hull=b.m_lower_hull;
  m_has_stoich_coords=b.m_has_stoich_coords;
  m_add_artificial_unaries=b.m_add_artificial_unaries;
  m_thermo_hull=b.m_thermo_hull;
  m_formation_energy_hull=b.m_formation_energy_hull;
  m_facets.clear(); for(uint i=0;i<b.m_facets.size();i++){m_facets.push_back(b.m_facets[i]);}
  m_i_facets.clear(); for(uint i=0;i<b.m_i_facets.size();i++){m_i_facets.push_back(b.m_i_facets[i]);}
  m_sort_energy_ascending=b.m_sort_energy_ascending;
  m_cflags=b.m_cflags;
  p_oss=b.p_oss;
  new_ofstream=b.new_ofstream;  //very important! seg faults otherwise
  p_FileMESSAGE=b.p_FileMESSAGE;
  h_dim=b.h_dim;
  m_elements_present=b.m_elements_present;
  h_points.clear(); for(uint i=0;i<b.h_points.size();i++){h_points.push_back(b.h_points[i]);}
  h_centroid=b.h_centroid;
  h_reference=b.h_reference;
  h_facets.clear(); for(uint i=0;i<b.h_facets.size();i++){h_facets.push_back(b.h_facets[i]);}
  h_visible_facets.clear(); for(uint i=0;i<b.h_visible_facets.size();i++){h_visible_facets.push_back(b.h_visible_facets[i]);}
  h_horizon_ridges.clear(); for(uint i=0;i<b.h_horizon_ridges.size();i++){h_horizon_ridges.push_back(b.h_horizon_ridges[i]);}
}

bool ConvexHull::initialize(ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(string alloy,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(alloy,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const vector<string>& velements,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(velements,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(velements,entries,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const vector<xvector<double> >& vcoords,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vcoords,*_p_FileMESSAGE,oss,has_stoich_coords,half_hull,add_artificial_unaries);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const vector<ChullPoint>& vpoints,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpoints,*_p_FileMESSAGE,oss,half_hull,add_artificial_unaries);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const vector<ChullPoint>& vpoints,const vector<string>& velements,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpoints,velements,*_p_FileMESSAGE,oss,half_hull,add_artificial_unaries);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  m_initialized=false;  //no points
  return m_initialized;
}

bool ConvexHull::initialize(string alloy,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  return createHull(alloy);
}

bool ConvexHull::initialize(const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  return createHull(velements);
}

bool ConvexHull::initialize(const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  return createHull(velements,entries);
}

bool ConvexHull::initialize(const vector<xvector<double> >& vcoords,ofstream& FileMESSAGE,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  return createHull(vcoords,has_stoich_coords,half_hull,add_artificial_unaries);
}

bool ConvexHull::initialize(const vector<ChullPoint>& vpoints,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  return createHull(vpoints,half_hull,add_artificial_unaries);
}

bool ConvexHull::initialize(const vector<ChullPoint>& vpoints,const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setDefaultCFlags();
  return createHull(vpoints,velements,half_hull,add_artificial_unaries);
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,string alloy,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,alloy,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<string>& velements,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,velements,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ostream& oss) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,velements,entries,*_p_FileMESSAGE,oss);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<xvector<double> >& vcoords,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,vcoords,*_p_FileMESSAGE,oss,has_stoich_coords,half_hull,add_artificial_unaries);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,vpoints,*_p_FileMESSAGE,oss,half_hull,add_artificial_unaries);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,const vector<string>& velements,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  ofstream* _p_FileMESSAGE=new ofstream();
  initialize(vpflow,vpoints,velements,*_p_FileMESSAGE,oss,half_hull,add_artificial_unaries);
  new_ofstream=true;  //override
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  m_initialized=false;  //no points
  return m_initialized;
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,string alloy,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  return createHull(alloy);
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  return createHull(velements);
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries,ofstream& FileMESSAGE,ostream& oss) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  return createHull(velements,entries);
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<xvector<double> >& vcoords,ofstream& FileMESSAGE,ostream& oss,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  return createHull(vcoords,has_stoich_coords,half_hull,add_artificial_unaries);
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  return createHull(vpoints,half_hull,add_artificial_unaries);
}

bool ConvexHull::initialize(const aurostd::xoption& vpflow,const vector<ChullPoint>& vpoints,const vector<string>& velements,ofstream& FileMESSAGE,ostream& oss,bool half_hull,bool add_artificial_unaries) {
  free();
  setOFStream(FileMESSAGE); new_ofstream=false;
  setOSS(oss);
  setCFlags(vpflow);
  return createHull(vpoints,velements,half_hull,add_artificial_unaries);
}

void ConvexHull::initializePoints(string alloy){
  loadPoints(alloy);
  structurePoints();
}

void ConvexHull::initializePoints(const vector<string>& velements){
  loadPoints(velements);
  structurePoints();
}

void ConvexHull::initializePoints(const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries){
  loadPoints(velements,entries);
  structurePoints();
}

void ConvexHull::initializePoints(const vector<xvector<double> >& vcoords,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries){
  loadPoints(vcoords,has_stoich_coords,half_hull,add_artificial_unaries);
  structurePoints();
}

void ConvexHull::initializePoints(const vector<ChullPoint>& vpoints,bool half_hull,bool add_artificial_unaries){
  loadPoints(vpoints,half_hull,add_artificial_unaries);
  structurePoints();
}

void ConvexHull::initializePoints(const vector<ChullPoint>& vpoints,const vector<string>& velements,bool half_hull,bool add_artificial_unaries){
  loadPoints(vpoints,velements,half_hull,add_artificial_unaries);
  structurePoints();
}

uint ConvexHull::getDim() const {return m_dim;}
uint ConvexHull::getEntriesCount() const {
  uint i_point,count=0;
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
      i_point=m_coord_groups[i_coord_group].m_points[i];
      if(!m_points[i_point].m_is_artificial){count++;}
    }
  }
  return count;
}

vector<uint> ConvexHull::getHullPoints(bool sort_stoich_ascending) const { //pure hull-members, not equivalent ones too
  vector<uint> hull_points;
  uint i_point;
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
      i_point=m_coord_groups[i_coord_group].m_points[i];
      if(m_points[i_point].m_is_on_hull){hull_points.push_back(i_point);}
    }
  }
  std::sort(hull_points.begin(),hull_points.end(),sortCHullPoints(m_points,sort_stoich_ascending,true));
  return hull_points;
}

uint ConvexHull::getUnaryGState(uint i_alloy) const {
  string soliloquy="ConvexHull::getUnaryGStates():";
  uint i_nary=0;
  if(i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within alloys");}
  uint g_state=AUROSTD_MAX_UINT;
  if(m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size()!=1){throw CHullLogicError(soliloquy,"Unexpected count of coordgroups for unaries, should only be 1");}
  uint i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[0];
  uint i_point;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
    i_point=m_coord_groups[i_coord_group].m_points[i];
    if(m_points[i_point].m_is_g_state){
      g_state=i_point;
      return g_state;
    }
  }
  return g_state;
}

bool ConvexHull::isViablePoint(uint i_point) const {return i_point<m_points.size();}
bool ConvexHull::isViableGState(uint g_state) const {return g_state<m_points.size() && m_points[g_state].m_has_entry;}

bool ConvexHull::findPoint(const string& auid,uint& i_point) const{
  for(uint i=0;i<m_points.size();i++){
    if(!m_points[i].m_has_entry){continue;}
    if(m_points[i].m_entry.auid==auid){i_point=i;return true;}
  }
  return false;
}

bool ConvexHull::findPoint(const xvector<double>& coords,uint& i_point) const{
  for(uint i=0;i<m_points.size();i++){if(aurostd::identical(m_points[i].m_coords,coords,ZERO_TOL)){i_point=i;return true;}}
  return false;
}

bool ConvexHull::getNariesIndex(uint i_point,uint& i_nary,uint& i_alloy,uint& i_coord_group,bool redo) const{
  string soliloquy="ConvexHull::getNariesIndex():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  return getNariesIndex(m_points[i_point],i_nary,i_alloy,i_coord_group,redo);
}

bool ConvexHull::getNariesIndex(const ChullPoint& point,uint& i_nary,uint& i_alloy,uint& i_coord_group,bool redo) const{
  string soliloquy="ConvexHull::getNariesIndex():";
  if(!point.m_has_stoich_coords){throw CHullLogicError(soliloquy,"Point does not have stoich coordinates");}
  return (getAlloyIndex(point,i_nary,i_alloy,redo) && getCoordGroupIndex(point,i_coord_group,redo));
}

bool ConvexHull::getCoordGroupIndex(uint i_point,uint& i_coord_group,bool redo) const {
  string soliloquy="ConvexHull::getCoordGroupIndex():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  return getCoordGroupIndex(m_points[i_point],i_coord_group,redo);
}

bool ConvexHull::getCoordGroupIndex(const ChullPoint& point,uint& i_coord_group,bool redo) const {
  string soliloquy="ConvexHull::getCoordGroupIndex():";
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized chullpoint");}
  if(!redo){
    i_coord_group=point.m_i_coord_group;
    if(i_coord_group<m_coord_groups.size()){return true;}
  }
  return getCoordGroupIndex(point.getTruncatedGenCoords(),i_coord_group);
}

bool ConvexHull::getCoordGroupIndex(const xvector<double>& r_coords,uint& i_coord_group) const {
  string soliloquy="ConvexHull::getCoordGroupIndex():";
  for(uint i=0;i<m_coord_groups.size();i++){
    if(!m_coord_groups[i].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
    if(identical(m_coord_groups[i].m_coords,r_coords,ZERO_TOL)){
      i_coord_group=i;
      return true;
    }
  }
  return false;
}

bool ConvexHull::getAlloyIndex(const ChullPoint& point,uint& i_nary,uint& i_alloy,bool redo) const {
  string soliloquy="ConvexHull::getAlloyIndex():";
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized chullpoint");}
  if(!point.m_has_stoich_coords){throw CHullLogicError(soliloquy,"Point does not have stoich coordinates");}
  if(!redo){
    i_nary=point.m_i_nary;
    i_alloy=point.m_i_alloy;
    if(i_nary<m_naries.size() && i_alloy<m_naries[i_nary].m_alloys.size()){return true;}
  }
  return getAlloyIndex(point.m_elements_present,i_nary,i_alloy);
}

bool ConvexHull::getAlloyIndex(const CoordGroup& cg,uint& i_nary,uint& i_alloy,bool redo) const {
  string soliloquy="ConvexHull::getAlloyIndex():";
  if(!cg.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  if(!cg.m_has_stoich_coords){throw CHullLogicError(soliloquy,"Coordgroup does not have stoich coordinates");}
  if(!cg.m_points.size()){throw CHullLogicError(soliloquy,"Coordgroup has no points");}
  if(!redo){
    i_nary=cg.m_i_nary;
    i_alloy=cg.m_i_alloy;
    if(i_nary<m_naries.size() && i_alloy<m_naries[i_nary].m_alloys.size()){return true;}
  }
  return getAlloyIndex(cg.getElementsPresent(),i_nary,i_alloy);
}

bool ConvexHull::getAlloyIndex(const xvector<int>& elements_present,uint& i_nary,uint& i_alloy) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getAlloyIndex():";
  i_nary=sum(elements_present)-1;
  if(i_nary>m_naries.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(LDEBUG){cerr << soliloquy << " elements_present=" << elements_present << endl;}
  for(uint i=0;i<m_naries[i_nary].m_alloys.size();i++){
    if(!m_naries[i_nary].m_alloys[i].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
    if(m_naries[i_nary].m_alloys[i].m_elements_present==elements_present){
      i_alloy=i;
      return true;
    }
  }
  return false;
}

uint ConvexHull::artificialMap(uint i_point) const{
  string soliloquy="ConvexHull::artificialMap():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_points");}
  if(!m_points[i_point].m_is_artificial){return i_point;}
  //we found an artificial point, but was it supposed to be here?
  if(!m_add_artificial_unaries){throw CHullLogicError(soliloquy,"Invalid artificial point, not sure how to handle mapping");}
  
  const ChullPoint& art_point=m_points[i_point];
  uint i_coord_group;
  if(!getCoordGroupIndex(art_point,i_coord_group)){throw CHullLogicError(soliloquy,"Coordgroup index not set");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  if(m_coord_groups[i_coord_group].m_points.size()==0){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] has no points");}

  uint i_point_new;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
    i_point_new=m_coord_groups[i_coord_group].m_points[i];
    if(!m_points[i_point_new].m_is_artificial){return i_point_new;}
  }

  //if we get here, there are no viable replacements, simply return artificial point
  if(m_coord_groups[i_coord_group].m_points.size()==1){if(m_coord_groups[i_coord_group].m_points[0]==i_point){return i_point;}}

  //really bad if we get here
  throw CHullLogicError(soliloquy,"Cannot determine artificial point mapping");
}

bool ConvexHull::write(char mode) const {
  bool written=false;
  try{
    if(mode==_apool_){writeAPool();written=true;}
    else if(mode==_json_){writeText(mode);written=true;}
    else if(mode==_pdf_){writePDF();written=true;}
    else if(mode==_txt_){writeText(mode);written=true;}
    else if(mode==_web_){writeWebApp();written=true;}
  }
  catch(CHullRuntimeError& re){pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);}
  catch(CHullLogicError& le){pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);}
  return written;
}

void ConvexHull::setDefaultCFlags() {pflow::defaultLoadEntriesFlags(m_cflags, *p_FileMESSAGE, *p_oss, std::string("A"), false, true);}
void ConvexHull::setCFlags(const aurostd::xoption& vpflow) {m_cflags=vpflow;}
void ConvexHull::setOFStream(ofstream& FileMESSAGE){p_FileMESSAGE=&FileMESSAGE;}
void ConvexHull::setOSS(ostream& oss) {p_oss=&oss;}

bool ConvexHull::createHull(string alloy) {
  try{
    initializePoints(alloy);
    checkStructurePoints(); //some nice checks that everything checks out
    calculate();
    m_initialized=true;
  }
  catch(CHullRuntimeError& re){
    pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  catch(CHullLogicError& le){
    pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  return m_initialized;
}

bool ConvexHull::createHull(const vector<string>& velements) {
  try{
    initializePoints(velements);
    checkStructurePoints(); //some nice checks that everything checks out
    calculate();
    m_initialized=true;
  }
  catch(CHullRuntimeError& re){
    pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  catch(CHullLogicError& le){
    pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  return m_initialized;
}

bool ConvexHull::createHull(const vector<string>& velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries) {
  try{
    initializePoints(velements,entries);
    checkStructurePoints(); //some nice checks that everything checks out
    calculate();
    m_initialized=true;
  }
  catch(CHullRuntimeError& re){
    pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  catch(CHullLogicError& le){
    pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  return m_initialized;
}

bool ConvexHull::createHull(const vector<xvector<double> >& vcoords,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) {
  try{
    initializePoints(vcoords,has_stoich_coords,half_hull,add_artificial_unaries);
    checkStructurePoints(); //some nice checks that everything checks out
    calculate();
    m_initialized=true;
  }
  catch(CHullRuntimeError& re){
    pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  catch(CHullLogicError& le){
    pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  return m_initialized;
}

bool ConvexHull::createHull(const vector<ChullPoint>& vpoints,bool half_hull,bool add_artificial_unaries) {
  try{
    initializePoints(vpoints,half_hull,add_artificial_unaries);
    checkStructurePoints(); //some nice checks that everything checks out
    calculate();
    m_initialized=true;
  }
  catch(CHullRuntimeError& re){
    pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  catch(CHullLogicError& le){
    pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  return m_initialized;
}

bool ConvexHull::createHull(const vector<ChullPoint>& vpoints,const vector<string>& velements,bool half_hull,bool add_artificial_unaries) {
  try{
    initializePoints(vpoints,velements,half_hull,add_artificial_unaries);
    checkStructurePoints(); //some nice checks that everything checks out
    calculate();
    m_initialized=true;
  }
  catch(CHullRuntimeError& re){
    pflow::logger(re.where(), re.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  catch(CHullLogicError& le){
    pflow::logger(le.where(), le.what(), *p_FileMESSAGE, *p_oss, _LOGGER_ERROR_);
    clear();
  }
  return m_initialized;
}

bool ConvexHull::entryValid(const aflowlib::_aflowlib_entry& entry) const {
  string reason;
  return entryValid(entry,reason);
}

bool ConvexHull::entryValid(const aflowlib::_aflowlib_entry& entry,string& reason) const {
  char LOGGER_TYPE=_LOGGER_OPTION_;
  return entryValid(entry,reason,LOGGER_TYPE);
}

bool ConvexHull::entryValid(const aflowlib::_aflowlib_entry& entry,string& reason,char& LOGGER_TYPE) const {
  string soliloquy="ConvexHull::entryValid():";
  reason="";
  LOGGER_TYPE=_LOGGER_OPTION_;
  //tests of stupidity
  if(entry.vspecies.size()!=entry.vcomposition.size()){
    //throw CHullRuntimeError(soliloquy,"Bad entry ("+entry.auid+") - vspecies.size!=vcomposition.size()"); //let's not break the code for one bad entry
    reason="Entry (auid="+entry.auid+") is ill-defined: vspecies.size()!=vcomposition.size()";
    reason+=" (please report on AFLOW Forum: aflow.org/forum)";
    LOGGER_TYPE=_LOGGER_WARNING_;
    return false;
  }
  bool found;
  for(uint j=0;j<entry.vspecies.size();j++){
    found=false;
    for(uint i=0;i<m_velements.size() && !found;i++){if(m_velements[i]==entry.vspecies[j]){found=true;}}
    if(!found){
      reason="Entry (auid="+entry.auid+") contains "+entry.vspecies[j]+" and does not belong to hull";
      reason+=" (please report on AFLOW Forum: aflow.org/forum)";
      LOGGER_TYPE=_LOGGER_WARNING_;
      return false;
    }
  }
  if(!entry.ldau_TLUJ.empty()){
    reason="calculated with +U parameters";
    return false;
  }
  if(entry.enthalpy_formation_atom==AUROSTD_NAN || entry.entropic_temperature==AUROSTD_NAN){
    reason="enthalpy_formation_atom/entropic_temperature not calculated";
    return false;
  }
  if(IGNORE_BAD_DATABASE && entry.ignoreBadDatabase(reason)){return false;}
  //otherwise return true
  return true;
}

void ConvexHull::addArtificialUnaries(uint dim){
  //points are really dim+1 dimensional (hidden dimension)
  //really, dim specifies within s_coords unless dim == s_coords.size()
  //then it's the last coord
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::addArtificialUnaries():";
  if(dim>m_dim-1){throw CHullLogicError(soliloquy,"Invalid dimension requested");}
  xvector<double> dummy(m_dim-1,0);
  if(dim!=m_dim-1){dummy[dim]=1;}
  m_points.push_back(ChullPoint(dummy,*p_FileMESSAGE,true,true,*p_oss));
  if(LDEBUG){cerr << soliloquy << " new artificial point=" << m_points.back().m_coords << endl;}
}

void ConvexHull::addArtificialUnaries(){for(uint i=0;i<m_dim;i++){addArtificialUnaries(i);}}

bool ConvexHull::entryUnique(const vector<uint>& unique_entries,const aflowlib::_aflowlib_entry& entry,string& canonical_auid) const {
  //points have already been created, determined to be unique
  //hack, go backwards, as the way entries are ordered, duplicates occur near each other
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  canonical_auid="";
  string soliloquy="ConvexHull::entryUnique():";
  for(uint i=unique_entries.size()-1;i<unique_entries.size();i--){
    const ChullPoint& point=m_points[unique_entries[i]];
    if(point.entryIdentical(entry)){
      if(LDEBUG){
        cerr << soliloquy << " entry[auid=" << point.m_entry.auid << ",compound=" << point.m_entry.compound << ",prototype=" << point.m_entry.prototype << "] == ";
        cerr << "entry[auid=" << entry.auid << ",compound=" << entry.compound << ",prototype=" << entry.prototype << "]" << endl;
      }
      canonical_auid=point.m_entry.auid;
      return false;
    }
  }
  return true;
}

void ConvexHull::loadPoints(string alloy) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::loadPoints():";
  if(LDEBUG){cerr << soliloquy << " initializing alloy, compound=" << alloy << endl;}
  vector<string> velements = pflow::makeAlphabeticVector(alloy, *p_FileMESSAGE, *p_oss);
  return loadPoints(velements);
}

void ConvexHull::loadPoints(const vector<string>& _velements) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::loadPoints():";
  
  vector<string> velements; 
  for(uint i=0;i<_velements.size();i++){velements.push_back(_velements[i]);}
  std::sort(velements.begin(),velements.end()); //safe
  
  if(LDEBUG){cerr << soliloquy << " initializing velements, velements=" << aurostd::joinWDelimiter(velements,",") << endl;}
  
  vector<vector<vector<aflowlib::_aflowlib_entry> > > entries;
  pflow::loadEntries(m_cflags,velements,entries,*p_FileMESSAGE,*p_oss);
  return loadPoints(velements,entries);
}

void ConvexHull::loadPoints(const vector<string>& _velements,const vector<vector<vector<aflowlib::_aflowlib_entry> > >& entries) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::loadPoints():";
  stringstream message;
  
  vector<string> velements;
  velements.clear(); for(uint i=0;i<_velements.size();i++){velements.push_back(_velements[i]);}
  std::sort(velements.begin(),velements.end()); //safe
  
  if(LDEBUG){cerr << soliloquy << " initializing velements WITH entries, velements=" << aurostd::joinWDelimiter(velements,",") << endl;}
  
  m_formation_energy_hull=!m_cflags.flag("CHULL::ENTROPIC_TEMPERATURE");    //energy vs. entropic_temperature hull
  m_lower_hull=m_formation_energy_hull; //energy/entropic_temperature lower/upper hull
  m_has_stoich_coords=true;
  m_half_hull=true;
  m_add_artificial_unaries=true;
  
  vector<ChullPoint> points;
  ChullPoint cp;
  
  for(uint i=0;i<entries.size();i++){
    for(uint j=0;j<entries[i].size();j++){
      for(uint k=0;k<entries[i][j].size();k++){
        cp.initialize(velements,entries[i][j][k],*p_FileMESSAGE,m_formation_energy_hull,*p_oss);
        points.push_back(cp);
      }
    }
  }
  if(!points.size()){throw CHullRuntimeError(soliloquy,"No entries loaded");}
  return loadPoints(points,velements,m_half_hull,m_add_artificial_unaries);
}

void ConvexHull::loadPoints(const vector<xvector<double> >& vcoords,bool has_stoich_coords,bool half_hull,bool add_artificial_unaries) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::loadPoints():";
  vector<ChullPoint> points;
  if(LDEBUG){cerr << soliloquy << " initializing vcoords (has_stoich_coords==" << has_stoich_coords << "), count=" << vcoords.size() << endl;}
  ChullPoint cp;
  for(uint i=0;i<vcoords.size();i++){
    cp.initialize(vcoords[i],has_stoich_coords);
    points.push_back(cp);
  }
  return loadPoints(points,half_hull,add_artificial_unaries);
}

void ConvexHull::loadPoints(const vector<ChullPoint>& vpoints,bool half_hull,bool add_artificial_unaries) {
  vector<string> velements;
  return loadPoints(vpoints,velements,half_hull,add_artificial_unaries);
}

void ConvexHull::loadPoints(const vector<ChullPoint>& vpoints,const vector<string>& velements,bool half_hull,bool add_artificial_unaries) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::loadPoints():";
  stringstream message;

  if(velements.size()){
    m_velements.clear(); for(uint i=0;i<velements.size();i++){m_velements.push_back(velements[i]);}
    std::sort(m_velements.begin(),m_velements.end()); //safe
  }
  
  if(LDEBUG){cerr << soliloquy << " initializing chullpoints, count=" << vpoints.size() << endl;}
  for(uint i=0;i<vpoints.size();i++){m_points.push_back(vpoints[i]);};
  if(!m_points.size()){throw CHullLogicError(soliloquy,"No points loaded, no way to determine dimensionality of hull");}
  
  //flag defaults
  m_formation_energy_hull=!m_cflags.flag("CHULL::ENTROPIC_TEMPERATURE");    //energy vs. entropic_temperature hull
  m_lower_hull=m_formation_energy_hull; //energy/entropic_temperature lower/upper hull
  m_half_hull=(m_half_hull || half_hull);
  m_add_artificial_unaries=(m_add_artificial_unaries || add_artificial_unaries);
  
  //detect for coord types mixture!
  m_has_stoich_coords=( m_points[0].m_has_stoich_coords || m_has_stoich_coords );
  m_dim=m_points[0].m_coords.rows;
  if(m_dim<2){throw CHullLogicError(soliloquy,"1D hulls are trivial");}
  //test of stupidity
  for(uint i=0;i<m_points.size();i++){
    if(!m_points[i].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
    if(m_points[i].getDim()!=m_dim){throw CHullLogicError(soliloquy,"Dimension mismatch among points");}
    if(m_points[i].m_has_stoich_coords!=m_has_stoich_coords){
      message << "Mismatch among coord types (stoich vs. non-stoich coords), assuming non-stoich coords";
      pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
      m_has_stoich_coords=false;
      break;
    }
  }
  
  if(m_half_hull && m_has_stoich_coords && m_add_artificial_unaries){m_thermo_hull=true;}
  if(LDEBUG){
    cerr << soliloquy << " thermo_hull=" << m_thermo_hull << endl;
    cerr << soliloquy << " half_hull=" << m_half_hull << endl;
    cerr << soliloquy << " lower_hull=" << m_lower_hull << endl;
    cerr << soliloquy << " has_stoich_coords=" << m_has_stoich_coords << endl;
    cerr << soliloquy << " add_artificial_unaries=" << m_add_artificial_unaries << endl;
  }

  //ensures proper construction of hull
  //duplicates DO NOT AFFECT performance/accuracy of algorithm
  //we ignore these points after hull construction anyway
  if(m_add_artificial_unaries){addArtificialUnaries();}
  
  //get s_coords
  if(m_has_stoich_coords){for(uint i=0;i<m_points.size();i++){m_points[i].setStoichCoords();}} //repetita iuvant

  //if(0){  //do NOT resort points, keep in same order as user input
  //  if(LDEBUG){cerr << soliloquy << " resorting all points (including artificial points) by coord/stoich (descending) and energy (ascending)" << endl;}
  //  std::sort(m_points.begin(),m_points.end());
  //}

  //DO NOT ADD/SUBTRACT/CHANGE-ORDER OF M_POINTS BEYOND THIS FUNCTION
}

vector<uint> ConvexHull::getOutliers() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  //it is very important that we do not define outliers using std/mean, as these are
  //very sensitive to outliers
  //instead, use median
  //see discussion here:  doi=10.1016/j.jesp.2013.03.013
  string soliloquy="ConvexHull::getOutliers():";
  vector<uint> outliers;
  
  bool force_outlier_test=false;  //override binary alloy statistics check
  bool keep_outliers=m_cflags.flag("CHULL::INCLUDE_OUTLIERS");
  bool show_warnings=true;
  bool iqr_method=true; //unfortunately, MAD is normal distribution dependent, NOT our case here
  
  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  
  //get vector of last coords (we want to find outliers in this dimension)
  vector<double> _energies;  //vector and not xvector because we need push_back()
  uint i_point;
  if(m_half_hull){  //we only care about points above/below hull
    if(m_lower_hull){
      for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
        if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
        for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
          i_point=m_coord_groups[i_coord_group].m_points[i];
          if(std::signbit(m_points[i_point].getLastCoord())){ //negative
            _energies.push_back(m_points[i_point].getLastCoord());
          }
        }
      }
    }else{
      for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
        if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
        for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
          i_point=m_coord_groups[i_coord_group].m_points[i];
          if(!std::signbit(m_points[i_point].getLastCoord())){ //positive
            _energies.push_back(m_points[i_point].getLastCoord());
          }
        }
      }
    }
  }else{
    for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
      if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
        i_point=m_coord_groups[i_coord_group].m_points[i];
        _energies.push_back(m_points[i_point].getLastCoord());
      }
    }
  }
  //nice solution here! but only works for odd counts
  //http://en.cppreference.com/w/cpp/algorithm/nth_element
  //so we sort full anyway to be completely robust, should be easy considering how we sorted before
  if(_energies.size()<4){outliers.clear();return outliers;} //ALWAYS not enough points to do statistics (need 3 quartiles)
  if(!force_outlier_test && _energies.size()<BINARY_ENTRIES_THRESHOLD){outliers.clear();return outliers;} //not enough points to do statistics (not at high-throughput)
  xvector<double> energies=aurostd::vector2xvector<double>(_energies);
  if(LDEBUG){cerr << "lastCoords(): " << energies << endl;}
  double q1,q2,q3;
  aurostd::getQuartiles(energies,q1,q2,q3);  //we sort in here

  double lower_anchor,upper_anchor,range,multiplier;
  if(iqr_method){  //classical iqr measure of outlier
    lower_anchor=q1;
    upper_anchor=q3;
    range=q3-q1;      //interquartile range, iqr
    //multiplier=3.25;  //default=1.5, but we need to be more conservative from trials
  }else{  //absolute deviation around the median (MAD)
    lower_anchor=q2;
    upper_anchor=q2;
    range=aurostd::getMAD(energies,q2); //better iqr IF normal distribution, otherwise we need to know type of distribution (quartiles)
    //multiplier=3.25;                    //doi=10.1080/14640749108400962; 3 (very conservative), 2.5 (moderately conservative), 2 (poorly conservative)
  }
  multiplier=DEFAULT_CHULL_OUTLIER_MULTIPLIER;

  if(LDEBUG){
    cerr << soliloquy << " lower_anchor=" << lower_anchor << ", median=" << q2 << ", upper_anchor=" << upper_anchor << ", range=" << range << endl;
  }

  double threshold;
  stringstream message;
  char LOGGER_TYPE=_LOGGER_OPTION_;
  if(show_warnings){LOGGER_TYPE=_LOGGER_WARNING_;}  //show warning if we do not remove!
  if(!(m_half_hull && !m_lower_hull)){  //look at lower range
    threshold=lower_anchor-(multiplier*range);
    for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
      if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
        i_point=m_coord_groups[i_coord_group].m_points[i];
        if(m_points[i_point].getLastCoord()<threshold){
          outliers.push_back(i_point);
          message << "Found (lower) outlier auid=" << m_points[i_point].m_entry.auid << 
            ", lastCoord()=" << m_points[i_point].getLastCoord() << 
            " (<threshold=" << threshold << ")"; 
          pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, LOGGER_TYPE);
        }
      }
    }
  }
  if(!(m_half_hull && m_lower_hull)){  //look at upper range
    threshold=upper_anchor+(multiplier*range);
    for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
      if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
        i_point=m_coord_groups[i_coord_group].m_points[i];
        if(m_points[i_point].getLastCoord()>threshold){
          outliers.push_back(i_point);
          message << "Found (upper) outlier auid=" << m_points[i_point].m_entry.auid << 
            ", lastCoord()=" << m_points[i_point].getLastCoord() << 
            " (>threshold=" << threshold << ")"; 
          pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, LOGGER_TYPE);
        }
      }
    }
  }
  if(keep_outliers){
    message << "NOT removing outliers";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_);
    outliers.clear();
  }
  ////remove outliers
  //std::sort(outliers.rbegin(),outliers.rend()); //descending
  //for(uint i=0;i<outliers.size();i++){
  //  message << "Removing outlier auid=" << m_points[outliers[i]].m_entry.auid;
  //  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_);
  //  m_points.erase(m_points.begin()+outliers[i]);
  //}
  if(LDEBUG){cerr << soliloquy << " done" << endl;}
  return outliers;
}

vector<uint> ConvexHull::findArtificialPoints(uint i_coord_group){
  string soliloquy="ConvexHull::findArtificialPoints():";
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  
  uint i_point;
  vector<uint> artificial_points;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
    i_point=m_coord_groups[i_coord_group].m_points[i];
    if(m_points[i_point].m_is_artificial){artificial_points.push_back(i_point);}
  }

  return artificial_points;
}

uint ConvexHull::findArtificialUnary(uint i_coord_group){
  string soliloquy="ConvexHull::findArtificialUnary():";
  if(!m_has_stoich_coords){throw CHullLogicError(soliloquy,"No unaries to be found (coordinates are not stoichiometric)");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  if(!m_coord_groups[i_coord_group].m_points.size()){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] is empty");}
  if(!m_points[m_coord_groups[i_coord_group].m_points[0]].isUnary()){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] is not unary");}

  vector<uint> artificial_points=findArtificialPoints(i_coord_group);
  if(artificial_points.size()==0){throw CHullLogicError(soliloquy,"Missing artificial points");}
  if(artificial_points.size()!=1){throw CHullLogicError(soliloquy,"Found too many artificial points: "+aurostd::utype2string(artificial_points.size()));}

  return artificial_points[0];
}

void ConvexHull::organizeHullPoints(uint i_coord_group) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::organizeHullPoints():";
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}

  if(LDEBUG){cerr << soliloquy << " finding min/max energy point(s) for coord_group[" << i_coord_group << "]" << endl;}

  m_coord_groups[i_coord_group].m_hull_points.clear();
  uint p_size=m_coord_groups[i_coord_group].m_points.size();
  if(p_size==0){throw CHullLogicError(soliloquy,"Coordgroup has no points");}
  
  //the sole purpose of an artificial point is to sit on the hull, ignore all others
  uint i_point;
  if(m_coord_groups[i_coord_group].m_has_artificial_unary){
    if(LDEBUG){cerr << soliloquy << " looking for artificial point in coord_group[" << i_coord_group << "]" << endl;}
    i_point=findArtificialUnary(i_coord_group);
    if(LDEBUG){
      cerr << soliloquy << " found artificial point in coord_group[" << i_coord_group << "]: ";
      cerr << "point[" << i_point << "]=" << m_points[i_point].m_coords << endl;
    }
    m_coord_groups[i_coord_group].m_hull_points.push_back(i_point);
    return;
  }
  
  if(m_half_hull){
    i_point=m_coord_groups[i_coord_group].m_points[0];        //lowest point for lower_hull, highest point for upper_hull
    if(m_lower_hull){
      if(std::signbit(m_points[i_point].getLastCoord())){
        m_coord_groups[i_coord_group].m_hull_points.push_back(i_point);
        if(LDEBUG){
          cerr << soliloquy << " lower half hull point found: ";
          cerr << "point[" << i_point << "]=" << m_points[i_point].m_coords << endl;
        }
      }
    }else{
      if(!std::signbit(m_points[i_point].getLastCoord())){
        m_coord_groups[i_coord_group].m_hull_points.push_back(i_point);
        if(LDEBUG){
          cerr << soliloquy << " upper half hull point found: ";
          cerr << "point[" << i_point << "]=" << m_points[i_point].m_coords << endl;
        }
      }
    }
    return; //below, we add other extreme in energy, which we don't care about for half hulls
  }
  
  i_point=m_coord_groups[i_coord_group].m_points[0];        //lowest energy point
  m_coord_groups[i_coord_group].m_hull_points.push_back(i_point);
  if(LDEBUG){
    cerr << soliloquy << " hull point found: ";
    cerr << "point[" << i_point << "]=" << m_points[i_point].m_coords << endl;
  }
  if(p_size>1){ //also grab other extreme
    i_point=m_coord_groups[i_coord_group].m_points[p_size-1];
    m_coord_groups[i_coord_group].m_hull_points.push_back(i_point);
    if(LDEBUG){
      cerr << soliloquy << " hull point found: ";
      cerr << "point[" << i_point << "]=" << m_points[i_point].m_coords << endl;
    }
  }
}

void ConvexHull::organizeHullPoints() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::organizeHullPoints():";
  if(!m_coord_groups.size()){throw CHullLogicError(soliloquy,"Points have not been structured correctly");}
  if(LDEBUG){
    cerr << soliloquy << " filtering points definitely NOT on the hull by energy" << endl;
    cerr << soliloquy << " only looking for min/max energy points in all coord_groups" << endl;
  }
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){organizeHullPoints(i_coord_group);}
}

void ConvexHull::initializeNaries() {
  //clear
  for(uint i_nary=0;i_nary<m_naries.size();i_nary++){
    for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
      m_naries[i_nary].m_alloys[i_alloy].clear();
    }
    m_naries[i_nary].clear();
  }
  m_naries.clear();

  //initialize with combinations of dim
  Nary nary;
  Alloy alloy;
  xvector<int> elements_present;
  aurostd::xcombos xc;
  for(uint i_nary=0;i_nary<m_dim;i_nary++){
    nary.initialize(i_nary+1);
    m_naries.push_back(nary);
    xc.reset(m_dim,i_nary+1);
    while(xc.increment()){
      elements_present=aurostd::vector2xvector<int>(xc.getCombo(),0);
      alloy.initialize(elements_present);
      m_naries[i_nary].m_alloys.push_back(alloy);
    }
  }
  //SORT NOW! do not sort later as we populate m_points with i_nary and i_alloy
  for(uint i_nary=0;i_nary<m_naries.size();i_nary++){
    std::sort(m_naries[i_nary].m_alloys.rbegin(),m_naries[i_nary].m_alloys.rend()); //descending order
  }
  std::sort(m_naries.begin(),m_naries.end());
}

void ConvexHull::structurePoints() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::structurePoints():";
  stringstream message;
  m_coord_groups.clear();
  m_naries.clear();

  if(LDEBUG){cerr << soliloquy << " starting" << endl;}

  //NOTE, m_points is UNTOUCHED (unsorted, fully populated) input, i.e., identical input of user
  //HOWEVER, m_coord_groups[].m_points only contain indices to points that we will consider for the hull calculation, i.e., does not contain
  //any points to be neglected (requested or otherwise)
  //if you want input of the user, use m_points
  //if you want points for the hull, go through m_coord_groups
  if(LDEBUG){cerr << soliloquy << " gathering points to neglect" << endl;}
  vector<uint> unique_entries;
  vector<string> points_neglect;
  if(m_cflags.flag("CHULL::NEGLECT")){aurostd::string2tokens(m_cflags.getattachedscheme("CHULL::NEGLECT"),points_neglect,",");}
  bool see_neglect=m_cflags.flag("CHULL::SEE_NEGLECT");
  bool remove_invalid=true;
  bool remove_duplicate_entries=true;        //we remove duplicate entries from the database, but in general, keep input of user constant
  bool remove_extreme=m_cflags.flag("CHULL::REMOVE_EXTREMA");
  double extrema_val;
  if(remove_extreme){
    extrema_val=aurostd::string2utype<double>(m_cflags.getattachedscheme("CHULL::REMOVE_EXTREMA"));
    if(m_formation_energy_hull){
      if(extrema_val>=ZERO_TOL){
        message << "Ignoring remove extreme points flag -- you provided a number >= 0. Hform convex hull sits below 0";
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
        remove_extreme=false;
      }
    }else{
      if(extrema_val<=-ZERO_TOL){
        message << "Ignoring remove extreme points flag -- you provided a number <= 0. Ts convex hull sits above 0";
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
        remove_extreme=false;
      }
    }
  }
  string invalid_reason,canonical_auid;
  char LOGGER_TYPE;
  bool silent;

  //organize into coordgroups
  if(LDEBUG){cerr << soliloquy << " organizing into coordgroups" << endl;}
  uint i_coord_group;
  CoordGroup cg;
  xvector<double> r_coords;
  for(uint i=0;i<m_points.size();i++){
    const ChullPoint& point=m_points[i];
    const aflowlib::_aflowlib_entry& entry=m_points[i].m_entry;
    if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
    //// start remove points
    if(remove_invalid && m_points[i].m_has_entry){
      if(!entryValid(entry,invalid_reason,LOGGER_TYPE)){
        if(!invalid_reason.empty()){
          silent=(!see_neglect && LOGGER_TYPE==_LOGGER_OPTION_);
          message << "Neglecting " << entry.auid << ": " << invalid_reason;
          pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, LOGGER_TYPE, silent);
        }
        continue;
      }
      if(remove_duplicate_entries && !entryUnique(unique_entries,entry,canonical_auid)){
        silent=(!see_neglect);
        message << "Neglecting " << entry.auid << ": duplicate database entry (see " << canonical_auid << ")";
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_, silent);
        continue;
      }
      unique_entries.push_back(i);
      if(aurostd::withinList(points_neglect,entry.auid)){
        message << "Neglecting " << entry.auid << ": as requested";
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_);
        continue;
      }
      if(remove_extreme){
        if(m_formation_energy_hull){
          if(chull::Hf_atom(entry, _m_) < extrema_val){
            message << "Neglecting " << entry.auid << ": flagged as extreme with Hform = " << chull::Hf_atom(entry, _m_) << " (meV/atom)";
            pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_);
            continue;
          }
        }else{
          if(chull::Ts(entry) > extrema_val){
            message << "Neglecting " << entry.auid << ": flagged as extreme with Ts = " << chull::Ts(entry) << " (K)";
            pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_);
            continue;
          }
        }
      }
    }
    //// end remove points
    //organize into m_naries
    r_coords=point.getTruncatedGenCoords();
    if(LDEBUG){cerr << soliloquy << " point[" << i << "]: m_coords=" << point.m_coords << ", r_coords=" << r_coords << ", compound= " << point.m_entry.compound << ", dim=" << point.m_i_nary+1 << endl;}
    if(!getCoordGroupIndex(r_coords,i_coord_group)){
      cg.initialize(r_coords,point.m_has_stoich_coords);
      m_coord_groups.push_back(cg);
      i_coord_group=m_coord_groups.size()-1;
    }
    m_coord_groups[i_coord_group].m_points.push_back(i);
    if(m_coord_groups[i_coord_group].m_has_stoich_coords && !point.m_has_stoich_coords){
      message << "Mismatch among coord types (stoich vs. non-stoich coords), assuming non-stoich coords";
      pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
      m_coord_groups[i_coord_group].m_has_stoich_coords=false;
    }
    if(point.isUnary()&&point.m_is_artificial){m_coord_groups[i_coord_group].m_has_artificial_unary=true;}
  }
  
  //remove outliers before sort (BY MATCHING COORDS)
  uint i_point;
  vector<uint> outliers=getOutliers();
  bool found_outlier;
  vector<uint> points_to_remove;
  uint valid_count=0;
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    points_to_remove.clear();
    for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
      i_point=m_coord_groups[i_coord_group].m_points[i];
      found_outlier=false;
      for(uint j=0;j<outliers.size()&&!found_outlier;j++){if(i_point==outliers[j]){found_outlier=true;}}
      if(found_outlier){points_to_remove.push_back(i);} //not i_point, so I can remove this index
      else{valid_count++;}
    }
    if(points_to_remove.size()){
      std::sort(points_to_remove.rbegin(),points_to_remove.rend()); //descending
      if(LDEBUG){cerr << soliloquy << " before outlier removal, count = " << m_coord_groups[i_coord_group].m_points.size() << endl;}
      for(uint i=0;i<points_to_remove.size();i++){
        i_point=m_coord_groups[i_coord_group].m_points[points_to_remove[i]];
        message << "Remove outlier ";
        if(m_points[i_point].m_has_entry){message << "auid=" << m_points[i_point].m_entry.auid;}
        else{message << "m_coords=" << m_points[i_point].m_coords;}
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_OPTION_);
        m_coord_groups[i_coord_group].m_points.erase(m_coord_groups[i_coord_group].m_points.begin()+points_to_remove[i]);
      }
      if(LDEBUG){cerr << soliloquy << " after outlier removal, count = " << m_coord_groups[i_coord_group].m_points.size() << endl;}
    }
  }
  if(LDEBUG){cerr << soliloquy << " found " << valid_count << " valid/relevant/unique points (may include artificial points in count)" << endl;}
  
  //remove empty m_coord_groups
  vector<uint> empty_coord_groups;
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    if(m_coord_groups[i_coord_group].m_points.size()==0){empty_coord_groups.push_back(i_coord_group);}
  }
  std::sort(empty_coord_groups.rbegin(),empty_coord_groups.rend()); //descending
  for(uint i=0;i<empty_coord_groups.size();i++){m_coord_groups.erase(m_coord_groups.begin()+empty_coord_groups[i]);}
  
  //sort
  m_sort_energy_ascending=!(m_half_hull==true && m_lower_hull==false); //upper half hull should sort DESCENDING (ground state first)
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    std::sort(m_coord_groups[i_coord_group].m_points.begin(),m_coord_groups[i_coord_group].m_points.end(),sortWithinCoordGroup(m_points,m_sort_energy_ascending));  //ascending order
  }
  std::sort(m_coord_groups.rbegin(),m_coord_groups.rend()); //descending order for alphabetic print out later
  
  //assign coord group indices to points, useful later
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    //set ref state
    if(m_coord_groups[i_coord_group].m_points.size()){
      m_coord_groups[i_coord_group].m_ref_state=artificialMap(m_coord_groups[i_coord_group].m_points[0]);
    }
    for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
      i_point=m_coord_groups[i_coord_group].m_points[i];
      m_points[i_point].m_i_coord_group=i_coord_group;
    }
  }
  if(LDEBUG){cerr << soliloquy << " done organizing into coordgroups" << endl;}
  
  organizeHullPoints();

  if(LDEBUG){
    cerr << soliloquy << " coord_groups structure:" << endl;
    for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
      cerr << soliloquy << " coord_group[" << i_coord_group << "] coords=" << m_coord_groups[i_coord_group].m_coords << endl;
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
        cerr << soliloquy << " point[" << i << "] compound=" << m_points[m_coord_groups[i_coord_group].m_points[i]].m_entry.compound << " ";
        cerr << "coords=" << m_points[m_coord_groups[i_coord_group].m_points[i]].m_coords << endl;
      }
    }
  }

  if(m_has_stoich_coords){
    if(LDEBUG){cerr << soliloquy << " stoich_coords found, also sorting into n-aries and alloys" << endl;}

    initializeNaries(); //create empty bins first, we can do this combinatorially

    uint i_nary,i_alloy;
    for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
      if(!m_coord_groups[i_coord_group].m_points.size()){continue;}
      //we already filled bins, if we cannot find alloy system, then it's a bust
      if(!getAlloyIndex(m_coord_groups[i_coord_group],i_nary,i_alloy,true)){throw CHullLogicError(soliloquy,"Cannot get alloys index");}  //redo as we never done before
      m_coord_groups[i_coord_group].m_i_nary=i_nary;
      m_coord_groups[i_coord_group].m_i_alloy=i_alloy;
      m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.push_back(i_coord_group);
      //set i_nary and i_alloy to points too
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
        i_point=m_coord_groups[i_coord_group].m_points[i];
        m_points[i_point].m_i_nary=i_nary;
        m_points[i_point].m_i_alloy=i_alloy;
      }
    }
  
    if(LDEBUG){
      for(uint i_nary=0;i_nary<m_naries.size();i_nary++){
        cerr << soliloquy << " " << i_nary+1 << "-nary:" << endl;
        for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
          cerr << soliloquy << " alloy[" << i_alloy << "]: elements_present=" << m_naries[i_nary].m_alloys[i_alloy].m_elements_present << endl;
          for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size();i++){
            i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[i];
            cerr << soliloquy << " coord_group[" << i_coord_group << "]=" << m_coord_groups[i_coord_group].m_coords << endl;
            for(uint j=0;j<m_coord_groups[i_coord_group].m_points.size();j++){
              cerr << soliloquy << " compound=";
              cerr << (m_points[m_coord_groups[i_coord_group].m_points[j]].m_is_artificial ? 
                  string("ARTIFICIAL") : 
                  m_points[m_coord_groups[i_coord_group].m_points[j]].m_entry.compound) << " ";
              cerr << "coords=" << m_points[m_coord_groups[i_coord_group].m_points[j]].m_coords << endl;
            }
          }
        }
      }
    }
  }
}

vector<string> ConvexHull::alloyToElements(const ChullPoint& point) const {return alloyToElements(point.m_i_nary,point.m_i_alloy);}
vector<string> ConvexHull::alloyToElements(uint i_nary,uint i_alloy) const {
  string soliloquy="ConvexHull::alloyToElements():";
  const xvector<int>& elements_present=getElementsPresent(i_nary,i_alloy);
  if((uint)elements_present.rows!=m_velements.size()){throw CHullLogicError(soliloquy,"Dimension mismatch between elements present and composition");}
  vector<string> vout;
  for(int i=elements_present.lrows;i<=elements_present.urows;i++){
    if(elements_present[i]==1){vout.push_back(m_velements[i]);}
  }
  return vout;
}

void ConvexHull::checkStructurePoints() {
  string soliloquy="ConvexHull::checkStructurePoints():";
  stringstream message;

  bool binary_statistics_check=true;

  if(m_has_stoich_coords){
    //UNARIES - START
    //tests of stupidity
    if(m_naries.size()!=m_dim){throw CHullLogicError(soliloquy,"Missing n-aries");} //these are populated by default if done correctly
    uint i_nary=0;
    if(m_naries[i_nary].m_alloys.size()!=m_dim){throw CHullLogicError(soliloquy,"Missing unary alloys");} //these are populated by default if done correctly

    //check for ground states (non-artificial points)
    bool found_real,found_artificial;
    uint i_coord_group,i_point,i_point_real;
    for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
      if(m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size()!=1){throw CHullLogicError(soliloquy,"Unexpected count of coordgroups for unaries, should only be 1");}
      found_real=found_artificial=false;
      i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[0];
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size()&&!(found_real&&found_artificial);i++){
        i_point=m_coord_groups[i_coord_group].m_points[i];
        if(m_points[i_point].m_is_artificial){found_artificial=true;}
        else{
          if(!found_real){i_point_real=i_point;}  //grab first i_point that's real
          found_real=true;
        }
      }
      if(m_add_artificial_unaries&&!found_artificial){
        message << "Missing artificial points for ";
        if(i_alloy<m_velements.size()){message << m_velements[i_alloy];}
        else{message << " unary " << i_alloy+1;}
        throw CHullLogicError(soliloquy,message.str()); message.str("");
      }
      if(found_real){
        if(m_thermo_hull){
          if(abs(m_points[i_point_real].getLastCoord())>=ENERGY_TOL){
            message << "Very skewed ground-state end point for ";
            if(i_alloy<m_velements.size()){message << m_velements[i_alloy];}
            else{message << "unary " << i_alloy+1;}
            message << " (auid=" << m_points[i_point_real].m_entry.auid << ")";
            message << ": abs(" << m_points[i_point_real].getLastCoord() << ")>=" << ENERGY_TOL << " [eV]";
            message << " (please report on AFLOW Forum: aflow.org/forum)";
            if(m_cflags.flag("FORCE")){pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);}
            else{throw CHullLogicError(soliloquy,message.str()); message.str("");}
          }
        }
      }else{
        message << "No ground state available for ";
        if(i_alloy<m_velements.size()){message << m_velements[i_alloy];}
        else{message << " unary " << i_alloy+1;}
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
      }
    }
    //UNARIES - STOP
    
    //BINARIES - START
    if(binary_statistics_check){
      i_nary=1;
      uint count;
      for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
        count=0;
        for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size();i++){
          i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[i];
          for(uint j=0;j<m_coord_groups[i_coord_group].m_points.size();j++){count++;}
        }
        if(count<BINARY_ENTRIES_THRESHOLD){
          string hull;
          //safe in case m_velements was not set
          if(m_velements.size()){hull=aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"");}
          else{hull=aurostd::utype2string(i_alloy+1);}
          message << "Binary hull " << hull << " is unreliable (entry_count=" << count << " < " << BINARY_ENTRIES_THRESHOLD << ")";
          if(m_cflags.flag("FORCE")||m_cflags.flag("CHULL::INCLUDE_UNRELIABLE_HULLS")){pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);}
          else{throw CHullRuntimeError(soliloquy,message.str()); message.str("");}
        }
      }
    }
    //BINARIES - STOP
  }
}

void ConvexHull::addPointToFacet(ChullFacet& facet,uint i_point) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::addPointToFacet():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  facet.addVertex(m_points[i_point],i_point);
  if(LDEBUG){
    cerr << soliloquy << " facet.m_vertices.size()=" << facet.m_vertices.size() << endl;
    for(uint i=0;i<facet.m_vertices.size();i++){
      cerr << facet.m_vertices[i].ch_index << "  h_coords=" << facet.m_vertices[i].ch_point.h_coords << endl;
    }
  }
}

void ConvexHull::initializeFacet(ChullFacet& facet,bool check_validity) {facet.initialize(h_reference,h_dim,check_validity);}

uint ConvexHull::getExtremePoint(uint dim) {
  vector<FacetPoint> points_to_avoid;
  return getExtremePoint(dim,points_to_avoid);
}

uint ConvexHull::getExtremePoint(uint dim,const vector<FacetPoint>& points_to_avoid) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getExtremePoint():";
  stringstream message;
  if(!h_points.size()){throw CHullLogicError(soliloquy,"No starting points provided");}
  uint i_point=AUROSTD_MAX_UINT;
  double extreme=-1.0;  //since it's the abs() we check below, -1 is FINE
  bool avoid;
  if(LDEBUG){
    cerr << soliloquy << " h_points:" << endl;
    for(uint i=0;i<h_points.size();i++){
      cerr << h_points[i] << "  h_coords=" << m_points[h_points[i]].h_coords << endl;
    }
    cerr << soliloquy << " points_to_avoid:" << endl;
    for(uint j=0;j<points_to_avoid.size();j++){
      cerr << points_to_avoid[j].ch_index << "  h_coords=" << m_points[points_to_avoid[j].ch_index].h_coords << endl;
    }
  }

  for(uint i=0;i<h_points.size();i++){
    if(dim>(uint)m_points[h_points[i]].h_coords.urows){throw CHullLogicError(soliloquy,"Invalid coordinate index");}
    avoid=false;
    for(uint j=0;j<points_to_avoid.size()&&!avoid;j++){if(h_points[i]==points_to_avoid[j].ch_index){avoid=true;}}
    if(avoid){continue;}
    if(abs(m_points[h_points[i]].h_coords[dim])>extreme){
      i_point=h_points[i];
      extreme=abs(m_points[h_points[i]].h_coords[dim]);
    }
  }
  if(i_point==AUROSTD_MAX_UINT){
    message << "No point found, points_to_avoid is too restrictive (points_to_avoid.size()==" << points_to_avoid.size() << ")";
    throw CHullLogicError(soliloquy,message.str()); message.str("");
  }
  if(LDEBUG){cerr << soliloquy << " i_point=" << i_point << endl;}
  return i_point;
}

void ConvexHull::setCentroid() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setCentroid():";
  vector<xvector<double> > points;
  for(uint i=0;i<h_points.size();i++){points.push_back(m_points[h_points[i]].h_coords);}
  h_centroid=h_reference=aurostd::getCentroid(points);  //fix h_reference later
  //if(1){
  //  //h_centroid[0]=0.5;h_centroid[1]=0.5;h_centroid[2]=-0.01;
  //  for(uint i=0;i<h_centroid.rows-1;i++){h_centroid[i]=0.5;}
  //  h_centroid[h_centroid.urows]=-0.01;
  //}
  if(LDEBUG){cerr << soliloquy << " centroid: " << h_centroid << endl;}
}

vector<FacetPoint> ConvexHull::getInitialExtremePoints() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getInitialExtremePoints():";
  ChullFacet facet;
  string error;
  //get first h_dim points from just the extremes, and plug into facet
  //BAD CASE: fewer than h_dim points, this is NOT hull-able
  if(h_points.size()<h_dim){throw CHullRuntimeError(soliloquy,"Not enough points to build an initial facet");}
  for(uint i=0;i<h_dim;i++){addPointToFacet(facet,getExtremePoint(i,facet.m_vertices));}
  if(!facet.isValid(error)){throw CHullRuntimeError(soliloquy,"An initial facet cannot be created per initial extreme points, invalid points input: "+error);}
  initializeFacet(facet,false); //already validated
  //now get furthest point from this facet, initialize outside set first
  FacetPoint f_point;
  for(uint i=0;i<h_points.size();i++){
    if(facet.isPointOnFacet(h_points[i])){continue;}
    f_point.initialize(m_points[h_points[i]],h_points[i]);
    facet.f_outside_set.push_back(f_point);
    if(LDEBUG){cerr << soliloquy << " adding to facet[" << 0 << "] outside set: " << h_points[i] << endl;}
  }
  if(facet.f_outside_set.size()){ //in special case where there are only 2 points in 2D, we simply return facet and not simplex
    facet.setFurthestPoint();
    facet.addVertex(facet.f_furthest_point); //already have a vector<uint> in m_points, simply append and return
  }
  if(LDEBUG){
    cerr << soliloquy << " building initial simplex with extreme points:" << endl;
    for(uint i=0;i<facet.m_vertices.size();i++){
      cerr << facet.m_vertices[i].ch_point.h_coords << endl;
    }
  }
  return facet.m_vertices;
}

void ConvexHull::setNeighbors() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setNeighbors():";
  
  //print ridges so far
  if(LDEBUG){
    vector<uint> indices;
    for(uint i=0;i<h_facets.size();i++){
      indices=h_facets[i].getCHIndices();
      cerr << soliloquy << " facet[" << i << "] has ridges: ";
      for(uint j=0;j<indices.size();j++){
        cerr << indices[j];
        if(j!=indices.size()-1){cerr << ",";}
      }
      cerr << endl;
    }
  }

  for(uint i_facet=0;i_facet<h_facets.size();i_facet++){h_facets[i_facet].f_neighbors.clear();}
  for(uint i=0;i<h_facets.size();i++){
    for(uint j=i+1;j<h_facets.size();j++){
      if(h_facets[i].shareRidge(h_facets[j])){
        h_facets[i].f_neighbors.push_back(j);
        h_facets[j].f_neighbors.push_back(i);
      }
    }
    //can only perform this check if we have more than one h_facet, otherwise NO neighbors
    if(h_facets.size()>1&&h_facets[i].f_neighbors.size()!=h_dim){throw CHullLogicError(soliloquy,"Neighbor count ("+aurostd::utype2string(h_facets[i].f_neighbors.size())+") and facet dimension ("+aurostd::utype2string(h_dim)+") mismatch");}
  }
  for(uint i=0;i<h_facets.size();i++){std::sort(h_facets[i].f_neighbors.begin(),h_facets[i].f_neighbors.end());}
  
  if(LDEBUG){
    for(uint i=0;i<h_facets.size();i++){
      cerr << soliloquy << " neighbors for facet[i_facet=" << i << ",coords=";
      for(uint j=0;j<h_facets[i].m_vertices.size();j++){cerr << h_facets[i].m_vertices[j].ch_point.h_coords << (j!=h_facets[i].m_vertices.size()-1?", ":"");}
      cerr << "]: " << endl;
      for(uint j=0;j<h_facets[i].f_neighbors.size();j++){
        cerr << h_facets[i].f_neighbors[j] << " ";
      }
      cerr << endl;
    }
  }
}

void ConvexHull::createInitializeSimplex() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::createInitializeSimplex():";
  //clear
  h_facets.clear();
  setCentroid();

  vector<FacetPoint> initial_extreme_points=getInitialExtremePoints();
  //fix h_reference now!
  //NOTE: originally we used the hull centroid to determine alignment of facet normals
  //however, this does not work in the case of 3D hulls with no 3D points (only 2D hull points)
  //instead, we align with the centroid of the initial_extreme_points, as this point SHOULD be guaranteed to be in the hull
  //the hull only gets bigger by accepting more points
  //so we set h_reference first to h_centroid, since we don't care about the alignment of the normal inside getInitialExtremePoints()
  //then we fix here and keep for all facets
  vector<xvector<double> > points;
  for(uint i=0;i<initial_extreme_points.size();i++){points.push_back(initial_extreme_points[i].ch_point.h_coords);}
  h_reference=aurostd::getCentroid(points);
  if(LDEBUG){cerr << soliloquy << " new h_reference=" << h_reference << endl;}

  //new first facet of endpoints
  
  if(initial_extreme_points.size()==h_dim+1){if(LDEBUG){cerr << soliloquy << " building initial simplex" << endl;}}
  else if(initial_extreme_points.size()==h_dim){if(LDEBUG){cerr << soliloquy << " not enough points to build a simplex, will settle for a facet instead" << endl;}}
  else{throw CHullRuntimeError(soliloquy,"Not enough points to construct initial simplex/facet");}

  //get dim combos of points
  string error;
  aurostd::xcombos xc(initial_extreme_points.size(),h_dim);
  vector<int> indices;
  while(xc.increment()){
    //remember, indices are NOT the indices themselves, but a place holder as to whether to include the number at the index
    //e.g., indices==1,1,0; therefore, include indices 0,1
    indices=xc.getCombo();
    if(LDEBUG){
      cerr << soliloquy << " indices=";
      for(uint i=0;i<indices.size();i++){cerr << indices[i] << (i!=indices.size()-1?",":"");}
      cerr << endl;
    }
    h_facets.push_back(ChullFacet());
    for(uint i=0;i<indices.size();i++){
      if(indices[i]==1){h_facets.back().addVertex(initial_extreme_points[i]);}
    }
    if(LDEBUG){
      cerr << soliloquy << " initial facet[" << h_facets.size() << "] new point[" << h_facets.back().m_vertices.size() << "] ";
      cerr << "coords=" << m_points[h_facets.back().m_vertices.back().ch_index].h_coords << endl;
    }
    if(!h_facets.back().isValid(error)){throw CHullRuntimeError(soliloquy,"An initial facet cannot be created, invalid points input: "+error);}
    initializeFacet(h_facets.back(),false); //already validated
  }
  if(initial_extreme_points.size()==h_dim+1){if(LDEBUG){cerr << soliloquy << " initial simplex built" << endl;}}
  else if(initial_extreme_points.size()==h_dim){if(LDEBUG){cerr << soliloquy << " initial (single) facet built" << endl;}}
  else{throw CHullRuntimeError(soliloquy,"Not enough points to construct initial simplex/facet");}

  //if net distance, then it must be outside hull
  bool associated;
  FacetPoint f_point;
  for(uint i=0;i<h_points.size();i++){
    associated=false;
    if(LDEBUG){cerr << soliloquy << " associating point[" << h_points[i] << "] to a facet's outside set" << endl;}
    f_point.initialize(m_points[h_points[i]],h_points[i]);
    for(uint i_facet=0;i_facet<h_facets.size() && !associated;i_facet++){
      if(h_facets[i_facet].isPointOnFacet(f_point)){associated=true;} //skip the obvious
      if(!associated && h_facets[i_facet].isPointOutside(f_point)){
        h_facets[i_facet].f_outside_set.push_back(f_point);
        associated=true;
        if(LDEBUG){cerr << soliloquy << " associating point[" << h_points[i] << "] with facet[" << i_facet << "].f_outside_set" << endl;}
      }
    }
    if(!associated){
      if(LDEBUG){cerr << soliloquy << " NOT associating point[" << h_points[i] << "] with any facet outside set" << endl;}
    }
  }
  //get furthest point
  for(uint i_facet=0;i_facet<h_facets.size();i_facet++){
    if(LDEBUG){cerr << soliloquy << " facet[" << i_facet << "] has " << h_facets[i_facet].f_outside_set.size() << " outside points" << endl;}
    h_facets[i_facet].setFurthestPoint();
  }
  setNeighbors();
}

void ConvexHull::setVisibleFacets(uint i_facet){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setVisibleFacets():";
  if(i_facet>h_facets.size()-1){throw CHullLogicError(soliloquy,"Invalid index with h_facets");}
  //clean
  for(uint i=0;i<h_facets.size();i++){h_facets[i].f_visited=false;}
  h_visible_facets.clear();

  //initialize
  h_visible_facets.push_back(i_facet);
  h_facets[i_facet].f_visited=true;

  uint i_visible,i_neigh;
  for(uint i=0;i<h_visible_facets.size();i++){
    i_visible=h_visible_facets[i];
    for(uint j=0;j<h_facets[i_visible].f_neighbors.size();j++){
      i_neigh=h_facets[i_visible].f_neighbors[j];
      if(h_facets[i_neigh].f_visited){continue;}
      h_facets[i_neigh].f_visited=true;
      if(h_facets[i_neigh].isPointOutside(h_facets[i_facet].f_furthest_point)){h_visible_facets.push_back(i_neigh);}
    }
  }
  
  if(LDEBUG){
    cerr << soliloquy << " visible facets for facet[" << i_facet << "]: ";
    for(uint i=0;i<h_visible_facets.size();i++){cerr << h_visible_facets[i] << " ";}
    cerr << endl;
  }
}

void ConvexHull::setHorizonRidges(){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setHorizonRidges():";
  if(!h_visible_facets.size()){return;}
  h_horizon_ridges.clear();
  bool match;
  for(uint i1=0;i1<h_visible_facets.size();i1++){
    for(uint j1=0;j1<h_facets[h_visible_facets[i1]].m_ridges.size();j1++){
      match=false;
      for(uint i2=0;i2<h_visible_facets.size()&&!match;i2++){
        if(i1==i2){continue;}
        for(uint j2=0;j2<h_facets[h_visible_facets[i2]].m_ridges.size()&&!match;j2++){
          if(h_facets[h_visible_facets[i1]].m_ridges[j1].getCHIndices()==h_facets[h_visible_facets[i2]].m_ridges[j2].getCHIndices()){
            match=true;
          }
        }
      }
      if(!match){h_horizon_ridges.push_back(h_facets[h_visible_facets[i1]].m_ridges[j1]);}
    }
  }
  
  if(LDEBUG){
    cerr << soliloquy << " horizon ridges: ";
    for(uint i=0;i<h_horizon_ridges.size();i++){
      for(uint j=0;j<h_horizon_ridges[i].m_vertices.size();j++){
        cerr << h_horizon_ridges[i].m_vertices[j].ch_index << (j==h_horizon_ridges[i].m_vertices.size()-1?"":" ");
      }
      cerr << (i==h_horizon_ridges.size()-1?"":", ");
    }
    cerr << endl;
  }
}

uint ConvexHull::createNewFacets(FacetPoint furthest_point){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::createNewFacets():";
  if(furthest_point.ch_index>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index with furthest_point");}
  uint old_facet_count=h_facets.size();
  string error; //dummy so we don't recreate every time
  for(uint i=0;i<h_horizon_ridges.size();i++){
    //check obvious
    if(h_horizon_ridges[i].isPointOnFacet(furthest_point)){
      if(LDEBUG){cerr << soliloquy << " skipping new facet: duplicate point" << endl;}
      continue;
    }
    h_horizon_ridges[i].addVertex(furthest_point);
    if(LDEBUG){cerr << soliloquy << " furthest point for new facet: " << furthest_point.ch_index << " " << m_points[furthest_point.ch_index].h_coords << endl;}
    if(!h_horizon_ridges[i].isValid(error)){  //corner case, happens when creating new facets on edges or corners of hull
      if(LDEBUG){cerr << soliloquy << " skipping new facet: " << error << endl;}
      continue;
    }
    initializeFacet(h_horizon_ridges[i],false); //already validated
    h_facets.push_back(h_horizon_ridges[i]);
    if(LDEBUG){
      cerr << soliloquy << " new facet: ";
      for(uint j=0;j<h_facets.back().m_vertices.size();j++){cerr << m_points[h_facets.back().m_vertices[j].ch_index].h_coords << " | ";}
      cerr << endl;
    }
  }
  if(LDEBUG){cerr << soliloquy << " " << h_facets.size()-old_facet_count << " new facets" << endl;}
  return h_facets.size()-old_facet_count;
  //do neighbors at the end!
}

void ConvexHull::updateOutsideSet(uint new_facet_count){  //they are at the end of the list
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::updateOutsideSet():";
  //we're deleting visible planes soon, so we need to reassess/reassign outside points
  uint i_visible;
  bool associated;
  for(uint i=0;i<h_visible_facets.size();i++){
    i_visible=h_visible_facets[i];
    for(uint j=0;j<h_facets[i_visible].f_outside_set.size();j++){
      FacetPoint& f_point=h_facets[i_visible].f_outside_set[j];
      associated=false;
      if(LDEBUG){cerr << soliloquy << " re-associating point[" << f_point.ch_index << "] with a new facet" << endl;}
      for(uint i_facet=h_facets.size()-new_facet_count;i_facet<h_facets.size()&&!associated;i_facet++){
        if(h_facets[i_facet].isPointOnFacet(f_point)){associated=true;} //skip the obvious
        if(!associated && h_facets[i_facet].isPointOutside(f_point)){
          h_facets[i_facet].f_outside_set.push_back(f_point);
          associated=true;
          if(LDEBUG){cerr << soliloquy << " associating point[" << f_point.ch_index << "] with facet[" << i_facet << "].f_outside_set" << endl;}
        }
      }
    }
  }
  for(uint i_facet=h_facets.size()-new_facet_count;i_facet<h_facets.size();i_facet++){
    if(LDEBUG){cerr << soliloquy << " NEW facet[" << i_facet << "] has " << h_facets[i_facet].f_outside_set.size() << " outside points" << endl;}
    h_facets[i_facet].setFurthestPoint();
  }
}

void ConvexHull::deleteVisibleFacets() {
  //sort in descending order because all indices above the point of deletion change
  std::sort(h_visible_facets.rbegin(), h_visible_facets.rend());  //descending  //, std::greater<uint>());
  for(uint i=0;i<h_visible_facets.size();i++){h_facets.erase(h_facets.begin()+h_visible_facets[i]);}
}

void ConvexHull::removeDuplicateHullPoints() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::removeDuplicateHullPoints():";
  std::sort(h_points.begin(),h_points.end());
  h_points.erase( std::unique( h_points.begin(), h_points.end() ), h_points.end() );  //first remove duplicate indices

  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  vector<uint> indices_2_remove;
  for(uint i=0;i<h_points.size();i++){
    for(uint j=i+1;j<h_points.size();j++){
      if(identical(m_points[h_points[i]].h_coords,m_points[h_points[j]].h_coords,ZERO_TOL)){
        indices_2_remove.push_back(j);
      }
    }
  }
  if(LDEBUG){
    cerr << soliloquy << " removing points: ";
    for(uint i=0;i<indices_2_remove.size();i++){cerr << indices_2_remove[i] << " ";}
    cerr << endl;
  }
  std::sort(indices_2_remove.rbegin(),indices_2_remove.rend()); //descending
  for(uint i=0;i<indices_2_remove.size();i++){h_points.erase(h_points.begin()+indices_2_remove[i]);}
  if(LDEBUG){cerr << soliloquy << " done" << endl;}
}

void ConvexHull::calculateFacets() {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  //only copy those possibly on the hull (does not include endpoints)
  string soliloquy="ConvexHull::calculateFacets():";
  
  h_facets.clear();
  removeDuplicateHullPoints();
  if(!h_points.size()){throw CHullLogicError(soliloquy,"No points found on hull");}
  h_dim=m_points[h_points[0]].h_coords.rows;

  for(uint i=1;i<h_points.size();i++){
    if((uint)m_points[h_points[i]].h_coords.rows!=h_dim){throw CHullLogicError(soliloquy,"Invalid initialization of hull coordinates");}
  }

  if(LDEBUG){
    for(uint i=0;i<h_points.size();i++){
      cerr << soliloquy << " m_coords=" << m_points[h_points[i]].m_coords << "; h_coords=" << m_points[h_points[i]].h_coords << endl; //<< "; relevant " << m_points[h_points[i]].isRelevantPoint(elements_present) << endl;
    }
  }

  //main loop START - see algorithm here: 10.1145/235815.235821
  createInitializeSimplex();

  uint new_facet_count;
  for(uint i_facet=0;i_facet<h_facets.size();i_facet++){
    if(!h_facets[i_facet].f_outside_set.size()){continue;}  //the only way we exit this loop is if we continue for ALL facets
    setVisibleFacets(i_facet);
    setHorizonRidges();
    new_facet_count=createNewFacets(h_facets[i_facet].f_furthest_point);
    if(new_facet_count){
      updateOutsideSet(new_facet_count);  //redistribute outside set among new facets (visible planes will go soon)
      for(uint i_facet=h_facets.size()-new_facet_count;i_facet<h_facets.size();i_facet++){h_facets[i_facet].setFurthestPoint();}  //get furthest points for new facets
      deleteVisibleFacets();  //delete visible facets
      setNeighbors();
    }
    i_facet=-1; //restart full loop!
  }
  //main loop END - see algorithm here: 10.1145/235815.235821

  //resort points in facets with knowledge of normal
  //if normal is pointed down, sort in descending order
  bool sort_stoich_ascending;
  for(uint i=0;i<h_facets.size();i++){
    sort_stoich_ascending=!h_facets[i].m_in_lower_hemisphere;
    std::sort(h_facets[i].m_vertices.begin(),h_facets[i].m_vertices.end(),
        sortThermoPoints(sort_stoich_ascending,m_sort_energy_ascending));
  }
  std::sort(h_facets.begin(),h_facets.end(),sortFacetsByPoints(m_points));  //auto sort
  
  if(LDEBUG){
    cerr << soliloquy << " hull points:" << endl;
    for(uint i_facet=0;i_facet<h_facets.size();i_facet++){
      cerr << soliloquy << " facet " << i_facet << ": ";
      for(uint i=0;i<h_facets[i_facet].m_vertices.size();i++){
        cerr << m_points[h_facets[i_facet].m_vertices[i].ch_index].h_coords << " - auid " << m_points[h_facets[i_facet].m_vertices[i].ch_index].m_entry.auid << " | ";
      }
      cerr << "normal " << h_facets[i_facet].m_normal << " | angles " << aurostd::getGeneralAngles(h_facets[i_facet].m_normal,ZERO_TOL) << endl;//<< " | x " << cos(h_facets[i_facet].m_angle) << " | y " << sin(h_facets[i_facet].m_angle)  << endl;
    }
  }
}

const xvector<int>& ConvexHull::getElementsPresent(uint i_nary,uint i_alloy) const {
  string soliloquy="ConvexHull::setElementsPresent():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  return m_naries[i_nary].m_alloys[i_alloy].m_elements_present;
}

void ConvexHull::setElementsPresent(uint i_nary,uint i_alloy){m_elements_present=getElementsPresent(i_nary,i_alloy);}

void ConvexHull::addRelevantUnaries(uint i_nary,uint i_alloy) {
  string soliloquy="ConvexHull::addRelevantUnaries():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  return addRelevantUnaries(m_naries[i_nary].m_alloys[i_alloy].m_elements_present);
}

void ConvexHull::addRelevantUnaries(xvector<int>& elements_present) {
  string soliloquy="ConvexHull::addRelevantUnaries():";
  uint i_nary=0;
  if((uint)elements_present.rows!=m_naries[i_nary].m_alloys.size()){throw CHullLogicError(soliloquy,"Unary alloy is missing from m_naries");}
  uint i_coord_group,i_point;
  for(uint i_alloy=0;i_alloy<(uint)elements_present.rows;i_alloy++){
    if(elements_present[i_alloy]==1){
      if(m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size()!=1){throw CHullLogicError(soliloquy,"Unexpected count of coordgroups for unaries, should only be 1");}
      i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[0];
      if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
      for(uint i=0;i<m_coord_groups[i_coord_group].m_hull_points.size();i++){
        i_point=m_coord_groups[i_coord_group].m_hull_points[i];
        addHullPoint(i_point,elements_present);
      }
    }
  }
}

void ConvexHull::addLowerDimensionHullMembers(uint i_nary_max){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::addLowerDimensionHullMembers():";
  if(i_nary_max>m_naries.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  //grab from m_naries[i_nary].m_alloys[i_alloy].m_facets
  //we already added unaries, so there will be duplicates, but we safely remove in calculateFacets()
  //don't worry about this yet
  uint i_point,i_facet;
  for(uint i_nary=1;i_nary<i_nary_max;i_nary++){
    if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
    for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
      if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
      for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_facets.size();i++){
        i_facet=m_naries[i_nary].m_alloys[i_alloy].m_facets[i];
        if(i_facet>m_facets.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_facets");}
        const ChullFacet& facet=m_facets[i_facet];
        for(uint j=0;j<facet.m_vertices.size();j++){
          i_point=facet.m_vertices[j].ch_index;
          addHullPoint(i_point,m_elements_present); //this is hull specific, and set with setElementsPresent()
        }
      }
    }
  }
  if(LDEBUG){cerr << soliloquy << " done" << endl;}
}

void ConvexHull::addHullPoint(uint i_point){
  string soliloquy="ConvexHull::addHullPoint():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  h_points.push_back(i_point);
  m_points[i_point].setHullCoords();
}

void ConvexHull::addHullPoint(uint i_point,xvector<int>& elements_present){
  string soliloquy="ConvexHull::addHullPoint():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  h_points.push_back(i_point);
  m_points[i_point].setHullCoords(elements_present);
}

void ConvexHull::prepareHullPoints(uint i_nary,uint i_alloy) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::prepareHullPoints():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  h_points.clear();
  addRelevantUnaries(i_nary,i_alloy);
  addLowerDimensionHullMembers(i_nary); //don't worry about adding unary duplicates, we remove them robustly in calculateFacets()
  uint i_coord_group,i_point;
  for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size();i++){
    i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[i];
    if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
    for(uint j=0;j<m_coord_groups[i_coord_group].m_hull_points.size();j++){
      i_point=m_coord_groups[i_coord_group].m_hull_points[j];
      addHullPoint(i_point,m_naries[i_nary].m_alloys[i_alloy].m_elements_present);
    }
  }
  if(LDEBUG){cerr << soliloquy << " done" << endl;}
}

void ConvexHull::prepareHullPoints() {
  string soliloquy="ConvexHull::prepareHullPoints():";
  h_points.clear();
  //we already checked extremes in last (energy) direction, just add these to the hull
  //don't include those points in between
  uint i_point;
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
    for(uint i=0;i<m_coord_groups[i_coord_group].m_hull_points.size();i++){
      i_point=m_coord_groups[i_coord_group].m_hull_points[i];
      addHullPoint(i_point);
    }
  }
}

uint ConvexHull::getNearestFacetVertically(const vector<uint>& i_facets,const ChullPoint& point) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getNearestFacetVertically():";
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(LDEBUG){cerr << soliloquy << " m_coords=" << point.m_coords << ", h_coords=" << point.h_coords << endl;}
  return getNearestFacetVertically(i_facets,point.h_coords);
}

uint ConvexHull::getNearestFacetVertically(const vector<uint>& i_facets,const xvector<double>& point) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  //determines nearness by vertical distance
  string soliloquy="ConvexHull::getNearestFacetVertically():";
  uint i_facet,i_facet_min;
  uint i_facet_artificial=-1; //really large uint
  double vdist,dist=AUROSTD_MAX_DOUBLE;
  for(uint i=0;i<i_facets.size();i++){
    i_facet=i_facets[i];
    if(i_facet>m_facets.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_facets");}
    const ChullFacet& facet=m_facets[i_facet];
    if(!facet.m_initialized){throw CHullLogicError(soliloquy,"Facet not initialized");}
    if(facet.m_is_vertical){continue;}
    if(facet.m_is_artificial){
      i_facet_artificial=i_facet;
      continue;
    }
    if(LDEBUG){cerr << soliloquy << " looking at facet[" << i_facet << "]" << endl;}
    vdist=abs(facet.verticalDistance(point,true));  //abs, //(repetita iuvant)
    if(vdist<dist){
      i_facet_min=i_facet;
      dist=vdist;
    }
  }
  //safety, return artificial facet if no other facets available
  if(dist==AUROSTD_MAX_DOUBLE){
    if(i_facet_artificial>m_facets.size()-1){throw CHullLogicError(soliloquy,"No nearest facet found");}
    return i_facet_artificial;
  }
  return i_facet_min;
}

const vector<uint>& ConvexHull::getRelevantFacets(uint i_nary,uint i_alloy) const {
  string soliloquy="ConvexHull::getRelevantFacets():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  
  if(i_nary==0){  //unaries are special case
    //try m_facets, otherwise start from top and go down
    if(m_i_facets.size()){return m_i_facets;}
    for(uint i_nary=m_naries.size()-1;i_nary<m_naries.size();i_nary--){
      for(uint i_alloy=m_naries[i_nary].m_alloys.size()-1;i_alloy<=m_naries[i_nary].m_alloys.size();i_alloy--){
        if(m_naries[i_nary].m_alloys[i_alloy].m_facets.size()){return m_naries[i_nary].m_alloys[i_alloy].m_facets;}
      }
    }
  }else{
    if(m_naries[i_nary].m_alloys[i_alloy].m_facets.size()){return m_naries[i_nary].m_alloys[i_alloy].m_facets;}
  }
  throw CHullLogicError(soliloquy,"Facets not calculated");
}

void ConvexHull::setHullMembers() {return setHullMembers(m_i_facets);}
void ConvexHull::setHullMembers(uint i_nary,uint i_alloy) {
  string soliloquy="ConvexHull::setHullMembers():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  const vector<uint>& i_facets=getRelevantFacets(i_nary,i_alloy);//m_naries[i_nary].m_alloys[i_alloy].m_facets;
  return setHullMembers(i_facets);
}

void ConvexHull::setHullMembers(const vector<uint>& i_facets) {
  string soliloquy="ConvexHull::setHullMembers():";
  if(!i_facets.size()){throw CHullLogicError(soliloquy,"Hull has yet to be calculated");}
  uint i_point,g_state,i_coord_group,i_facet;
  for(uint i=0;i<i_facets.size();i++){
    i_facet=i_facets[i];
    if(i_facet>m_facets.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_facets");}
    for(uint j=0;j<m_facets[i_facet].m_vertices.size();j++){
      i_point=m_facets[i_facet].m_vertices[j].ch_index;
      if(!getCoordGroupIndex(i_point,i_coord_group)){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
      //hull member == yes
      m_points[i_point].m_is_on_hull=true;
      m_coord_groups[i_coord_group].m_is_on_hull=true;
      if(m_thermo_hull){m_coord_groups[i_coord_group].m_hull_member=i_point;}  //very safe, only one hull-member per coordgroup
      //g-state == if not artificial point
      g_state=artificialMap(i_point);
      if(!m_points[g_state].m_is_artificial){m_points[g_state].m_is_g_state=true;}
    }
  }
}

void ConvexHull::setNearestFacet(uint i_nary,uint i_alloy,uint i_coord_group){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setNearestFacet():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(m_coord_groups[i_coord_group].m_is_on_hull){return;}
  if(m_coord_groups[i_coord_group].m_points.size()==0){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] has no points");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  
  uint i_point=m_coord_groups[i_coord_group].m_points[0];
  ChullPoint& point=m_points[i_point];
  //it's possible that h_coords has not been set (we only do it to points that make it to hull calc)
  //so set again (repetita iuvant)
  xvector<int>& elements_present=m_naries[i_nary].m_alloys[i_alloy].m_elements_present;
  point.setHullCoords(elements_present);
  const vector<uint>& i_facets=getRelevantFacets(i_nary,i_alloy);//m_naries[i_nary].m_alloys[i_alloy].m_facets;
  uint i_facet=getNearestFacetVertically(i_facets,point);
  m_coord_groups[i_coord_group].m_nearest_facet=i_facet;
  if(LDEBUG){
    cerr << soliloquy << " nearest_facet[i_nary=" << i_nary << ",i_alloy=" << i_alloy << ",i_coord_group=" << i_coord_group;
    cerr << "]=" << m_coord_groups[i_coord_group].m_nearest_facet << endl;
  }
}

double ConvexHull::getDistanceToHull(uint i_point) const{
  string soliloquy="ConvexHull::getDistanceToHull():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  return getDistanceToHull(m_points[i_point]);
}

double ConvexHull::getDistanceToHull(const ChullPoint& point) const{
  string soliloquy="ConvexHull::getDistanceToHull():";
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  const vector<uint>& i_facets=m_i_facets;
  if(m_has_stoich_coords){
    uint i_nary,i_alloy;
    if(!getAlloyIndex(point,i_nary,i_alloy)){throw CHullLogicError(soliloquy,"Cannot get alloys index");}
    const vector<uint>& i_facets=getRelevantFacets(i_nary,i_alloy);
    uint i_facet=getNearestFacetVertically(i_facets,point);
    return m_facets[i_facet].verticalDistance(point,false);
  }
  uint i_facet=getNearestFacetVertically(i_facets,point);
  return m_facets[i_facet].verticalDistance(point,false);
}

void ConvexHull::setDistancesToHull(uint i_nary,uint i_alloy,uint i_coord_group) {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setDistancesToHull():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(m_coord_groups[i_coord_group].m_nearest_facet>m_naries[i_nary].m_alloys[i_alloy].m_facets.size()-1){setNearestFacet(i_nary,i_alloy,i_coord_group);}
  if(m_coord_groups[i_coord_group].m_points.size()==0){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] has no points");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}

  uint i_point=m_coord_groups[i_coord_group].m_points[0];
  i_point=artificialMap(i_point); //don't need to set distance for artificial point, re-scale to this point
  ChullPoint& point=m_points[i_point];
  double dist_2_hull=0.0;
  bool check_dist_2_hull=false;
  if(!m_coord_groups[i_coord_group].m_is_on_hull){ //off-hull
    uint i_facet=m_coord_groups[i_coord_group].m_nearest_facet;
    dist_2_hull=m_facets[i_facet].verticalDistance(point,false);  //do this "expensive" calculation only once, others are simply z-scaled
    if(LDEBUG){
      cerr << soliloquy << " dist[coord=" << point.h_coords << "]=" << dist_2_hull << endl;
      if(check_dist_2_hull){
        cerr << soliloquy << " comparing fast dist calculation = "  << dist_2_hull;
        cerr << " vs. slow dist calculation =" << getDistanceToHull(point) << endl;
      }
    }
    if(m_half_hull){  //tests of stupidity
      //do not use signbit, add tol to zero
      if(m_lower_hull){
        if(dist_2_hull>=ZERO_TOL){throw CHullLogicError(soliloquy,"(lower half hull) found point BELOW hull (entry="+point.m_entry.auid+",dist2Hull="+aurostd::utype2string(dist_2_hull,4)+")");}
      }else{
        if(dist_2_hull<-ZERO_TOL){throw CHullLogicError(soliloquy,"(upper half hull) found point ABOVE hull (entry="+point.m_entry.auid+",dist2Hull="+aurostd::utype2string(dist_2_hull,4)+")");}
      }
    }
  }
  dist_2_hull=abs(dist_2_hull); //force positive, the value is what we care about now
  point.m_dist_2_hull=m_coord_groups[i_coord_group].m_nearest_distance=dist_2_hull;
  if(LDEBUG){cerr << soliloquy << " |dist|=" << point.m_dist_2_hull << endl;}
  uint j_point;
  for(uint j=0;j<m_coord_groups[i_coord_group].m_points.size();j++){
    j_point=m_coord_groups[i_coord_group].m_points[j];
    j_point=artificialMap(j_point); //don't need to set distance for artificial point, re-scale to this point
    m_points[j_point].m_dist_2_hull=point.m_dist_2_hull;
    if(i_point!=j_point){m_points[j_point].m_dist_2_hull+=abs(point.getLastCoord()-m_points[j_point].getLastCoord());}
    //it's possible that h_coords has not been set (we only do it to points that make it to hull calc)
    //so set again (repetita iuvant)
    if(LDEBUG){
      xvector<int>& elements_present=m_naries[i_nary].m_alloys[i_alloy].m_elements_present;
      m_points[j_point].setHullCoords(elements_present);
      cerr << soliloquy << " dist[coord=" << m_points[j_point].h_coords << "]=" << m_points[j_point].m_dist_2_hull << endl;
    }
  }
}

vector<uint> ConvexHull::extractDecompositionPhases(const ChullFacet& facet) const{
  string soliloquy="ConvexHull::extractDecompositionPhases():";
  uint i_point;
  vector<uint> decomp_phases;
  for(uint i=0;i<facet.m_vertices.size();i++){
    i_point=facet.m_vertices[i].ch_index;
    decomp_phases.push_back(i_point);
  }
  if(decomp_phases.size()==0){throw CHullLogicError(soliloquy,"No decomposition phases found");}
  std::sort(decomp_phases.begin(),
      decomp_phases.end(),
      sortCHullPoints(m_points,false,true)); //stoich sorting should be descending, energy sorting default okay here
  return decomp_phases;
}

vector<uint> ConvexHull::getDecompositionPhases(uint i_point) const{
  string soliloquy="ConvexHull::getDecompositionPhases():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  return getDecompositionPhases(m_points[i_point]);
}

vector<uint> ConvexHull::getDecompositionPhases(const ChullPoint& point) const{
  string soliloquy="ConvexHull::getDecompositionPhases():";
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(point.m_is_on_hull){throw CHullLogicError(soliloquy,"No decomposition coefficients for hull members");}
  const vector<uint>& i_facets=m_i_facets;  //default, most broad
  uint i_facet;
  if(m_has_stoich_coords){
    uint i_nary,i_alloy;
    if(!getAlloyIndex(point,i_nary,i_alloy)){throw CHullLogicError(soliloquy,"Cannot get alloys index");}
    const vector<uint>& i_facets=getRelevantFacets(i_nary,i_alloy);
    i_facet=getNearestFacetVertically(i_facets,point);
    return extractDecompositionPhases(m_facets[i_facet]);
  }
  i_facet=getNearestFacetVertically(i_facets,point);
  return extractDecompositionPhases(m_facets[i_facet]);
}

void ConvexHull::setDecompositionPhases(uint i_nary,uint i_alloy,uint i_coord_group){
  string soliloquy="ConvexHull::setDecompositionPhases():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(m_coord_groups[i_coord_group].m_is_on_hull){return;}
  if(m_coord_groups[i_coord_group].m_nearest_facet>m_naries[i_nary].m_alloys[i_alloy].m_facets.size()-1){setNearestFacet(i_nary,i_alloy,i_coord_group);}
  
  uint i_facet=m_coord_groups[i_coord_group].m_nearest_facet;
  ChullFacet& facet=m_facets[i_facet];
  m_coord_groups[i_coord_group].m_decomp_phases=extractDecompositionPhases(facet);
}

xvector<double> ConvexHull::getDecompositionCoefficients(uint i_point,bool reduce) const{
  string soliloquy="ConvexHull::getDecompositionCoefficients():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  return getDecompositionCoefficients(m_points[i_point],reduce);
}

xvector<double> ConvexHull::getDecompositionCoefficients(const ChullPoint& point,bool reduce) const{
  string soliloquy="ConvexHull::getDecompositionCoefficients():";
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(point.m_is_on_hull){throw CHullLogicError(soliloquy,"No decomposition coefficients for hull members");}
  if(m_has_stoich_coords){
    uint i_nary,i_alloy,i_coord_group;
    //could combine via getNariesIndex(), but keep separate for debugging purposes
    if(!getAlloyIndex(point,i_nary,i_alloy)){throw CHullLogicError(soliloquy,"Cannot get alloys index");}
    if(getCoordGroupIndex(point,i_coord_group)){
      if(m_coord_groups[i_coord_group].m_is_on_hull){throw CHullLogicError(soliloquy,"No decomposition coefficients for hull members");}
      if(m_coord_groups[i_coord_group].m_decomp_phases.size()){
        return getDecompositionCoefficients(point,m_coord_groups[i_coord_group].m_decomp_phases,reduce);
      }
    }
  }
  return getDecompositionCoefficients(point,getDecompositionPhases(point),reduce);
}

xvector<double> ConvexHull::getDecompositionCoefficients(uint i_point,const vector<uint>& decomp_phases,bool reduce) const{
  string soliloquy="ConvexHull::getDecompositionCoefficients():";
  if(i_point>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  return getDecompositionCoefficients(m_points[i_point],decomp_phases,reduce);
}

xvector<double> ConvexHull::getDecompositionCoefficients(const ChullPoint& point,const vector<uint>& decomp_phases,bool reduce) const{
  string soliloquy="ConvexHull::getDecompositionCoefficients():";
  //do m_coords_group first (REDUCED)
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(!decomp_phases.size()){throw CHullLogicError(soliloquy,"No decomposition phases found");}
  vector<xvector<double> > lhs,rhs;
  //lhs
  lhs.push_back(point.getTruncatedComp(m_elements_present)); //getTruncatedStoich(m_elements_present)); //s_coords);
  //rhs
  for(uint i=0;i<decomp_phases.size();i++){
    if(decomp_phases[i]>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
    if(!m_points[decomp_phases[i]].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
    rhs.push_back(m_points[decomp_phases[i]].getTruncatedComp(m_elements_present));
  }
  xvector<double> coef=balanceChemicalEquation(lhs,rhs,reduce,true,ZERO_TOL);
  aurostd::shiftlrows(coef,0);
  return coef;
}

void ConvexHull::setDecompositionCoefficients(uint i_nary,uint i_alloy,uint i_coord_group){
  string soliloquy="ConvexHull::setDecompositionCoefficients():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(m_coord_groups[i_coord_group].m_is_on_hull){return;}
  if(m_coord_groups[i_coord_group].m_decomp_phases.size()==0){setDecompositionPhases(i_nary,i_alloy,i_coord_group);}
  
  //we get different coefficients between stoich and composition
  //ALWAYS use composition (even POCC, simply won't reduce), and do NOT mix stoich + composition
  uint i_point=m_coord_groups[i_coord_group].m_points[0];
  vector<uint>& decomp_phases=m_coord_groups[i_coord_group].m_decomp_phases;
  m_coord_groups[i_coord_group].m_decomp_coefs=getDecompositionCoefficients(i_point,decomp_phases,true);

  //now do individual coefficients, NO REDUCE
  for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
    i_point=m_coord_groups[i_coord_group].m_points[i];
    m_points[i_point].m_decomp_coefs=getDecompositionCoefficients(i_point,decomp_phases,false);
  }
}

void ConvexHull::setOffHullProperties(uint i_nary,uint i_alloy){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setOffHullProperties():";
  stringstream message;
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  
  message << "Gathering decomposition reaction data";
  if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
  else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);

  uint i_coord_group;
  for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size();i++){
    i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[i];
    if(!m_coord_groups[i_coord_group].m_points.size()){continue;}
    if(!m_coord_groups[i_coord_group].m_initialized){continue;}
    if(m_coord_groups[i_coord_group].m_is_on_hull){continue;}
    if(LDEBUG){cerr << soliloquy << " looking at i_coord_group=" << i_coord_group << endl;}
    setNearestFacet(i_nary,i_alloy,i_coord_group);
    setDistancesToHull(i_nary,i_alloy,i_coord_group);
    setDecompositionPhases(i_nary,i_alloy,i_coord_group);
    setDecompositionCoefficients(i_nary,i_alloy,i_coord_group);
  }
}

vector<uint> ConvexHull::getAdjacentFacets(uint hull_member,bool ignore_vertical, bool ignore_artificial) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getAdjacentFacets():";
  if(hull_member>m_points.size()-1){throw CHullLogicError(soliloquy,"No hull member has been identified");}
  vector<uint> adjacent_i_facets;
  if(!m_points[hull_member].m_is_on_hull){return adjacent_i_facets;}
  
  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  
  uint i_nary=m_points[hull_member].m_i_nary;
  uint i_alloy=m_points[hull_member].m_i_alloy;
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  const vector<uint>& i_facets=getRelevantFacets(i_nary,i_alloy);//m_naries[i_nary].m_alloys[i_alloy].m_facets;
  uint i_facet;
  for(uint i=0;i<i_facets.size();i++){
    i_facet=i_facets[i];
    if(i_facet>m_facets.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_facets");}
    if(ignore_vertical && m_facets[i_facet].m_is_vertical){continue;}
    if(ignore_artificial && m_facets[i_facet].m_is_artificial){continue;}
    if(m_facets[i_facet].isPointOnFacet(hull_member)){adjacent_i_facets.push_back(i_facet);}
  }
  if(adjacent_i_facets.size()==0){throw CHullLogicError(soliloquy,"No adjacent facets found");}
  if(LDEBUG){cerr << soliloquy << " stop" << endl;}
  return adjacent_i_facets;
}

vector<vector<uint> > ConvexHull::getEquilibriumPhases(uint hull_member) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getEquilibriumPhases():";
  if(hull_member>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  const ChullPoint& point=m_points[hull_member];
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(!point.m_is_on_hull){throw CHullLogicError(soliloquy,"No equilibrium phases for non hull members");}
  vector<vector<uint> > equilibrium_phases;
  
  vector<uint> adjacent_i_facets=getAdjacentFacets(hull_member,true,true);
  //make full copy of relevant facets so we can sort accordingly, ignore vertical and artificial facets
  vector<ChullFacet> adjacent_facets;
  for(uint i=0;i<adjacent_i_facets.size();i++){adjacent_facets.push_back(m_facets[adjacent_i_facets[i]]);}
  
  //sort
  for(uint i_facet=0;i_facet<adjacent_facets.size();i_facet++){
    std::sort(adjacent_facets[i_facet].m_vertices.begin(),adjacent_facets[i_facet].m_vertices.end(),
        sortThermoPoints(false,true)); //stoich sorting should be descending, energy sorting default okay here
  }
  std::sort(adjacent_facets.begin(),adjacent_facets.end(),
      sortFacetsByPoints(m_points,false,false,false,false));  //not auto sort, sort everything descending

  uint i_point;
  for(uint i_facet=0;i_facet<adjacent_facets.size();i_facet++){
    if(LDEBUG){cerr << soliloquy << " found new relevant facet[" << i_facet << "] with points: ";}
    equilibrium_phases.push_back(vector<uint>(0));
    for(uint i=0;i<adjacent_facets[i_facet].m_vertices.size();i++){
      i_point=adjacent_facets[i_facet].m_vertices[i].ch_index;
      equilibrium_phases.back().push_back(i_point);
      if(LDEBUG){cerr << m_points[i_point].h_coords << " [" << i_point << "]" << (i!=adjacent_facets[i_facet].m_vertices.size()-1?", ":"");}
    }
    if(LDEBUG){cerr << endl;}
  }
  return equilibrium_phases;
}

void ConvexHull::setEquilibriumPhases(uint i_nary,uint i_alloy,uint i_coord_group){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setEquilibriumPhases():";
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_is_on_hull){return;}
  if(m_coord_groups[i_coord_group].m_points.size()==0){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] has no points");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  
  //get hull-member and check that it's correct
  uint hull_member=m_coord_groups[i_coord_group].m_hull_member;
  if(hull_member>m_points.size()-1){throw CHullLogicError(soliloquy,"No hull member has been identified");}
  if(!m_points[hull_member].m_is_on_hull){return;}
  if(m_points[hull_member].isUnary()){return;} //others are in equilibrium with it, must be context of mixture!

  if(LDEBUG){cerr << soliloquy << " looking at hull-member[" << hull_member << "]=" << m_points[hull_member].h_coords << endl;}

  m_coord_groups[i_coord_group].m_equilibrium_phases=getEquilibriumPhases(hull_member);
  
  if(LDEBUG){cerr << soliloquy << " stop" << endl;}
}

//strict === strictly differ
//if we don't know, because of AUROSTD_NAN's or NOSG's, we may still return false anyway to 
//continue on to more strict determination later
bool ConvexHull::energiesDiffer(uint i_point1,uint i_point2,bool strict) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::energiesDiffer():";
  if(i_point1>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  if(i_point2>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}

  if(i_point1==i_point2){return false;}
  if(!m_points[i_point1].m_has_entry){return strict;}  //if strict, then return that they do differ (true)
  if(!m_points[i_point2].m_has_entry){return strict;}  //if strict, then return that they do differ (true)
  
  const double& energy1=m_points[i_point1].getEnergy();
  const double& energy2=m_points[i_point2].getEnergy();
  if(LDEBUG){cerr << soliloquy << energy1 << " vs. " << energy2 << endl;}
  if(energy1>=AUROSTD_NAN || energy2>=AUROSTD_NAN){return strict;} //if strict, then return that they do differ (true)

  bool differs=aurostd::isdifferent(energy1,energy2,ENERGY_TOL);
  if(LDEBUG){cerr << soliloquy << " energies do " << (differs?"":"NOT ") << "differ" << endl;}
  return differs;
}

//strict === strictly differ
//if we don't know, because of AUROSTD_NAN's or NOSG's, we may still return false anyway to 
//continue on to more strict determination later
bool ConvexHull::spacegroupsDiffer(uint i_point1,uint i_point2,bool strict) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::spacegroupsDiffer():";
  if(i_point1>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  if(i_point2>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}

  if(i_point1==i_point2){return false;}
  if(!m_points[i_point1].m_has_entry){return strict;}  //if strict, then return that they do differ (true)
  if(!m_points[i_point2].m_has_entry){return strict;}  //if strict, then return that they do differ (true)

  const string& sg1=m_points[i_point1].getSG();
  const string& sg2=m_points[i_point2].getSG();
  if(LDEBUG){cerr << soliloquy << sg1 << " vs. " << sg2 << endl;}
  if(sg1==NOSG || sg2==NOSG){return strict;}  //if strict, then return that they do differ (true)

  bool differs=(sg1!=sg2);
  if(LDEBUG){cerr << soliloquy << " spacegroups do " << (differs?"":"NOT ") << "differ" << endl;}
  return differs;
}

bool ConvexHull::structuresEquivalent(uint i_point1,uint i_point2) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::structuresEquivalent():";
  if(i_point1>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  if(i_point2>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}

  if(i_point1==i_point2){return true;}
  //we will not be so stringent on throwing errors here, if we cannot find/load structure, simply return false
  if(!m_points[i_point1].m_has_entry){return false;}
  if(!m_points[i_point2].m_has_entry){return false;}

  xstructure a,b;
  if(!m_points[i_point1].getMostRelaxedXstructure(a)){return false;}
  if(!m_points[i_point2].getMostRelaxedXstructure(b)){return false;}
  //if(!m_points[i_point1].loadXstructures(true)){return false;}
  //if(!m_points[i_point2].loadXstructures(true)){return false;}
  
  //const xstructure& a=m_points[i_point1].m_entry.vstr[0];
  //const xstructure& b=m_points[i_point2].m_entry.vstr[0];
  if(LDEBUG){
    cerr << soliloquy << " loaded both structures" << endl;
    cerr << soliloquy << " structure 1" << endl;
    cerr << a;
    cerr << soliloquy << " structure 2" << endl;
    cerr << b;
  }
  bool are_equivalent=compare::aflowCompareStructure(a,b,true,false,true); //match species and use fast match, but not scale volume, two structures with different volumes (pressures) are different! //DX 1/23/18 - added fast_match = true
  if(LDEBUG){cerr << soliloquy << " structures are " << (are_equivalent?"":"NOT ") << "equivalent" << endl;}
  return are_equivalent;
}

vector<uint> ConvexHull::getEquivalentGStates(uint g_state) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getEquivalentGStates():";
  if(g_state>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  const ChullPoint& point=m_points[g_state];
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(!point.m_is_g_state){throw CHullLogicError(soliloquy,"No equivalent g-states for non ground state structures");}
  uint i_coord_group;
  if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  if(!m_coord_groups[i_coord_group].m_is_on_hull){throw CHullLogicError(soliloquy,"Coordgroup is not on the hull");}
  bool perform_structure_comparison=(1&&!(m_cflags.flag("CHULL::SKIP_STRUCTURE_COMPARISON")||(m_cflags.flag("CHULL::LATEX_DOC")&&m_cflags.flag("CHULL::IMAGE_ONLY"))));

  vector<uint> equivalent_g_states;
  
  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  uint i_point;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
    i_point=m_coord_groups[i_coord_group].m_points[i];
    if(g_state!=i_point){
      if(!m_points[i_point].m_has_entry){continue;}
      if(energiesDiffer(g_state,i_point,false)){continue;} //first filter by those with wildly different energies, not strict
      if(spacegroupsDiffer(g_state,i_point,false)){continue;} //first filter by those with wildly different spacegroups, not strict
      if(!perform_structure_comparison){continue;}
      if(!structuresEquivalent(g_state,i_point)){continue;}
    }
    equivalent_g_states.push_back(i_point);
  }
  if(LDEBUG){
    cerr << soliloquy << " g-state[" << g_state << "]=" << m_points[g_state].h_coords;
    cerr << " equivalent structures=";
    for(uint i=0;i<equivalent_g_states.size();i++){cerr << equivalent_g_states[i] << (i!=equivalent_g_states.size()-1?", ":"");}
    cerr << endl;
  }
  return equivalent_g_states;
}

void ConvexHull::setEquivalentGStates(uint i_nary,uint i_alloy,uint i_coord_group){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setEquivalentGStates():";
  m_coord_groups[i_coord_group].m_equivalent_g_states.clear();
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_is_on_hull){return;}
  if(m_coord_groups[i_coord_group].m_points.size()==0){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] has no points");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  
  //we need to do a structure comparison, so get artificial map (did already before)
  uint g_state=m_coord_groups[i_coord_group].m_ref_state;
  if(g_state>m_points.size()-1){return;}
  if(!m_points[g_state].m_has_entry){return;} //throw CHullLogicError(soliloquy,"No entry (structure) found");} //only point in coordgroup
  
  if(LDEBUG){cerr << soliloquy << " looking at g-state[" << g_state << "]=" << m_points[g_state].h_coords << endl;}
  m_coord_groups[i_coord_group].m_equivalent_g_states=getEquivalentGStates(g_state);
  uint i_point;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_equivalent_g_states.size();i++){
    i_point=m_coord_groups[i_coord_group].m_equivalent_g_states[i];
    m_points[i_point].m_is_equivalent_g_state=true; //g_state and equivalent_g_state should stay separate
  }
  if(LDEBUG){cerr << soliloquy << " stop" << endl;}
}

vector<uint> ConvexHull::getSymEquivalentGStates(uint g_state) const{
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getSymEquivalentGStates():";
  if(g_state>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  const ChullPoint& point=m_points[g_state];
  if(!point.m_initialized){throw CHullLogicError(soliloquy,"Uninitialized point");}
  if(!point.m_is_g_state){throw CHullLogicError(soliloquy,"No equivalent g-states for non ground state structures");}
  uint i_coord_group;
  if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}

  vector<uint> sym_equivalent_g_states;
  
  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  uint i_point;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
    i_point=m_coord_groups[i_coord_group].m_points[i];
    if(g_state!=i_point){if(spacegroupsDiffer(g_state,i_point,true)){continue;}}
    sym_equivalent_g_states.push_back(i_point);
  }
  if(LDEBUG){
    cerr << soliloquy << " g-state[" << g_state << "]=" << m_points[g_state].h_coords;
    cerr << " symmetrically equivalent structures=";
    for(uint i=0;i<sym_equivalent_g_states.size();i++){cerr << sym_equivalent_g_states[i] << (i!=sym_equivalent_g_states.size()-1?", ":"");}
    cerr << endl;
  }
  return sym_equivalent_g_states;
}

void ConvexHull::setSymEquivalentGStates(uint i_nary,uint i_alloy,uint i_coord_group){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setSymEquivalentGStates():";
  m_coord_groups[i_coord_group].m_sym_equivalent_g_states.clear();
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  if(i_coord_group>m_coord_groups.size()-1){throw CHullLogicError(soliloquy,"Invalid index within coordgroups");}
  if(!m_coord_groups[i_coord_group].m_is_on_hull){return;}
  if(m_coord_groups[i_coord_group].m_points.size()==0){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] has no points");}
  if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
  
  //we need to do a structure comparison, so get artificial map (did already before)
  uint g_state=m_coord_groups[i_coord_group].m_ref_state;
  if(g_state>m_points.size()-1){return;}
  if(!m_points[g_state].m_has_entry){return;} //throw CHullLogicError(soliloquy,"No entry (structure) found");} //only point in coordgroup
  
  if(LDEBUG){cerr << soliloquy << " looking at g-state[" << g_state << "]=" << m_points[g_state].h_coords << endl;}
  m_coord_groups[i_coord_group].m_sym_equivalent_g_states=getSymEquivalentGStates(g_state);
  uint i_point;
  for(uint i=0;i<m_coord_groups[i_coord_group].m_sym_equivalent_g_states.size();i++){
    i_point=m_coord_groups[i_coord_group].m_sym_equivalent_g_states[i];
    m_points[i_point].m_is_sym_equivalent_g_state=true; //g_state and sym_equivalent_g_state should stay separate
  }
  if(LDEBUG){cerr << soliloquy << " stop" << endl;}
}

void ConvexHull::setOnHullProperties(uint i_nary,uint i_alloy){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::setOnHullProperties():";
  stringstream message;
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  
  message << "Gathering equilibrium phases and determining equivalent ground states, please be patient";
  if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
  else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);

  uint i_coord_group;
  for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_coord_groups.size();i++){
    i_coord_group=m_naries[i_nary].m_alloys[i_alloy].m_coord_groups[i];
    if(!m_coord_groups[i_coord_group].m_points.size()){continue;}
    if(!m_coord_groups[i_coord_group].m_initialized){continue;}
    if(!m_coord_groups[i_coord_group].m_is_on_hull){continue;}
    if(LDEBUG){cerr << soliloquy << " looking at i_coord_group=" << i_coord_group << endl;}
    setDistancesToHull(i_nary,i_alloy,i_coord_group);
    //very important that you do not simply go through all facet points and find equilibrium points
    //this will overwrite binary information with ternary information
    //proceed safely with i_coord_group's
    setEquilibriumPhases(i_nary,i_alloy,i_coord_group);
    setSymEquivalentGStates(i_nary,i_alloy,i_coord_group);
    setEquivalentGStates(i_nary,i_alloy,i_coord_group);
  }
}

void ConvexHull::storeHullData(uint i_nary,uint i_alloy){
  string soliloquy="ConvexHull::storeHullData():";
  stringstream message;
  if(!h_facets.size()){throw CHullLogicError(soliloquy,"Hull has yet to be calculated");}
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}
  
  m_naries[i_nary].m_alloys[i_alloy].m_facets.clear();
  for(uint i=0;i<h_facets.size();i++){
    m_facets.push_back(h_facets[i]);
    m_naries[i_nary].m_alloys[i_alloy].m_facets.push_back(m_facets.size()-1);
  }
  setHullMembers(i_nary,i_alloy);
  message << "Hull properties stored";
  if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
  else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
}

void ConvexHull::storeHullData() {
  for(uint i=0;i<h_facets.size();i++){
    m_facets.push_back(h_facets[i]);
    m_i_facets.push_back(m_facets.size()-1);
  }
  setHullMembers();
}

void ConvexHull::thermodynamicPostprocessing(uint i_nary,uint i_alloy){
  string soliloquy="ConvexHull::storeHullData():";
  stringstream message;
  if(!h_facets.size()){throw CHullLogicError(soliloquy,"Hull has yet to be calculated");}
  if(i_nary>m_naries.size()-1 || i_alloy>m_naries[i_nary].m_alloys.size()-1){throw CHullLogicError(soliloquy,"Invalid index within m_naries");}
  if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary");}
  if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized alloy");}

  bool perform_postprocessing=!m_cflags.flag("CHULL::SKIP_THERMO_POSTPROCESSING");
  if(!perform_postprocessing){return;}
  if(!m_thermo_hull){
    message << "Cannot perform postprocessing, thermodynamic hull NOT detected";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
    return;
  }
  
  message << "Thermodynamic hull detected, gathering on/off hull properties";
  if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
  else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
  setOffHullProperties(i_nary,i_alloy);
  setOnHullProperties(i_nary,i_alloy);
  
  message << "Thermodynamic post-processing completed";
  if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
  else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
}

void ConvexHull::calculate(){
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  stringstream message;
  string soliloquy="ConvexHull::calculate():";

  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized coordgroup");}
    for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
      m_points[m_coord_groups[i_coord_group].m_points[i]].m_is_on_hull=false; //completely refresh
    }
    m_coord_groups[i_coord_group].m_is_on_hull=false; //completely refresh
  }

  if(LDEBUG){cerr << soliloquy << " starting" << endl;}
  //we first run through alloy hulls IF stoich_coords, grabbing hull_members
  if(m_has_stoich_coords){
    message << "Stoichiometric coordinates detected, calculating the hull(s) in increasing dimensionality";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
    if(!m_naries.size()){throw CHullLogicError(soliloquy,"Points have yet to be structured");}
    for(uint i_nary=1;i_nary<m_naries.size();i_nary++){ //start at binaries
      for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
        message << "Calculating " << i_nary+1 << "-nary hull";
        if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
        else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
        cleanHull();
        setElementsPresent(i_nary,i_alloy); //m_stoich_coords only
        prepareHullPoints(i_nary,i_alloy);  //will have unary duplicates, but don't worry, we remove in calculateFacets()
        calculateFacets();
        message << i_nary+1 << "-nary hull calculated";
        if(m_velements.size()){message << " (" << aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"") << ")";}
        else{message << " (" << i_nary+1 << "-nary,alloy=" << i_alloy+1 << ")";}
        pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
        storeHullData(i_nary,i_alloy);
        if(m_thermo_hull){thermodynamicPostprocessing(i_nary,i_alloy);}
      }
    }
    //set unary properties last
    //sort of a hack, but actually an intelligent solution
    //unary hull-members will be identified in higher dimensions
    //therefore, we simply need to calculate their properties
    if(m_thermo_hull){  //very safe, not sure how these algorithms perform outside of this domain, already know we have m_has_stoich_coords
      for(uint i_alloy=0;i_alloy<m_naries[0].m_alloys.size();i_alloy++){thermodynamicPostprocessing(0,i_alloy);} //knows to skip facet storage //setOnHullProperties(0,i_alloy);}
    }
  }else{
    message << "Entering default convex hull calculation (full-dimensional)";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
    cleanHull();
    prepareHullPoints();
    calculateFacets();
    message << "Hull calculated";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);
  }
  storeHullData();  //that way, the largest dim facets get stored in m_facets!

  //resort within coord_groups to expose hull-members!
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    std::sort(m_coord_groups[i_coord_group].m_points.begin(),m_coord_groups[i_coord_group].m_points.end(),sortWithinCoordGroup(m_points,m_sort_energy_ascending));  //ascending order
  }
  if(LDEBUG){cerr << soliloquy << " done" << endl;}
}

void ConvexHull::cleanHull() {
  h_dim=0;
  m_elements_present.clear();
  h_points.clear();
  h_centroid.clear();
  h_reference.clear();
  h_facets.clear();
  h_visible_facets.clear();
  h_horizon_ridges.clear();
}

string ConvexHull::prettyPrintCompound(const ChullPoint& point,bool reduce,bool exclude1,char mode) const {  // overload
  if(!point.m_has_entry){
    string soliloquy="ConvexHull::prettyPrintCompound():";
    throw CHullLogicError(soliloquy,"No entry found");
  }
  return prettyPrintCompound(point.m_entry,reduce,exclude1,mode);
}

string ConvexHull::prettyPrintCompound(const aflowlib::_aflowlib_entry& entry,bool reduce,bool exclude1,char mode) const {  // overload
  if(entry.vspecies.size()!=entry.vcomposition.size()) {
    string soliloquy="ConvexHull::prettyPrintCompound():";
    stringstream message;
    message << "Entry (auid=" << entry.auid << ") is ill-defined: vspecies.size()!=vcomposition.size()";
    message << " (please report on AFLOW Forum: aflow.org/forum)";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
    return entry.compound;
  }
  return prettyPrintCompound(entry.vspecies,entry.vcomposition,reduce,exclude1,mode);
}

string ConvexHull::prettyPrintCompound(const vector<string>& vspecies,const vector<double>& vcomposition,bool reduce,bool exclude1,char mode) const {  // overload
  return prettyPrintCompound(vspecies,aurostd::vector2xvector<double>(vcomposition,0),reduce,exclude1,mode);
}

string ConvexHull::prettyPrintCompound(const vector<string>& vspecies,const xvector<double>& vcomposition,bool reduce,bool exclude1,char mode) const {  // main function
  // creates compound_label for LaTeX and text docs, like adding $_{}$
  // 2-D, we usually want reduce true for convex points, and off elsewhere
  string soliloquy = "chull::prettyPrintCompound():";
  uint precision=COEF_PRECISION;
  stringstream output;output.precision(precision);
  if(vspecies.size()!=(uint)vcomposition.rows) {throw CHullLogicError(soliloquy,"vspecies.size() != vcomposition.rows");}
  // special case, unary
  if(vspecies.size() == 1) {
    output << vspecies[0];
    if(!exclude1) {output << (reduce?1:vcomposition[0]);}
    return output.str();
  }
  xvector<double> comp=vcomposition;
  if(reduce){comp=aurostd::reduceByGCD(comp,ZERO_TOL);}
  if(abs(aurostd::sum(comp))<ZERO_TOL){throw CHullLogicError(soliloquy,"Empty composition");}
  for (uint i = 0; i < vspecies.size(); i++) {
    output << vspecies[i];
    if(!(exclude1 && aurostd::identical(comp[i],1.0,ZERO_TOL))) {
      if(mode==_latex_) {output << "$_{";
      }else if(mode==_gnuplot_){output<< "_{";}
      output << comp[i];
      if(mode==_latex_) {output << "}$";}
      else if(mode==_gnuplot_){output<< "}";}
    }
  }
  return output.str();
}

string ConvexHull::prettyPrintPrototype(const ChullPoint& point, bool double_back_slash) const {  // overload
  if(!point.m_has_entry){
    string soliloquy="ConvexHull::prettyPrintPrototype():";
    throw CHullLogicError(soliloquy,"No entry found");
  }
  return prettyPrintPrototype(point.m_entry,double_back_slash);
}

string ConvexHull::prettyPrintPrototype(const aflowlib::_aflowlib_entry& entry, bool double_back_slash) const {  // main function
// creates prototype_label for LaTeX ONLY, no use for this function otherwise
// escapes funny characters
  if(entry.prototype.empty()) {
    string soliloquy = "chull::prettyPrintPrototype():";
    stringstream message;
    message << "Entry (auid=" << entry.auid << ") is ill-defined: empty prototype";
    message << " (please report on AFLOW Forum: aflow.org/forum)";
    pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_WARNING_);
    return entry.prototype;
  }
  bool fix_icsd_labels=true;
  string proto=entry.prototype;
  if(fix_icsd_labels&&aurostd::substring2bool(proto,"ICSD_")){
    vector<string> tokens;
    string string_to_fix;
    aurostd::string2tokens(proto,tokens,"_");
    if(tokens.size()==2){string_to_fix=tokens[1];} //aurostd::substring2bool(proto,"ICSD_")
    else if(tokens.size()==3&&aurostd::substring2bool(proto,"_ICSD_")){string_to_fix=tokens[2];}
    if(!string_to_fix.empty()){
      return "ICSD~\\#"+fixStringLatex(string_to_fix,double_back_slash,false);
    }
    //else, just leave alone
  }
  return fixStringLatex(proto,double_back_slash,false);
}

string ConvexHull::fixStringLatex(const string& input, bool double_back_slash,bool symmetry_string) const {
  // deals with special characters for LaTeX, like some characters in prototype
  // see http://tex.stackexchange.com/questions/34580/escape-character-in-latex
  // double_back_slash was needed SOMETIMES for gnuplot output, as one backslash
  // went away when writing to file, and  -- OBSOLETE NOW
  string soliloquy = "chull::fixStringLatex():";
  string output;
  vector<char> problem_characters;
  problem_characters.push_back('&');
  problem_characters.push_back('%');
  problem_characters.push_back('$');
  problem_characters.push_back('#');
  if(!symmetry_string) {
    problem_characters.push_back('_');
    problem_characters.push_back('{');
    problem_characters.push_back('}');
  }
  problem_characters.push_back('~');  // different fix
  problem_characters.push_back('^');  // different fix
  string solution_string;
  solution_string = "\\\\";  // has to be string, \\ char does not work
  bool found_escaped_char;
  bool found_hyphen_symmetry = false;
  bool solved_hyphen_symmetry = false;
  for (uint i = 0; i < input.length(); i++) {
    // we first enter this loop because symmetry_string and input[i]=='-'
    // second enter loop because symmetry_string and found_hyphen_symmetry
    if(symmetry_string && (input[i] == '-' || found_hyphen_symmetry)) {
      if(!found_hyphen_symmetry) {
        // first enter loop, come here
        found_hyphen_symmetry = true;
        output.append("\\overline{");
        // very important, we don't want to add hyphen, just replace
        // with overline, so continue
        continue;
      } else {
        // second enter loop, do nothing but turn this flag on
        // allow us to add input[i]
        found_hyphen_symmetry = false;
        solved_hyphen_symmetry = true;
      }
    } else {
      if(symmetry_string && solved_hyphen_symmetry) {
        // last step of symmetry_string fix, but we have to do this in part of
        // the loop to allow for next character to be identified as problem
        // character as well
        output.append(1, '}');
        solved_hyphen_symmetry = false;
      }
      // go through all problem characters
      for (uint j = 0; j < problem_characters.size(); j++) {
        if(input[i] == problem_characters[j]) {
          if(double_back_slash) {
            // if we find one, but it has double backslash, leave alone
            // doesn't matter what it is, if it has double backslash it's good
            // if we find one, but it only has single backslash, add one
            if(i && i - 1 && input.at(i - 1) == '\\' && input.at(i - 2) == '\\') {break;}
            else if(i && input.at(i - 1) == '\\') {
              output.append(1, '\\');  // just add one
              break;
            }
            // if we find one, give two backslashes
            output.append("\\\\");
            break;
          } else {
            // if we find one, but it has single backslash, leave alone
            // doesn't matter what it is, if it has single backslash it's good
            // if we find one, give single backslash
            if(i && input.at(i - 1) == '\\') {break;}  
            output.append(1, '\\');
            break;
          }
        }
      }
      // we also have to add {} for these characters
      if(input[i] == '~' || input[i] == '^') {output.append("{}");}
      found_escaped_char = false;
      if(input[i] == '\\') {
        for (uint j = 0; j < problem_characters.size(); j++) {
          // the only way this works if it's serving as an escape for a character
          // don't worry about double backslash here, we get to that when we find
          // the actual character
          if(i != (input.length() - 1) && input[i+1] == problem_characters[j]) {
            found_escaped_char = true;
            break;  // doesn't matter what it is, if it has backslash it's good
          }
        }
        // this is a problem, no way around it--we cannot output single backslash
        if(!found_escaped_char) {
          stringstream message;
          message << "Extraneous backslash found in \"" << input << "\" which may cause problems for LaTeX/gnuplot";
          pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_WARNING_);
          return input;
        }
      }
    }
    // add in character from input
    output.append(1, input[i]);
  }
  return output;
}

string ConvexHull::addHeaderStringLaTeX(char function_mode,bool display_color_gradient) const {
  // produces addplot latex string
  string soliloquy = "ConvexHull::addHeaderStringLaTeX():";
  stringstream message;
  stringstream addplot_output_ss;addplot_output_ss.str("");
  
  uint dimension=getDim();
  bool reverse_axes=DEFAULT_CHULL_LATEX_REVERSE_AXIS;

  // http://tex.stackexchange.com/questions/59070/pgfplots-remove-darker-borders-on-marks
  // this string WILL cause warnings when compiling, but it's correct, no way to
  // fix it with our current compiler
  stringstream tmp_dark_border_points_command;
  tmp_dark_border_points_command << "scatter/use mapped color={draw=black,fill=mapped color,solid}";

  string dark_border_points_command = tmp_dark_border_points_command.str();

  // first do a check that the function_mode is not out of scope
  if(dimension == 2) {
    if(function_mode != ADDPLOT_MODE_HULL_POINTS &&
        function_mode != ADDPLOT_MODE_OFF_HULL_POINTS &&
        function_mode != ADDPLOT_MODE_HULL_FACETS) {
      throw CHullLogicError(soliloquy,"Input dimension mode (2D) and function mode mismatch");
    }
    if(m_velements.size() != 2) {throw CHullLogicError(soliloquy,"Input dimension mode (2D) and elements.size() mismatch");}
  } else if(dimension == 3) {
    if(function_mode != ADDPLOT_MODE_HULL_POINTS &&
        function_mode != ADDPLOT_MODE_OFF_HULL_POINTS &&
        function_mode != ADDPLOT_MODE_HULL_FACETS &&
        function_mode != ADDPLOT_MODE_HULL_FACETSDROP_SHADOWS &&
        function_mode != ADDPLOT_MODE_HEAT_MAPS) {
      throw CHullLogicError(soliloquy,"Input dimension mode (3D) and function mode mismatch");
    }
    if(m_velements.size() != 3) {throw CHullLogicError(soliloquy,"Input dimension mode (3D) and elements.size() mismatch");}
  } else {throw CHullLogicError(soliloquy,"Input dimension mode out of scope");}

  // main addplot function
  if(dimension == 2) {addplot_output_ss << "\\addplot+[" << endl;}
  else {  // dimension==3
    if(function_mode == ADDPLOT_MODE_HEAT_MAPS) {addplot_output_ss << "\\addplot3[" << endl;}
    else{addplot_output_ss << "\\addplot3+[" << endl;}
  }

  if(function_mode == ADDPLOT_MODE_HULL_FACETS ||
      function_mode == ADDPLOT_MODE_HULL_FACETSDROP_SHADOWS) {
    addplot_output_ss << "mark=none," << endl;
    if(function_mode == ADDPLOT_MODE_HULL_FACETSDROP_SHADOWS) {
      addplot_output_ss << "color=white," << endl;
      addplot_output_ss << "solid," << endl;
      addplot_output_ss << "line width=2.0pt," << endl;
    } else {  // function_mode==ADDPLOT_MODE_HULL_FACETS
      addplot_output_ss << "color=black," << endl;
      addplot_output_ss << "solid," << endl;
      if(dimension == 3) {addplot_output_ss << "line width=2pt," << endl;}
    }
    addplot_output_ss << "] table ";
    if(dimension == 2) {
      if(reverse_axes){addplot_output_ss << "[x=" << m_velements[0];}
      else{addplot_output_ss << "[x=" << m_velements[1];}
      if(m_formation_energy_hull) {addplot_output_ss << ",y=Hform";}
      else{addplot_output_ss << ",y=Ts";}
      addplot_output_ss << "]";
    } else {  // dimension==3
      addplot_output_ss << "[x=" << m_velements[1];
      addplot_output_ss << ",y=" << m_velements[0];
      addplot_output_ss << ",z=" << m_velements[2] << "]";  // flipping x and y
    }
  } else {  // function_mode==ADDPLOT_MODE_HULL_POINTS||function_mode==ADDPLOT_MODE_OFF_HULL_POINTS||function_mode==ADDPLOT_MODE_HEAT_MAPS
    if(function_mode == ADDPLOT_MODE_HEAT_MAPS) {
      addplot_output_ss << "patch," << endl;
      addplot_output_ss << "patch type=triangle," << endl;
      addplot_output_ss << "shader=interp," << endl;
    } else {
      addplot_output_ss << "only marks," << endl;  // IMPORTANT, no lines
      if(function_mode == ADDPLOT_MODE_HULL_POINTS) {
        addplot_output_ss << "mark=*," << endl;
        if(dimension == 2) {addplot_output_ss << "mark size=4," << endl;}
        else {  // dimension==3
          addplot_output_ss << "mark size=5," << endl;
          addplot_output_ss << "line width=2pt," << endl;
        }
      } else {  // function_mode==ADDPLOT_MODE_OFF_HULL_POINTS
        addplot_output_ss << "mark=x," << endl;
        addplot_output_ss << "mark options={scale=2,line width=2,solid";
      }
    }
    if(display_color_gradient || function_mode == ADDPLOT_MODE_HEAT_MAPS) {  
      // this OR statement doesn't practically matter, since one does not work without the other, 
      // but I keep it here so that the output of the string is complete
      if(function_mode == ADDPLOT_MODE_OFF_HULL_POINTS) {addplot_output_ss << "}," << endl;}
      if(m_formation_energy_hull) {
        addplot_output_ss << "point meta=\\thisrow{Hform}," << endl;  // uses point meta as color data
        addplot_output_ss << "nodes near coords*={}," << endl;  // no labels, but we need this for colors
        // GOT IT! // http://tex.stackexchange.com/questions/59070/pgfplots-remove-darker-borders-on-marks
        if(function_mode == ADDPLOT_MODE_HULL_POINTS) {addplot_output_ss << dark_border_points_command << "," << endl;}
        addplot_output_ss << "visualization depends on={\\thisrow{Hform} \\as \\Hform}," << endl;  // defines visualization dependency
      } else {
        addplot_output_ss << "point meta=\\thisrow{Ts}," << endl;  // uses point meta as color data
        addplot_output_ss << "nodes near coords*={}," << endl;  // no labels, but we need this for colors
        // GOT IT! // http://tex.stackexchange.com/questions/59070/pgfplots-remove-darker-borders-on-marks
        if(function_mode == ADDPLOT_MODE_HULL_POINTS) {addplot_output_ss << dark_border_points_command << "," << endl;}
        addplot_output_ss << "visualization depends on={\\thisrow{Ts} \\as \\Ts}," << endl;  // defines visualization dependency
      }
    } else {
      if(function_mode == ADDPLOT_MODE_HULL_POINTS) {addplot_output_ss << "mark options={draw=black,fill=blue,solid}," << endl;}
      else {addplot_output_ss << ",draw=red}," << endl;}// function_mode==ADDPLOT_MODE_OFF_HULL_POINTS
    }
    addplot_output_ss << "] table ";
    if(dimension == 2) {
      if(reverse_axes){addplot_output_ss << "[x=" << m_velements[0];}
      else{addplot_output_ss << "[x=" << m_velements[1];}
      if(m_formation_energy_hull) {addplot_output_ss << ",y=Hform";}
      else{addplot_output_ss << ",y=Ts";}
      addplot_output_ss << "]";
    } else {  // dimension==3
      addplot_output_ss << "[x=" << m_velements[1];
      addplot_output_ss << ",y=" << m_velements[0];
      addplot_output_ss << ",z=" << m_velements[2] << "]";  // flipping x and y
    }
  }
  addplot_output_ss << "{" << endl;
  for (uint i = 0; i < m_velements.size(); i++){addplot_output_ss << aurostd::PaddedPOST(m_velements[i], 30);}
  addplot_output_ss << aurostd::PaddedPOST("Hform", 30);
  addplot_output_ss << aurostd::PaddedPOST("Ts", 30);
  addplot_output_ss << aurostd::PaddedPOST("Dist2hull", 30);
  addplot_output_ss << endl;

  return addplot_output_ss.str();
}

string ConvexHull::addPointContentLaTeX(const ChullPoint& point,bool zero_end_point,bool zero_dist_2_hull) const {  //true,false
  string soliloquy = "ConvexHull::addPointContentLaTeX():";

  // initializations
  stringstream addplot_output_ss;
  // no precision
  stringstream num_ss;

  // explicit dimensions
  for (uint i = 0; i < (uint)point.s_coords.rows; i++) {
    addplot_output_ss << aurostd::PaddedPOST(aurostd::utype2string(point.s_coords[i],FULL_PRECISION), 30);
  }
  // enthalpy of formation, row 4
  // fix for unaries, set to 0
  if((zero_end_point && point.isUnary()) || !point.m_has_entry) {  // IMPORTANT, these must go through 0
    // no need for precision for next few columns, leave it same way as received from AFLOW
    addplot_output_ss << aurostd::PaddedPOST(0, 30); //aurostd::PaddedPOST(aurostd::utype2string(0.0,CHULL_PRECISION,false,ROUNDOFF_TOL,FIXED_STREAM), 30);
    // entropic temperature, row 5
    addplot_output_ss << aurostd::PaddedPOST(0, 30); //aurostd::PaddedPOST(aurostd::utype2string(0.0,CHULL_PRECISION,false,ROUNDOFF_TOL,FIXED_STREAM), 30);
  } else {
    // no need for precision for next few columns, leave it same way as received from AFLOW
    num_ss << chull::Hf_atom(point, _m_);
    addplot_output_ss << aurostd::PaddedPOST(num_ss.str(), 30);
    num_ss.str("");
    // entropic temperature, row 5
    num_ss << chull::Ts(point);
    addplot_output_ss << aurostd::PaddedPOST(num_ss.str(), 30);
    num_ss.str("");
  }
  // dist_2_hull, row 6
  if(zero_dist_2_hull) {addplot_output_ss << aurostd::PaddedPOST(0, 30);} //aurostd::PaddedPOST(aurostd::utype2string(0.0,CHULL_PRECISION,false,ROUNDOFF_TOL,FIXED_STREAM), 30);}
  else {addplot_output_ss << aurostd::PaddedPOST(aurostd::utype2string(chull::dist2Hull(point,_m_),CHULL_PRECISION), 30);}
  // end line
  addplot_output_ss << endl;
  return addplot_output_ss.str();
}

string ConvexHull::getNodeCoordPosition(const ChullPoint& point) const {
  if(!point.m_has_entry){
    string soliloquy="ConvexHull::getNodeCoordPosition():";
    throw CHullLogicError(soliloquy,"No entry found");
  }
  return getNodeCoordPosition(point.m_entry,point.m_coords);
}

string ConvexHull::getNodeCoordPosition(const aflowlib::_aflowlib_entry& entry,const xvector<double>& coord) const {
  // produces node latex output
  string soliloquy = "chull::getNodeCoordPosition():";
  stringstream message;

  double sum_C;
  stringstream output;
  // no precision
  stringstream num_ss;

  uint dimension=getDim();
  bool reverse_axes=DEFAULT_CHULL_LATEX_REVERSE_AXIS;

  // first do a check that the function_mode is not out of scope
  if(dimension == 2) {
    if(coord.rows != 2) {throw CHullLogicError(soliloquy,"Input dimension mode (2D) and coordinate size mismatch");}
  } else if(dimension == 3) {
    if(coord.rows != 3) {throw CHullLogicError(soliloquy,"Input dimension mode (3D) and coordinate size mismatch");}
  } else{throw CHullLogicError(soliloquy,"Input dimension mode out of scope");}

  output << "axis cs:";  // define axis as relevant "coordinate system"

  if(dimension == 2) {
    // don't need for loop, just 1 coord
    if(!reverse_axes) {output << aurostd::utype2string(1.0 - coord(0),FULL_PRECISION);}
    else {output << aurostd::utype2string(coord(0),FULL_PRECISION);}
    output << ",";
    if(m_formation_energy_hull) {
      num_ss << chull::Hf_atom(entry, _m_);
      output << num_ss.str();
      num_ss.str("");
    } else {
      num_ss << chull::Ts(entry);
      output << num_ss.str();
      num_ss.str("");
    }
  } else {  // dimension==3
    sum_C = 0.0;
    for(uint j=coord.rows-2; j<(uint)coord.rows;j--) {
      output << aurostd::utype2string(coord(j),FULL_PRECISION);
      output << ",";
      sum_C += coord(j);
    }
    output << aurostd::utype2string(1.0-sum_C,FULL_PRECISION);
  }
  return output.str();
}

string ConvexHull::nodeCreator(stringstream& option, stringstream& position, stringstream& content) const {
  string _option = option.str();
  string _position = position.str();
  string _content = content.str();
  option.str("");
  position.str("");
  content.str("");
  return nodeCreator(_option, _position, _content);
}

string ConvexHull::nodeCreator(const string& option, const string& position, const string& content) const {
  // produces node latex output
  stringstream output;
  output << "\\node ";
  if(!option.empty()) {output << "[" << option << "] ";}
  if(!position.empty()) {output << "at (" << position << ") ";}
  if(!content.empty()) {output << "{" << content << "};";}
  output << endl;
  return output.str();
}

bool ConvexHull::unwantedFacetLine(uint vi,uint vj,bool check_border) const {  //bool check_border = true;
  vector<vector<uint> > facet_lines;
  return unwantedFacetLine(vi, vj, facet_lines, check_border);
}

bool ConvexHull::unwantedFacetLine(uint vi,uint vj,vector<vector<uint> >& facet_lines,bool check_border) const {  //bool check_border = true;
  // checks if the facet created by this combination of chullPoints is necessary
  // for 3D hull
  bool LDEBUG = (FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::unwantedFacetLine():";
  if(LDEBUG) {cerr << soliloquy << " starting" << endl;}
  if(vi>m_points.size()-1 || vj>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index within points");}
  if(check_border) {
    const ChullPoint& ci=m_points[vi];
    const ChullPoint& cj=m_points[vj];
    const xvector<double>& coordAR = ci.getTruncatedGenCoords();
    const xvector<double>& coordBR = cj.getTruncatedGenCoords();
    bool endpointA = ci.isUnary();
    bool endpointB = cj.isUnary();
    const aflowlib::_aflowlib_entry& entryA = ci.m_entry;
    const aflowlib::_aflowlib_entry& entryB = cj.m_entry;
    // unary to unary
    if(endpointA && endpointB) {
      if(LDEBUG) {cerr << soliloquy << " unary to unary" << endl;}
      return true;
    }
    // unary to binary, only if dot product of coords is not 0 (unary to crossing binary line)
    if(endpointA && entryB.vspecies.size() == 2 && scalar_product(coordAR, coordBR) >= ZERO_TOL) {
      if(LDEBUG) {cerr << soliloquy << " unary to binary" << endl;}
      return true;
    }
    // binary to unary, only if dot product of coords is not 0 (unary to crossing binary line)
    if(entryA.vspecies.size() == 2 && endpointB && scalar_product(coordAR, coordBR) >= ZERO_TOL) {
      if(LDEBUG) {cerr << soliloquy << " binary to unary" << endl;}
      return true;
    }
    // binary to binary, if same species
    if(entryA.vspecies.size() == 2 && entryA.vspecies == entryB.vspecies) {
      if(LDEBUG) {cerr << soliloquy << " binary to binary" << endl;}
      return true;
    }
  }
  // check that this combination is unique,
  // only pairs inside facet_lines!!!
  // chullPoints, so we're only interested in compositional components of
  // xvector, not the energy
  for (uint i = 0; i < facet_lines.size(); i++) {
    if(facet_lines[i][0]==vi && facet_lines[i][1]==vj){
      if(LDEBUG) {
        cerr << soliloquy << " found match! ";
        cerr << facet_lines[i][0] << "==" << vi;
        cerr << ", ";
        cerr << facet_lines[i][1] << "==" << vj;
        cerr << endl;
      }
      return true;
    }
    if(facet_lines[i][0]==vj && facet_lines[i][1]==vi){
      if(LDEBUG) {
        cerr << soliloquy << " found match! ";
        cerr << facet_lines[i][0] << "==" << vj;
        cerr << ", ";
        cerr << facet_lines[i][1] << "==" << vi;
        cerr << endl;
      }
      return true;
    }
  }
  facet_lines.push_back(vector<uint>(0));
  facet_lines.back().push_back(vi);
  facet_lines.back().push_back(vj);
  if(LDEBUG) {cerr << soliloquy << " saving facet lines: " << vi << "," << vj << endl;}
  return false;
}

void ConvexHull::writePDF() const {
  bool LDEBUG = (FALSE || XHOST.DEBUG);
  string soliloquy = "chull::ConvexHull::writePDF():";
  stringstream message;
  if(!aurostd::IsCommandAvailable("pdflatex")) {throw CHullRuntimeError(soliloquy,"\"pdflatex\" needs to be in your path");}
  message << "Starting LaTeX PDF generator";
  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_MESSAGE_);

  //////////////////////////////////////////////////////////////////////////////
  // START Getting hull attributes
  //////////////////////////////////////////////////////////////////////////////

  uint dimension=getDim();
  vector<uint> hull_points=getHullPoints(false);
  bool draw_all_facet_lines=false;  //only draw uniques, keep FALSE
  bool include_equilibrium_phases=true; //keep true
  
  //USER INPUTS
  bool doc_only=m_cflags.flag("CHULL::DOC_ONLY");
  bool no_doc=m_cflags.flag("CHULL::NO_DOC");
  bool image_only=m_cflags.flag("CHULL::IMAGE_ONLY");
  bool light_contrast=m_cflags.flag("CHULL::LIGHT_CONTRAST");
  bool large_font=m_cflags.flag("CHULL::LARGE_FONT");
  bool keep_tex=m_cflags.flag("CHULL::KEEP_TEX");
  bool show_latex_output=m_cflags.flag("CHULL::LATEX_OUTPUT");
  bool latex_interactive_mode=m_cflags.flag("CHULL::LATEX_INTERACTIVE");
  
  //FROM AFLOWRC
  bool print_aflow_logo=true;
  bool no_banner=(DEFAULT_CHULL_LATEX_BANNER==0);
  bool small_banner=(DEFAULT_CHULL_LATEX_BANNER==2);
  bool compounds_column_report=DEFAULT_CHULL_LATEX_COMPOUNDS_COLUMN;
  bool composition_header_report=DEFAULT_CHULL_LATEX_COMPOSITION_HEADER;
  bool plot_endpoints=DEFAULT_CHULL_LATEX_PLOT_ENDPOINTS;
  bool filter_by_z=(!DEFAULT_CHULL_LATEX_FILTER_SCHEME.empty() && (aurostd::toupper(DEFAULT_CHULL_LATEX_FILTER_SCHEME)[0]=='Z' || aurostd::toupper(DEFAULT_CHULL_LATEX_FILTER_SCHEME)[0]=='E'));
  bool filter_by_distance=(!DEFAULT_CHULL_LATEX_FILTER_SCHEME.empty() && aurostd::toupper(DEFAULT_CHULL_LATEX_FILTER_SCHEME)[0]=='D');
  double filter_cutoff=DEFAULT_CHULL_LATEX_FILTER_VALUE;
  
  int plot_off_hull_setting=DEFAULT_CHULL_LATEX_PLOT_OFF_HULL;     //does not include unstable
  bool plot_off_hull;
  if(plot_off_hull_setting==-1){plot_off_hull=(getDim()==2?true:false);}
  else{plot_off_hull=(plot_off_hull_setting==0?false:true);}
  if(filter_by_z||filter_by_distance){plot_off_hull=true;}

  bool plot_unstable=DEFAULT_CHULL_LATEX_PLOT_UNSTABLE;
  bool reverse_axes=DEFAULT_CHULL_LATEX_REVERSE_AXIS;
  
  bool display_color_gradient=DEFAULT_CHULL_LATEX_COLOR_GRADIENT;
  bool include_color_bar=DEFAULT_CHULL_LATEX_COLOR_BAR;
  bool show_heat_map=DEFAULT_CHULL_LATEX_HEAT_MAP;
  if(!display_color_gradient){
    include_color_bar=false;
    show_heat_map=false;
  }
  
  bool hull_drop_shadow=DEFAULT_CHULL_LATEX_FACET_LINE_DROP_SHADOW;  //gus paper
  
  string ternary_label_color_setting=DEFAULT_CHULL_LATEX_TERNARY_LABEL_COLOR;
  string ternary_label_color=(ternary_label_color_setting.empty()?"white":ternary_label_color_setting);
  if(hull_drop_shadow&&ternary_label_color=="white"){ternary_label_color="yellow";} //white doesn't work here
  if(!show_heat_map&&(ternary_label_color=="white"||ternary_label_color=="yellow")){ternary_label_color="black";} //white/yellow doesn't work here
  
  string color_map_setting=DEFAULT_CHULL_LATEX_COLOR_MAP;
  string color_map=(color_map_setting.empty()?"rgb(0pt)=(0,0,1); rgb(63pt)=(1,0.644,0)":color_map_setting);
  
  //links options
  int links_setting=DEFAULT_CHULL_LATEX_LINKS;
  bool kill_all_links=(links_setting==0);  //no links whatsoever
  bool no_links=(links_setting==2);        //no jumping
  bool no_hyperlinks=(links_setting==3);   //no weblinks
  if(image_only){kill_all_links=true;}
  if(kill_all_links){
    no_links=true;      //no jumping
    no_hyperlinks=true; //no weblinks
  }
  if(no_doc){no_links=true;}

  //labels options
  bool labels_off_hull=DEFAULT_CHULL_LATEX_LABELS_OFF_HULL;
  bool meta_labels=DEFAULT_CHULL_LATEX_META_LABELS;
  bool no_labels=false;
  bool compound_labels=true;  //default is to show compound labels only, for binaries this will be ground state dependent
  bool prototype_labels=(getDim()==2 && labels_off_hull); //default is to show prototype labels for binaries, with compounds labels on ground states for reference
  string label_options=DEFAULT_CHULL_LATEX_LABEL_NAME;
  bool plot_labels=(!label_options.empty());           //overarching flag, mostly for getting options
  if(plot_labels){
    compound_labels=prototype_labels=false; //kill defaults
    vector<string> vlabelstring;
    aurostd::string2tokens(label_options,vlabelstring, ",");
    for (uint i = 0; i < vlabelstring.size(); i++) {
      if(vlabelstring[i][0] == 'B' || vlabelstring[i][0] == 'b') {  // both
        compound_labels=true;
        prototype_labels=true;
        no_labels=false;
        break;
      } else if(vlabelstring[i][0] == 'N' || vlabelstring[i][0] == 'n' || vlabelstring[i][0] == 'O' || vlabelstring[i][0] == 'o') {  // none,off
        compound_labels=false;
        prototype_labels=false;
        meta_labels=false;
        no_labels=true;
        break;
      } else if(vlabelstring[i][0] == 'C' || vlabelstring[i][0] == 'c') {  // compound
        compound_labels=true;
        no_labels=false;
      } else if(vlabelstring[i][0] == 'P' || vlabelstring[i][0] == 'p') {  // prototype
        prototype_labels=true;
        no_labels=false;
      } else {throw CHullLogicError(soliloquy,"Incorrect input for plot labels \""+vlabelstring[i]+"\"");}
    }
  }
  if(labels_off_hull){
    plot_off_hull=true;
    no_labels=false;
  }
  if(meta_labels){no_labels=false;}

  int plot_reduce_composition_setting=DEFAULT_CHULL_LATEX_PLOT_REDUCE_COMPOSITION;
  bool plot_reduce_composition;
  if(plot_reduce_composition_setting==-1){plot_reduce_composition=(!(getDim()==2&&compound_labels&&plot_labels));}
  else{plot_reduce_composition=(plot_reduce_composition_setting==0?false:true);}
  if(plot_reduce_composition){no_labels=false;}
  bool helvetica_font=DEFAULT_CHULL_LATEX_HELVETICA_FONT;
  string font_size=DEFAULT_CHULL_LATEX_FONT_SIZE;
  bool rotate_labels=DEFAULT_CHULL_LATEX_ROTATE_LABELS;
  if(rotate_labels){no_labels=false;}

  bool bold_labels=DEFAULT_CHULL_LATEX_BOLD_LABELS;
  
  //override with user inputs
  if(light_contrast){color_map="rgb(0pt)=(0.035,0.270,0.809); rgb(63pt)=(1,0.644,0)";}
  if(large_font) {
    if(helvetica_font) {font_size="huge";}
    else {font_size="Large";}
  } else {font_size="large";} //safely, I can do large


  //////////////////////////////////////////////////////////////////////////////
  // START Getting hull attributes
  //////////////////////////////////////////////////////////////////////////////

  if(dimension>3) {
    doc_only=true;
    message << "CHULL::DOC_ONLY set to TRUE (dimension>3)";
    pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
  }

  // initializing stringstreams to use
  stringstream doc_header_TEX_ss, _doc_header_TEX_ss;               // latex header commands
  stringstream tikzpic_settings_TEX_ss,_tikzpic_settings_TEX_ss;    // settings in tikzpic
  stringstream tikzpic_TEX_ss;                         // tikzpicture commands
  stringstream convex_hull_facets_TEX_ss;              // never empty
  stringstream convex_hull_vertices_TEX_ss;            // never empty
  stringstream convex_hull_facets_drop_shadow_TEX_ss;  // never empty
  stringstream common_settings_TEX_ss;                    // use for common settings to reduce redundancy
  stringstream unary_label_TEX_ss;               // unary tikzpicture label commands
  stringstream heat_map_TEX_ss;                  // heatmap stuff
  stringstream points_data_ss, _points_data_ss;  // points commands
  stringstream labels_data_ss;
  stringstream report_data_ss, _report_data_ss;
  stringstream equilibrium_phases_TEX_ss;
  stringstream equilibrium_phases_header_TEX_ss;
  stringstream reaction_chem_eq_TEX_ss;
  stringstream main_TEX_ss;
  stringstream node_option_ss;
  stringstream node_position_ss;
  stringstream node_content_ss;
  stringstream misc_ss;
  // no precision
  stringstream num_ss;

  // initializing some strings
  string main_TEX_file, main_PDF_file;
  string main_file;
  string input;

  // creating name of output file
  input=aurostd::joinWDelimiter(m_velements,"");
  main_file="aflow_"+input+"_hull";
  if(image_only) {main_TEX_file = main_file + "_IMAGEONLY.tex";}
  else{main_TEX_file = main_file + ".tex";}
  main_PDF_file = main_file + ".pdf";
  string aflow_logo_file = "aflow_logo.pdf";

  // other initialization
  uint plot_points_count;                // points to put on ternary plot
  uint plot_points_count_no_end_points;  // mostly for count purposes
  vector<uint> chull_points;
  double min_point = 0.0, max_point = 0.0, z_range = 0.0;  // saves min/max energy value to determine if we can
  // have a colorbar
  double z_filter_cutoff, dist_filter_cutoff;
  string plot_command;
  string output_name;
  string misc;
  vector<string> files_2_move, sg_tokens;
  stringstream command;
  uint num_horizontal_planes = 0;  // to determine whether or not we should have heatmaps
  uint count_entries = 0;

  //////////////////////////////////////////////////////////////////////////////
  // START Document header
  //////////////////////////////////////////////////////////////////////////////

  doc_header_TEX_ss << "\\documentclass[12pt]{article}" << endl;
  doc_header_TEX_ss << "\\usepackage[utf8x]{inputenc}" << endl;
  doc_header_TEX_ss << "\\usepackage[table]{xcolor}" << endl;
  if(helvetica_font) {
    doc_header_TEX_ss << "\\usepackage[scaled]{helvet}" << endl;
    doc_header_TEX_ss << "\\renewcommand\\familydefault{\\sfdefault}" << endl;
    doc_header_TEX_ss << "\\usepackage{sansmath}" << endl;
    doc_header_TEX_ss << "\\sansmath" << endl; //enable sans-serif math for rest of document
  }
  doc_header_TEX_ss << "\\usepackage[T1]{fontenc}" << endl;  // accents https://tex.stackexchange.com/questions/664/why-should-i-use-usepackaget1fontenc
  doc_header_TEX_ss << "\\usepackage{anyfontsize}" << endl;  // arbitrary font sizes
  doc_header_TEX_ss << "\\usepackage{lmodern}" << endl;  // high quality fonts
  if(image_only || no_doc) {doc_header_TEX_ss << "\\usepackage[margin=0cm]{geometry}" << endl;}
  else{
    // geometry package
    doc_header_TEX_ss << "\\usepackage[includeheadfoot,headheight=";
    //if(XHOST.hostname == "aflowlib.mems.duke.edu" &&
    if(print_aflow_logo) {doc_header_TEX_ss << "70pt";}
    else{doc_header_TEX_ss << "40pt";}
    doc_header_TEX_ss << ",headsep=0.1in,top=0.5in,bottom=0.75in,left=0.5in,right=0.5in,footskip=0.5in]{geometry}" << endl;
    // geometry package
    if(!no_doc) {
      doc_header_TEX_ss << "\\usepackage{longtable}" << endl;
      doc_header_TEX_ss << "\\usepackage{tabu}" << endl;
      doc_header_TEX_ss << "\\usepackage{booktabs} \%midrule and toprule" << endl;
      //http://tex.stackexchange.com/questions/167948/package-rerunfilecheck-warning-file-out-has-changed
      doc_header_TEX_ss << "\\usepackage{fancyhdr} \%column header" << endl;
      doc_header_TEX_ss << "\\usepackage{multirow} \%column header" << endl;
    }
  }
  if(!kill_all_links) {
    doc_header_TEX_ss << "\\usepackage{hyperref} \\hypersetup{colorlinks=true,citecolor=blue,linkcolor=blue,urlcolor=blue}" << endl;
    doc_header_TEX_ss << "\\usepackage{bookmark} \%hyperref without .out" << endl;
  }

  // things to add later, depending on we include hull image on first page
  _doc_header_TEX_ss << "\\begin{document}" << endl;
  // BEAUTIFUL SOLUTION to use links with labels
  if(!plot_endpoints &&!no_doc) {
    _doc_header_TEX_ss << "\\newcommand{\\hyperrefTitle}[2]{\\hyperref[#1]{#2}} \%we need this because axis doesn't like []" << endl;
  }

  //////////////////////////////////////////////////////////////////////////////
  // END Document header (for now)
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // START Get count_entries
  //////////////////////////////////////////////////////////////////////////////

  count_entries=getEntriesCount();

  //////////////////////////////////////////////////////////////////////////////
  // END Get count_entries
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // START Image on first page
  //////////////////////////////////////////////////////////////////////////////

  if(!doc_only && (dimension == 2 || dimension == 3)) {
    ////////////////////////////////////////////////////////////////////////////
    // START More header commands specific to tikz pic
    ////////////////////////////////////////////////////////////////////////////

    doc_header_TEX_ss << "\\usepackage{pgfplots}" << endl;
    doc_header_TEX_ss << "\\usepackage{pdflscape}" << endl;
    doc_header_TEX_ss << "\\pgfplotsset{compat=1.10}" << endl;
    doc_header_TEX_ss << "\\usepgfplotslibrary{ternary,units}" << endl;
    doc_header_TEX_ss << "\\usetikzlibrary{decorations.pathmorphing,pgfplots.units,backgrounds}" << endl;
    doc_header_TEX_ss << "\\usepackage[yyyymmdd,hhmmss]{datetime}" << endl;
    doc_header_TEX_ss << "\\usepackage{tikz}" << endl;
    doc_header_TEX_ss << "\\usetikzlibrary{positioning}" << endl;

    if(dimension == 3) {
      doc_header_TEX_ss << "\\usetikzlibrary{pgfplots.ternary}" << endl;
    }
    if(image_only) {
      doc_header_TEX_ss << "\\pgfrealjobname{CHull}" << endl;  // dummy name
    }
    doc_header_TEX_ss << "\\pgfdeclarelayer{background}" << endl;
    doc_header_TEX_ss << "\\pgfdeclarelayer{foreground}" << endl;
    doc_header_TEX_ss << "\\pgfsetlayers{background,main,foreground}" << endl;
    doc_header_TEX_ss << _doc_header_TEX_ss.str();
    _doc_header_TEX_ss.str("");  // don't repeat
    if(image_only) {
      doc_header_TEX_ss << "\\beginpgfgraphicnamed{aflow_" << input << "_hull}" << endl;
    } else {
      if(!no_doc) {doc_header_TEX_ss << "\\newgeometry{margin=0cm}" << endl;}
      doc_header_TEX_ss << "\\thispagestyle{empty}" << endl;
      doc_header_TEX_ss << "\\begin{landscape}" << endl;
      doc_header_TEX_ss << "\\centering" << endl;
      doc_header_TEX_ss << "{" << endl;
      doc_header_TEX_ss << "\\topskip0pt" << endl;
      doc_header_TEX_ss << "\\vspace*{\\fill}" << endl;
    }

    ////////////////////////////////////////////////////////////////////////////
    // END More header commands specific to tikz pic
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // START Z and DIST filter
    ////////////////////////////////////////////////////////////////////////////

    // we need to handle filters first, so we can test to see if a colorbar is
    // possible
    if(filter_by_z || !plot_unstable) {
      z_filter_cutoff = 0.0;  //default
      if(filter_by_z) {
        z_filter_cutoff = filter_cutoff;
        //let's automatically override plot_unstable if z_filter_cutoff is set appropriately
        bool plot_unstable_old=plot_unstable;
        if(m_formation_energy_hull){if(z_filter_cutoff > 0.0){plot_unstable=true;}}
        else{if(z_filter_cutoff < 0.0){plot_unstable=true;}}
        if(plot_unstable_old!=plot_unstable){
          message << "CHULL::PLOT_UNSTABLE set to TRUE, z_filter_cutoff=" << z_filter_cutoff;
          pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        }
        //[OBSOLETE CO 180227]if(!plot_unstable) {
        //[OBSOLETE CO 180227]  if(m_formation_energy_hull){if(z_filter_cutoff > 0.0){z_filter_cutoff = 0.0;}}
        //[OBSOLETE CO 180227]  else{if(z_filter_cutoff < 0.0){z_filter_cutoff = 0.0;}}
        //[OBSOLETE CO 180227]}
      }//[OBSOLETE CO 180227]else{z_filter_cutoff = 0.0;}
      if(LDEBUG) {cerr << soliloquy << " z_filter_cutoff=" << z_filter_cutoff << endl;}
    }
    if(filter_by_distance) {
      dist_filter_cutoff = filter_cutoff; 
      if(LDEBUG) {cerr << soliloquy << " DIST dist_filter_cutoff=" << dist_filter_cutoff << endl;}
      if((abs(dist_filter_cutoff)<ZERO_TOL) && plot_off_hull) {
        plot_off_hull=false;
        message << "CHULL::OFF_HULL set to FALSE, filter_by_distance=0.0";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
      }
    }

    ////////////////////////////////////////////////////////////////////////////
    // END Z and DIST filter
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // START Gathering points for plotting
    ////////////////////////////////////////////////////////////////////////////

    vector<uint> plot_points;
    plot_points_count = 0;
    plot_points_count_no_end_points = 0;
    uint i_point;
    // no way to avoid this, we need to figure out if we can have a colorbar before
    // we go through the rest of the loops
    // so let's avoid double filtering, do it once and store to plot_points
    
    bool point_added;
    bool unary_g_state_unstable=false;  //the only way this is true is if we plot the unary g_state and it's unstable
    for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
      point_added=false;
      for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size()&&!(dimension==3&&point_added);i++){  //we only add one point per coordgroup for 3D
        i_point=m_coord_groups[i_coord_group].m_points[i];
        const ChullPoint& point=m_points[i_point];
        if(!point.m_has_entry){continue;}
        if(!plot_endpoints && point.isUnary()){continue;}
        if(!plot_off_hull && !point.m_is_g_state){continue;}  //if point.isUnary() and it gets here, only pass g-state
        if(!point.m_is_g_state){
          if(filter_by_z || !plot_unstable) {
            if(m_formation_energy_hull) {
              if(chull::Hf_atom(point, _m_) > z_filter_cutoff) {
                if(filter_by_z) {
                  message << "Excluding entry " << point.m_entry.auid;
                  message << " with H_form = " << chull::Hf_atom(point, _m_);
                  message << " (meV/atom) from plot";
                  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_,!filter_by_z);  // too much output to screen
                }
                continue;
              }
            } else {
              if(chull::Ts(point) < z_filter_cutoff) {
                if(filter_by_z) {
                  message << "Excluding entry " << point.m_entry.auid;
                  message << " with Ts = " << chull::Ts(point);
                  message << " (K) from plot";
                  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_,!filter_by_z);  // too much output to screen
                }
                continue;
              }
            }
          }
          if(filter_by_distance) {
            if(m_formation_energy_hull) {
              if(chull::dist2Hull(point, _m_) > dist_filter_cutoff) {
                message << "Excluding entry " << point.m_entry.auid;
                message << " with enthalpy_formation_atom_difference = " << aurostd::utype2string(chull::dist2Hull(point,_m_),CHULL_PRECISION);
                message << " (meV/atom) from plot";
                pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);  // too much output to screen
                continue;
              }
            } else {
              if(chull::dist2Hull(point, _std_) < dist_filter_cutoff) {
                message << "Excluding entry " << point.m_entry.auid;
                message << " with entropic_temperature_difference = " << aurostd::utype2string(chull::dist2Hull(point),CHULL_PRECISION);
                message << " (K) from plot";
                pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);  // too much output to screen
                continue;
              }
            }
          }
        }
        if(point.getLastCoord()<min_point){min_point=point.getLastCoord();}
        if(point.getLastCoord()>max_point){max_point=point.getLastCoord();}
        if(point.isUnary()){
          if(m_formation_energy_hull) {if(chull::Hf_atom(point, _m_) > z_filter_cutoff) {unary_g_state_unstable=true;}}
          else{if(chull::Ts(point) < z_filter_cutoff) {unary_g_state_unstable=true;}}
        }else{plot_points_count_no_end_points++;}
        plot_points_count++;
        plot_points.push_back(i_point);
        point_added=true;
      }
    }
    
    ////////////////////////////////////////////////////////////////////////////
    // END Gathering points for plotting
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // START Determining if points range enough to have color/heat map
    // functionality
    ////////////////////////////////////////////////////////////////////////////

    if(m_formation_energy_hull) {
      min_point = chull::convertUnits(min_point, _m_);
      max_point = chull::convertUnits(max_point, _m_);
    }
    z_range = max_point - min_point;
    if(LDEBUG) {
      cerr << soliloquy << " range" << endl;
      cerr << soliloquy << " max:     " << max_point << endl;
      cerr << soliloquy << " min:     " << min_point << endl;
      cerr << soliloquy << " z_range: " << z_range << endl;
    }

    // range functionality
    // http://tex.stackexchange.com/questions/69248/set-ticklabels-for-colorbar

    if(dimension == 2) {
      include_color_bar=false;
      message << "CHULL::COLOR_BAR set to FALSE (dimension==2)";
      pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
      
      show_heat_map=false;
      message << "CHULL::HEAT_MAP set to FALSE (dimension==2)";
      pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
    }
    // determine whether we can have a colorbar
    if((!plot_points_count || (dimension == 3 && !plot_points_count_no_end_points)) || (abs(z_range) < ZERO_TOL)) {
      include_color_bar=false;
      show_heat_map=true;
      display_color_gradient=false;
      if(LDEBUG) {
        cerr << soliloquy << " plot points count = " << plot_points_count << endl;
        cerr << soliloquy << " plot points count no end points = " << plot_points_count_no_end_points << endl;
      }
      if(!plot_points_count) {
        message << "CHULL::COLOR_BAR set to FALSE, no entries found";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        message << "CHULL::COLOR_GRADIENT set to FALSE, no entries found";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        message << "CHULL::HEAT_MAP set to FALSE, no entries found";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
      }else if(!plot_points_count_no_end_points) {
        message << "CHULL::COLOR_BAR set to FALSE, no non-unary entries found";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        message << "CHULL::COLOR_GRADIENT set to FALSE, no non-unary entries found";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        message << "CHULL::HEAT_MAP set to FALSE, no non-unary entries found";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
      }
      if(abs(z_range)<ZERO_TOL) {
        message << "CHULL::COLOR_BAR set to FALSE, hull has no depth";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        message << "CHULL::NO_COLOR_GRADIENT set to TRUE, hull has no depth";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
        message << "CHULL::HEAT_MAP set to FALSE, hull has no depth";
        pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_OPTION_);
      }
    }

    ////////////////////////////////////////////////////////////////////////////
    // END Determining if points range enough to have color/heat map
    // functionality
    ////////////////////////////////////////////////////////////////////////////

    // doc_header_TEX_ss ends here, we need to get data first, see
    // unary_label_TEX_ss (hrefs)

    ////////////////////////////////////////////////////////////////////////////
    // START Tikz pic settings
    ////////////////////////////////////////////////////////////////////////////

    //_tikzpic_settings_TEX_ss comes before tikzpic_TEX_ss
    if(image_only) {_tikzpic_settings_TEX_ss << "\\begin{tikzpicture}[font=\\Huge";}
    else {_tikzpic_settings_TEX_ss << "\\begin{tikzpicture}[font=\\Large";}
    _tikzpic_settings_TEX_ss << "]";
    _tikzpic_settings_TEX_ss << endl;
    // end of _tikzpic_settings_TEX_ss, we need to get data first, see
    // unary_label_TEX_ss (hrefs)
    // common settings between two axes
    bool set_max_tic_spacing_2D=true;  //CO 180227
    double ymin2D=-ZERO_RANGE_TOL;
    double ymax2D=ZERO_RANGE_TOL;
    if(dimension==2){
      if((!plot_points_count) || (abs(z_range) < ZERO_RANGE_TOL)) {
        set_max_tic_spacing_2D=false;  //CO 180227
        ymin2D=-ZERO_RANGE_TOL;
        ymax2D=ZERO_RANGE_TOL;
        //[OBSOLETE CO 180227]common_settings_TEX_ss << "ymin=" << -ZERO_RANGE_TOL << "," << endl;
        //[OBSOLETE CO 180227]common_settings_TEX_ss << "ymax=" << ZERO_RANGE_TOL << "," << endl;
      } else {
        // easier to figure out ranges in meV, stays meV
        double order_of_mag = pow(10, (ceil(log10(z_range)) - 1.0)) / 2.0;  // 1 for 10, 10 for 100, 100 for 1000
        if(LDEBUG) {
          cerr << soliloquy << " z_range                                        = " << z_range << endl;
          cerr << soliloquy << " min_point                                      = " << min_point << endl;
          cerr << soliloquy << " max_point                                      = " << max_point << endl;
          cerr << soliloquy << " order_of_mag                                   = " << order_of_mag << endl;
          cerr << soliloquy << " roundDouble(min_point, order_of_mag, false)    = " << roundDouble(min_point, order_of_mag, false) << endl;
          cerr << soliloquy << " roundDouble(max_point, order_of_mag, true)     = " << roundDouble(max_point, order_of_mag, true) << endl;
          cerr << soliloquy << " roundDouble((z_range)*0.2, order_of_mag, true) = " << roundDouble((z_range)*0.2, order_of_mag, true) << endl;
          //cerr << soliloquy << " log(z_range)         = " << log10(z_range) << endl;
        }
        // between lowest label and bottom line, increase if need more
        // we might have hull endpoints higher than 0
        if(!m_formation_energy_hull && !(plot_endpoints && unary_g_state_unstable) && (!plot_unstable || abs(min_point) < ZERO_TOL)) {
          ymin2D=0;
          //[OBSOLETE CO 180227]common_settings_TEX_ss << "ymin=" << 0 << "," << endl;
        } else {
          //[OBSOLETE CO 180227]common_settings_TEX_ss << "ymin=";
          ymin2D=roundDouble(min_point, order_of_mag, false);
          if(m_formation_energy_hull){ymin2D-=roundDouble((z_range)*0.2, order_of_mag, true);}  //CO 180227 - we need to avoid labels here, 0.2 should be enough spacing
          //[OBSOLETE CO 180227]common_settings_TEX_ss << ymin << "," << endl;
        }
        // between highest label and top line, increase if need more
        // we might have hull endpoints higher than 0
        if(m_formation_energy_hull && !(plot_endpoints && unary_g_state_unstable) && (!plot_unstable || abs(max_point) < ZERO_TOL)) {
          ymax2D=0;
          //[OBSOLETE CO 180227]common_settings_TEX_ss << "ymax=" << 0 << "," << endl;
        } else {
          //[OBSOLETE CO 180227]common_settings_TEX_ss << "ymax=";
          ymax2D=roundDouble(max_point, order_of_mag, true);
          if(!m_formation_energy_hull){ymax2D+=roundDouble((z_range)*0.2, order_of_mag, true);} //CO 180227 - we need to avoid labels here, 0.2 should be enough spacing
          //[OBSOLETE CO 180227]common_settings_TEX_ss << ymax << "," << endl;
        }
      }
      common_settings_TEX_ss << "ymin=" << ymin2D << "," << endl;
      common_settings_TEX_ss << "ymax=" << ymax2D << "," << endl;
    }
    common_settings_TEX_ss << "clip=false," << endl;  // for labels
    common_settings_TEX_ss << "width=";
    if(dimension == 2) {common_settings_TEX_ss << 21;}
    else {  // dimension==3
      if(include_color_bar) {
        if(image_only) {common_settings_TEX_ss << 21;}
        else{common_settings_TEX_ss << 20;}  // only time we change size
      }else{common_settings_TEX_ss << 21;}
    }
    common_settings_TEX_ss << "cm," << endl;
    if(dimension == 2) {
      if(image_only) {common_settings_TEX_ss << "height=0.8\\hsize," << endl;}
      else {common_settings_TEX_ss << "height=0.6\\hsize," << endl;}
    } else {
      common_settings_TEX_ss << "height=\\hsize," << endl;
      common_settings_TEX_ss << "axis line style={line width=3pt}," << endl;
    }
    common_settings_TEX_ss << "grid=none," << endl;
    common_settings_TEX_ss << "axis on top," << endl;  // prevents heat map overlap issues

    ////////////////////////////////////////////////////////////////////////////
    // START Axis
    ////////////////////////////////////////////////////////////////////////////

    uint g_state;
    if(dimension == 2) {
      uint top_axis_point, bottom_axis_point;
      if(!reverse_axes) {
        top_axis_point = 0;
        bottom_axis_point = 1;
      } else {
        top_axis_point = 1;
        bottom_axis_point = 0;
      }
      // put top axis first, bunch up with unaryLabel since it goes first
      unary_label_TEX_ss << "\\begin{axis}[" << endl;
      unary_label_TEX_ss << "xlabel={\\fontsize{25}{30}\\selectfont{";
      g_state=getUnaryGState(top_axis_point);
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {
          unary_label_TEX_ss << "\\hyperrefTitle{" << input << "_" << m_points[g_state].m_entry.auid << "}{";
        } else if(no_doc && !no_hyperlinks) {
          unary_label_TEX_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << m_points[g_state].m_entry.auid << "}{";
        }
      }
      unary_label_TEX_ss << m_velements.at(top_axis_point) << "}";
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {unary_label_TEX_ss << "}";}
        else if(no_doc && !no_hyperlinks) {unary_label_TEX_ss << "}";}
      }
      unary_label_TEX_ss << "}," << endl;
      //add "max space between ticks=60" to change colorbar tick density
      unary_label_TEX_ss << "xticklabel shift=6pt," << endl;
      unary_label_TEX_ss << "yticklabel shift=6pt," << endl;
      unary_label_TEX_ss << "axis x line*=top," << endl;
      unary_label_TEX_ss << "axis y line*=right," << endl;
      unary_label_TEX_ss << "x dir=reverse," << endl;
      unary_label_TEX_ss << "xmin=0," << endl;
      unary_label_TEX_ss << "xmax=1," << endl;
      unary_label_TEX_ss << "xtick={1,0.8,0.6,0.4,0.2,0}," << endl;
      unary_label_TEX_ss << "yticklabel style={/pgf/number format/fixed,/pgf/number format/precision=5";
      if(set_max_tic_spacing_2D){unary_label_TEX_ss << ",max space between ticks=" << int(abs(ymax2D-ymin2D)/4);}  //CO 180227, lower to get fewer tics
      unary_label_TEX_ss << "}," << endl;
      unary_label_TEX_ss << "scaled y ticks=false," << endl;
      // insert common settings
      unary_label_TEX_ss << common_settings_TEX_ss.str();
      unary_label_TEX_ss << "]" << endl;
      unary_label_TEX_ss << "\\end{axis}" << endl;
      // real axis
      unary_label_TEX_ss << "\\begin{axis}[" << endl;
      unary_label_TEX_ss << "xlabel={\\fontsize{25}{30}\\selectfont{";
      g_state=getUnaryGState(bottom_axis_point);
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {
          unary_label_TEX_ss << "\\hyperrefTitle{" << input << "_" << m_points[g_state].m_entry.auid << "}{";
        } else if(no_doc && !no_hyperlinks) {
          unary_label_TEX_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << m_points[g_state].m_entry.auid << "}{";
        }
      }
      unary_label_TEX_ss << m_velements.at(bottom_axis_point) << "}";
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {unary_label_TEX_ss << "}";}
        else if(no_doc && !no_hyperlinks) {unary_label_TEX_ss << "}";}
      }
      unary_label_TEX_ss << "}," << endl;
      unary_label_TEX_ss << "ylabel={\\fontsize{25}{30}\\selectfont";
      if(m_formation_energy_hull) {unary_label_TEX_ss << "{formation enthalpy (meV/atom)}";}
      else{unary_label_TEX_ss << "{entropic temperature (K)}";}
      unary_label_TEX_ss << "}," << endl;
      //add "max space between ticks=60" to change colorbar tick density
      unary_label_TEX_ss << "xticklabel shift=6pt," << endl;
      unary_label_TEX_ss << "yticklabel shift=6pt," << endl;
      unary_label_TEX_ss << "yticklabel style={/pgf/number format/fixed,/pgf/number format/precision=5";
      if(set_max_tic_spacing_2D){unary_label_TEX_ss << ",max space between ticks=" << int(abs(ymax2D-ymin2D)/4);}  //CO 180227, lower to get fewer tics
      unary_label_TEX_ss << "}," << endl;
      unary_label_TEX_ss << "scaled y ticks=false," << endl;
    } else {  // dimension==3
      unary_label_TEX_ss << "\\begin{ternaryaxis}[" << endl;
      // Ylabel
      unary_label_TEX_ss << "ylabel={\\fontsize{35}{40}\\selectfont{";  // flipping x and y
      g_state=getUnaryGState(0);
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {
          unary_label_TEX_ss << "\\hyperrefTitle{" << input << "_" << m_points[g_state].m_entry.auid << "}{";
        } else if(no_doc && !no_hyperlinks) {
          unary_label_TEX_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << m_points[g_state].m_entry.auid << "}{";
        }
      }
      unary_label_TEX_ss << m_velements[0] << "}";
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {unary_label_TEX_ss << "}";}
        else if(no_doc && !no_hyperlinks) {unary_label_TEX_ss << "}";}
      }
      unary_label_TEX_ss << "}," << endl;
      unary_label_TEX_ss << "ylabel style={at={(axis cs:0,1,0)},anchor=north east,below=0.5cm,left=0.5cm}," << endl;
      // Xlabel
      unary_label_TEX_ss << "xlabel={\\fontsize{35}{40}\\selectfont{";  // flipping x and y
      g_state=getUnaryGState(1);
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {
          unary_label_TEX_ss << "\\hyperrefTitle{" << input << "_" << m_points[g_state].m_entry.auid << "}{";
        } else if(no_doc && !no_hyperlinks) {
          unary_label_TEX_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << m_points[g_state].m_entry.auid << "}{";
        }
      }
      unary_label_TEX_ss << m_velements[1] << "}";
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {unary_label_TEX_ss << "}";}
        else if(no_doc && !no_hyperlinks) {unary_label_TEX_ss << "}";}
      }
      unary_label_TEX_ss << "}," << endl;
      unary_label_TEX_ss << "xlabel style={at={(axis cs:1,0,0)},anchor=south,above=0.7071cm}," << endl;
      // Zlabel
      unary_label_TEX_ss << "zlabel={\\fontsize{35}{40}\\selectfont{";  // flipping x and y
      g_state=getUnaryGState(2);
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {
          unary_label_TEX_ss << "\\hyperrefTitle{" << input << "_" << m_points[g_state].m_entry.auid << "}{";
        } else if(no_doc && !no_hyperlinks) {
          unary_label_TEX_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << m_points[g_state].m_entry.auid << "}{";
        }
      }
      unary_label_TEX_ss << m_velements[2] << "}";
      if(!plot_endpoints && isViableGState(g_state)) {
        if(!no_links) {unary_label_TEX_ss << "}";}
        else if(no_doc && !no_hyperlinks) {unary_label_TEX_ss << "}";}
      }
      unary_label_TEX_ss << "}," << endl;
      unary_label_TEX_ss << "zlabel style={at={(axis cs:0,0,1)},anchor=north west,below=0.5cm,right=0.5cm}," << endl;
    }
    // tikzpic_settings_TEX starts here
    tikzpic_settings_TEX_ss << "xmin=0," << endl;
    tikzpic_settings_TEX_ss << "xmax=1," << endl;
    if(dimension == 2) {
      tikzpic_settings_TEX_ss << "xtick={1,0.8,0.6,0.4,0.2,0}," << endl;
      tikzpic_settings_TEX_ss << "axis x line*=bottom," << endl;
    } else {  // dimension==3
      tikzpic_settings_TEX_ss << "ymin=0," << endl;
      tikzpic_settings_TEX_ss << "ymax=1," << endl;
      tikzpic_settings_TEX_ss << "zmin=0," << endl;
      tikzpic_settings_TEX_ss << "zmax=1," << endl;
      tikzpic_settings_TEX_ss << "ticks=none," << endl;
    }
    tikzpic_settings_TEX_ss << common_settings_TEX_ss.str();

    ////////////////////////////////////////////////////////////////////////////
    // END Tikz pic settings
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // START Colorbar settings
    ////////////////////////////////////////////////////////////////////////////

    // won't enter if dimension==2, colorbar automatically turned off
    // start colorbar
    // http://tex.stackexchange.com/questions/73025/how-to-change-label-and-ticks-of-a-pgfplots-colorbar
    if(display_color_gradient) {
      if(include_color_bar) {
        tikzpic_settings_TEX_ss << "colorbar," << endl;
        tikzpic_settings_TEX_ss << "colorbar style={" << endl;
        if(m_formation_energy_hull) {
          tikzpic_settings_TEX_ss << "ylabel=formation enthalpy (meV/atom)," << endl;
        } else {
          tikzpic_settings_TEX_ss << "ylabel=entropic temperature (K)," << endl;
        }
        tikzpic_settings_TEX_ss << "ylabel style={font=\\LARGE},";
        // ytick={18,20,25,...,45}
        tikzpic_settings_TEX_ss << "yticklabel style={font=\\LARGE,/pgf/number format/fixed,/pgf/number format/precision=5}," << endl;
        tikzpic_settings_TEX_ss << "yticklabel shift=6pt," << endl;
        tikzpic_settings_TEX_ss << "scaled y ticks=false," << endl;
        tikzpic_settings_TEX_ss << "}," << endl;
      }
      // end colorbar
      tikzpic_settings_TEX_ss << "colormap={mymap}{" << color_map << "}," << endl;  // https://www.sharelatex.com/learn/Pgfplots_package
      // tikzpic_settings_TEX_ss << "colorbar, colormap/jet," << endl;
    }
    tikzpic_settings_TEX_ss << "]" << endl;

    ////////////////////////////////////////////////////////////////////////////
    // END Colorbar settings
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // START Plotting everything on the hull (facet lines, colors, etc.)
    ////////////////////////////////////////////////////////////////////////////

    // for 2d, we go through points2d (in order by stoichiometry), otherwise, we
    // go through planes (order doesn't matter)
    if(dimension == 2) {
      // we use vertices vs. hull_points for facets because vertices
      // contain artificial end points for plotting

      tikzpic_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_FACETS,display_color_gradient);
      for (uint i = 0; i < hull_points.size(); i++) {tikzpic_TEX_ss << addPointContentLaTeX(m_points[hull_points[i]], true, true);}
      tikzpic_TEX_ss << "};" << endl;

      // we plot hullpoints for points on hull ONLY (not lines)
      tikzpic_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_POINTS,display_color_gradient);
      for (uint i = 0; i < hull_points.size(); i++) {
        const ChullPoint point=m_points[hull_points[i]];
        if(!point.m_has_entry) {continue;}
        if(!plot_endpoints && point.isUnary()) {continue;}
        tikzpic_TEX_ss << addPointContentLaTeX(point, false, true);
      }
      tikzpic_TEX_ss << "};" << endl;

      // header for points off hull
      if(plot_off_hull) {_points_data_ss << addHeaderStringLaTeX(ADDPLOT_MODE_OFF_HULL_POINTS,display_color_gradient);}
    } else {  // dimension==3
      // add in endpoints first, if desired
      if(plot_endpoints) {
        for(uint i=0;i<dimension;i++) {
          g_state=getUnaryGState(i);
          if(g_state>m_points.size()-1){continue;}
          const ChullPoint& point = m_points[g_state];
          if(!point.m_has_entry) {continue;}
          convex_hull_vertices_TEX_ss << addPointContentLaTeX(point, false, true);
        }
      }

      //////////////////////////////////////////////////////////////////////////
      // START 3D Heat maps and facet lines
      //////////////////////////////////////////////////////////////////////////

      // this option allows for overlapping facet lines (may or may not be desired)
      if(draw_all_facet_lines) {
        for (uint i = 0; i < m_i_facets.size(); i++) {
          const ChullFacet& facet=m_facets[m_i_facets[i]];
          if(facet.m_is_artificial){continue;}
          if(facet.m_is_vertical) {
            if(LDEBUG) {cerr << soliloquy << " NOT plane: " << abs(facet.m_normal[facet.m_normal.urows]) << endl;}
          }else{
            if(LDEBUG) {cerr << soliloquy << " plane: " << abs(facet.m_normal[facet.m_normal.urows]) << endl;}
            num_horizontal_planes++;
          }
          chull_points = facet.getCHIndices();
          chull_points.push_back(chull_points[0]);  // that way we get full facet
          for(uint j=0;j<chull_points.size();j++) {
            const ChullPoint& point = m_points[chull_points[j]];
            // keep first coord
            if(j == 0) {
              // convex hull facets color
              heat_map_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HEAT_MAPS,display_color_gradient);
              // convex hull facets (lines)
              convex_hull_facets_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_FACETS,display_color_gradient);
              // thick white line for contrast
              convex_hull_facets_drop_shadow_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_FACETSDROP_SHADOWS,display_color_gradient);
            }
            convex_hull_facets_TEX_ss << addPointContentLaTeX(point, true, true);
            convex_hull_facets_drop_shadow_TEX_ss << addPointContentLaTeX(point, true, true);
            if(j!=chull_points.size()-1) {  // heatmap doesn't need first coord repeated
              heat_map_TEX_ss << addPointContentLaTeX(point, true, true);
            }
          }
          // end line for connecting facet lines
          convex_hull_facets_TEX_ss << "};" << endl;
          convex_hull_facets_drop_shadow_TEX_ss << "};" << endl;
          heat_map_TEX_ss << "};" << endl;
        }
      } else {
        // no choice but to go through planes twice, once for
        // heatmap, the other for facet lines/drop shadows

        // heatmap
        if(show_heat_map) {
          for (uint i = 0; i < m_i_facets.size(); i++) {
            const ChullFacet& facet=m_facets[m_i_facets[i]];
            if(facet.m_is_artificial){continue;}
            if(facet.m_is_vertical) {
              if(LDEBUG) {cerr << soliloquy << " NOT plane: " << abs(facet.m_normal[facet.m_normal.urows]) << endl;}
            }else{
              if(LDEBUG) {cerr << soliloquy << " plane: " << abs(facet.m_normal[facet.m_normal.urows]) << endl;}
              num_horizontal_planes++;
            }
            chull_points = facet.getCHIndices();
            for (uint j = 0; j < chull_points.size(); j++) {
              const ChullPoint& point = m_points[chull_points[j]];
              // convex hull facets color
              if(j == 0) {heat_map_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HEAT_MAPS,display_color_gradient);}
              heat_map_TEX_ss << addPointContentLaTeX(point, true, true);
            }
            heat_map_TEX_ss << "};" << endl;
          }
        }
        // save time by not saving WHOLE chullPoints, just compositional part of
        // xvector for facet lines
        //vector<vector<xvector<double> > > facet_lines, facet_lines_dropshadow;
        //fix UNWANTEDFACETLINE to check indices, not actual coords
        vector<vector<uint> > facet_lines, facet_lines_dropshadow;
        for (uint i = 0; i < m_i_facets.size(); i++) {
          const ChullFacet& facet=m_facets[m_i_facets[i]];
          if(facet.m_is_artificial){continue;}
          if(facet.m_is_vertical) {
            if(LDEBUG) {cerr << soliloquy << " NOT plane: " << abs(facet.m_normal[facet.m_normal.urows]) << endl;}
          }else{
            if(LDEBUG) {cerr << soliloquy << " plane: " << abs(facet.m_normal[facet.m_normal.urows]) << endl;}
            num_horizontal_planes++;
          }
          chull_points = facet.getCHIndices();
          chull_points.push_back(chull_points[0]);  // that way we get full facet
          if(LDEBUG) {cerr << soliloquy << " looking for all unwanted facets" << endl;}
          for (uint l = 0; l < chull_points.size() - 1; l++) {
            if(LDEBUG) {cerr << soliloquy << " looking at point l=" << l << " and l=" << l + 1 << endl;}
            if(!unwantedFacetLine(chull_points[l], chull_points[l+1], facet_lines, true)) {
              if(LDEBUG) {cerr << soliloquy << " plotting point l=" << l << " and l=" << l + 1 << endl;}
              // convex hull facets (lines)
              convex_hull_facets_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_FACETS,display_color_gradient);
              for (uint j = 0; j < 2; j++) {
                const ChullPoint& point = m_points[chull_points[l+j]];
                convex_hull_facets_TEX_ss << addPointContentLaTeX(point, true, true);
              }
              // end line for connecting facet lines
              convex_hull_facets_TEX_ss << "};" << endl;
            } else {
              if(LDEBUG) {
                cerr << soliloquy << " skipping l=" << l << " and l=" << l + 1 << endl;
                cerr << soliloquy << " l=" << l << " is " << m_points[chull_points[l]].m_coords << endl;
                cerr << soliloquy << " l=" << l+1 << " is " << m_points[chull_points[l+1]].m_coords << endl;
              }
            }
            if(hull_drop_shadow) {
              if(!unwantedFacetLine(chull_points[l], chull_points[l+1], facet_lines_dropshadow, false)){
                if(LDEBUG) {cerr << soliloquy << " plotting drop shadow l=" << l << " and l=" << l + 1 << endl;}
                // thick white line for contrast
                convex_hull_facets_drop_shadow_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_FACETSDROP_SHADOWS,display_color_gradient);
                for (uint j = 0; j < 2; j++) {
                  const ChullPoint& point = m_points[chull_points[l+j]];
                  convex_hull_facets_drop_shadow_TEX_ss << addPointContentLaTeX(point, true, true);
                }
                // end line for connecting facet lines
                convex_hull_facets_drop_shadow_TEX_ss << "};" << endl;
              } else {
                if(LDEBUG) {
                  cerr << soliloquy << " skipping drop shadow l=" << l << " and l=" << l + 1 << endl;
                  cerr << soliloquy << " l=" << l << " is " << m_points[chull_points[l]].m_coords << endl;
                  cerr << soliloquy << " l=" << l+1 << " is " << m_points[chull_points[l+1]].m_coords << endl;
                }
              }
            }
          }
        }
      }

      //////////////////////////////////////////////////////////////////////////
      // END 3D Heat maps and facet lines
      //////////////////////////////////////////////////////////////////////////

      // hullPoints only, so they don't repeat
      convex_hull_vertices_TEX_ss << addHeaderStringLaTeX(ADDPLOT_MODE_HULL_POINTS,display_color_gradient);
      for (uint i = 0; i < hull_points.size(); i++) {
        const ChullPoint& point = m_points[hull_points[i]];
        if(!point.m_has_entry) {continue;}
        if(!plot_endpoints && point.isUnary()) {continue;}
        convex_hull_vertices_TEX_ss << addPointContentLaTeX(point, false, true);
      }
      convex_hull_vertices_TEX_ss << "};" << endl;

      // big merge
      // white lines first, then black
      if(hull_drop_shadow) {tikzpic_TEX_ss << convex_hull_facets_drop_shadow_TEX_ss.str();}
      tikzpic_TEX_ss << convex_hull_facets_TEX_ss.str();
      tikzpic_TEX_ss << convex_hull_vertices_TEX_ss.str();
      convex_hull_facets_TEX_ss.str("");
      convex_hull_vertices_TEX_ss.str("");
      convex_hull_facets_drop_shadow_TEX_ss.str("");

      // points off hull
      if(plot_off_hull) {_points_data_ss << addHeaderStringLaTeX(ADDPLOT_MODE_OFF_HULL_POINTS,display_color_gradient);}
    }

    ////////////////////////////////////////////////////////////////////////////
    // END Plotting everything on the hull (facet lines, colors, etc.)
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    // START Plotting off hull points
    ////////////////////////////////////////////////////////////////////////////

    if(plot_off_hull || !no_labels || !no_links || no_doc) {
      for(uint i=0;i<plot_points.size();i++){
        const ChullPoint& point=m_points[plot_points[i]];
        const aflowlib::_aflowlib_entry& entry = point.m_entry;
        // get coords for table
        if(plot_off_hull) {
          if(!point.m_is_on_hull) {  // we already plotted these points
            points_data_ss << addPointContentLaTeX(point, false, false);
          }
        }
        if(!plot_off_hull && !point.m_is_on_hull) {continue;}

        //////////////////////////////////////////////////////////////////////
        // START Creating clickable links at points
        //////////////////////////////////////////////////////////////////////

        if(!no_links || (no_doc && !no_hyperlinks)) {
          node_option_ss << "opacity=0.0";// get node option
          node_position_ss << getNodeCoordPosition(point); // get node position
          // get node content
          node_content_ss << "\\tiny";
          node_content_ss << "{";
          if(no_doc && !no_hyperlinks) {node_content_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << entry.auid << "}";}
          else {
            uint i_coord_group;
            if(getCoordGroupIndex(point,i_coord_group)){
              uint ref_state=m_coord_groups[i_coord_group].m_ref_state;
              if(isViablePoint(ref_state)){
                node_content_ss << "\\hyperref[" << input << "_" << m_points[ref_state].m_entry.auid << "]";  // for hyperref to right part of document
              }
            }
          }
          node_content_ss << "{O}";
          node_content_ss << "}";
          labels_data_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss); // create node
        }

        //////////////////////////////////////////////////////////////////////
        // END Creating clickable links at points
        //////////////////////////////////////////////////////////////////////

        // now we create labels
        // do not create another node for unaries unless metalabels or
        // protolables
        string compound_label;
        if(!no_labels && !(!labels_off_hull && !point.m_is_on_hull) && !(point.isUnary() && !(meta_labels || prototype_labels))) {
          ////////////////////////////////////////////////////////////////////
          // START Meta-labels (lots of info)
          ////////////////////////////////////////////////////////////////////

          if(meta_labels) {
            // no node option

            // get node position
            node_position_ss << getNodeCoordPosition(point);

            // get node content
            if(dimension == 3 && entry.vspecies.size() == 3) {node_content_ss << "\\color{" << ternary_label_color << "}";}

            node_content_ss << "\\tiny{";
            node_content_ss << "\\shortstack{";
            compound_label = prettyPrintCompound(point,plot_reduce_composition,true,_latex_);  // don't print prototype if not
            node_content_ss << compound_label;
            // equal to compound
            output_name=prettyPrintPrototype(point,false);  // only one backslash needed
            if(compound_label != output_name) {
              node_content_ss << "::";
              node_content_ss << output_name;
            }
            // shortstack newline
            node_content_ss << "\\\\";
            // enthalpy of formation, row 4
            // no need for precision for next few columns, leave it same way
            // as received from AFLOW
            num_ss << chull::Hf_atom(point,_m_);
            node_content_ss << "$H_{\\mathrm{F}}$=" << num_ss.str() << " meV/atom";
            num_ss.str("");
            // shortstack newline
            node_content_ss << "\\\\";
            // entropic temperature, row 5
            num_ss << chull::Ts(point);
            node_content_ss << "$T_{\\mathrm{S}}$=" << num_ss.str() << " K";
            num_ss.str("");
            // dist_2_hull, row 6
            if(!point.isGState()) {
              // shortstack newline
              node_content_ss << "\\\\";
              if(m_formation_energy_hull) {
                node_content_ss << "$\\Delta H_{\\mathrm{F}}$=" << aurostd::utype2string(chull::dist2Hull(point,_m_),CHULL_PRECISION) << " meV/atom";
              } else {
                node_content_ss << "$\\Delta T_{\\mathrm{S}}$=" << aurostd::utype2string(chull::dist2Hull(point),CHULL_PRECISION) << " K";
              }
            }
            node_content_ss << "}";
            node_content_ss << "}";
            // create node
            labels_data_ss << nodeCreator(node_option_ss, node_position_ss,node_content_ss);

            //////////////////////////////////////////////////////////////////
            // END Meta-labels (lots of info)
            //////////////////////////////////////////////////////////////////

          } else {  // no metadata
            // special case
            // create two nodes, one with compound name below ground state
            // node, another with prototype above each node

            //////////////////////////////////////////////////////////////////
            // START Special case labels (2D with prototypes)
            //////////////////////////////////////////////////////////////////

            if(dimension == 2 && !plot_labels && prototype_labels && rotate_labels) {
              if(point.m_is_g_state && !point.isUnary()) {
                // get node option
                node_option_ss << "rotate=90,anchor=" << (m_formation_energy_hull?"east":"west");
                // get node position
                node_position_ss << getNodeCoordPosition(point);
                // get node content
                if(image_only) {node_content_ss << "\\large{";}
                else {node_content_ss << "\\footnotesize{";}
                if(bold_labels/* && !helvetica_font*/) {node_content_ss << "\\textbf{";}
                if(!m_formation_energy_hull){node_content_ss << "~~";}   //pre - 1
                node_content_ss << prettyPrintCompound(point,plot_reduce_composition,true,_latex_);
                if(m_formation_energy_hull){node_content_ss << "~~";}  //post - 2: only works if we put two?
                if(bold_labels/* && !helvetica_font*/) {node_content_ss << "}";}
                node_content_ss << "}";
                // create node
                labels_data_ss << nodeCreator(node_option_ss, node_position_ss,node_content_ss);
              }
              // prototype label
              // get node option
              if(point.isUnary()) {
                if(entry.vspecies[0] == m_velements[0]) {node_option_ss << "anchor=east";}
                else {node_option_ss << "anchor=west";}
              } else {node_option_ss << "anchor=" << (m_formation_energy_hull?"south,above=0.1cm":"north,below=0.1cm");}
              // get node position
              node_position_ss << getNodeCoordPosition(point);
              // get node content
              node_content_ss << "\\scriptsize{";
              output_name=prettyPrintPrototype(point,false);  // only one backslash needed
              if(point.isUnary() && entry.vspecies[0] == m_velements[1]) {node_content_ss << "~~";}
              node_content_ss << output_name;
              if(point.isUnary() && entry.vspecies[0] == m_velements[0]) {node_content_ss << "~~";}
              // enclose brackets
              node_content_ss << "}";
              // create node
              labels_data_ss << nodeCreator(node_option_ss, node_position_ss,node_content_ss);

              ////////////////////////////////////////////////////////////////
              // END Special case labels (2D with prototypes)
              ////////////////////////////////////////////////////////////////

            } else {  // normal case

              ////////////////////////////////////////////////////////////////
              // START Normal labels
              ////////////////////////////////////////////////////////////////

              // get node option
              if(rotate_labels) {
                if(dimension == 2) {
                  if(!point.isUnary()) {  //deal with unaries later
                    if(point.m_is_g_state) {node_option_ss << "rotate=90,anchor=" << (m_formation_energy_hull?"east":"west");}
                    else {node_option_ss << "anchor=" << (m_formation_energy_hull?"south,above=0.1cm":"north,below=0.1cm");}
                  }
                } else {  // dimension==3
                  // ordered to optimize speed (binaries are bulk, then
                  // ternaries, then unaries)
                  if(entry.vspecies.size() == 2) {
                    // / side of triangle
                    if(entry.vspecies[0] == m_velements[0] && entry.vspecies[1] == m_velements[1]) {
                      node_option_ss << "rotate=-30,anchor=east";
                      // \ side of triangle
                    } else if(entry.vspecies[0] == m_velements[1] && entry.vspecies[1] == m_velements[2]) {
                      node_option_ss << "rotate=30,anchor=west";
                      // _ side of triangle
                    } else if(entry.vspecies[0] == m_velements[0] && entry.vspecies[1] == m_velements[2]) {
                      node_option_ss << "rotate=90,anchor=east";
                    }
                  } else if(entry.vspecies.size() == 3) {
                    if(!show_heat_map) {node_option_ss << "anchor=south,above=0.1cm";}
                  } else if(entry.vspecies.size() == 1) {
                    // bottom two edges of triangle
                    if(entry.vspecies[0] == m_velements[0] || entry.vspecies[0] == m_velements[2]) {
                      node_option_ss << "anchor=north,below=0.1cm";
                      // top of triangle
                    }else{node_option_ss << "anchor=south,above=0.1cm";}
                  }
                }
              }
              if(dimension == 2) {  //deal with unaries separately
                if(point.isUnary()) {
                  if(entry.vspecies[0] == m_velements[0]) {node_option_ss << "anchor=east";}
                  else {node_option_ss << "anchor=west";}
                }
              }
              // get node position
              node_position_ss << getNodeCoordPosition(point);
              // get node content
              if(dimension == 3 && entry.vspecies.size() == 3) {node_content_ss << "\\color{" << ternary_label_color << "}";}
              if(compound_labels && prototype_labels) {
                node_content_ss << "\\scriptsize{";
              } else {
                // 8.5x11 page can only be so big, but IMAGE_ONLY can be as
                // big as it wants to be
                //if(image_only) {
                //    if(helvetica_font) {
                //  node_content_ss
                //      << "\\huge{";  // https://en.wikibooks.org/wiki/LaTeX/Fonts#Arbitrary_font_size
                //    } else {
                //  node_content_ss
                //      << "\\Large{";  // https://en.wikibooks.org/wiki/LaTeX/Fonts#Arbitrary_font_size
                //} else {
                node_content_ss << "\\" << font_size << "{";
              }
              //}
              if(bold_labels/* && !helvetica_font*/) { node_content_ss << "\\textbf{";}
              
              // add space for rotation
              if(rotate_labels) {
                if(dimension == 2) {
                  if(!point.isUnary()){ //handle unaries later
                    if(!m_formation_energy_hull && point.m_is_g_state){node_content_ss << "~";}
                  }
                } else {  // dimension==3
                  if(entry.vspecies.size() == 2) {
                    // \ side of triangle
                    if(entry.vspecies[0] == m_velements[1] && entry.vspecies[1] == m_velements[2]) {
                      node_content_ss << "~";
                    }
                  }
                }
              }
              if(dimension == 2) {
                if(point.isUnary()){  //unaries
                  if(entry.vspecies[0] == m_velements[1]) {node_content_ss << "~";}
                }
              }

              if(compound_labels) {
                compound_label = prettyPrintCompound(point,plot_reduce_composition,true,_latex_);  // don't print prototype if
                node_content_ss << compound_label;
                // equal to compound
              }
              if(prototype_labels) {
                output_name=prettyPrintPrototype(point,false);  // only one backslash needed
                if(compound_labels) {
                  if(compound_label != output_name) {
                    node_content_ss << "::";
                    node_content_ss << output_name;
                  }
                }else{node_content_ss << output_name;}
              }

              if(rotate_labels) {
                if(dimension == 2) {
                  if(!point.isUnary()){ //handle unaries later
                    if(m_formation_energy_hull && point.m_is_g_state){node_content_ss << "~~";} // only works if we put two?
                  }
                } else {  // dimension==3
                  if(entry.vspecies.size() == 2) {
                    // / side of triangle
                    if(entry.vspecies[0] == m_velements[0] && entry.vspecies[1] == m_velements[1]) {
                      node_content_ss << "~~";  // only works if we put two?
                      // _ side of triangle
                    } else if(entry.vspecies[0] == m_velements[0] && entry.vspecies[1] == m_velements[2]) {
                      node_content_ss << "~~";  // only works if we put two?
                    }
                  }
                }
              }
              if(dimension == 2) {
                if(point.isUnary()){ //unaries
                  if(entry.vspecies[0] == m_velements[0]) {node_content_ss << "~~";}
                }
              }

              // enclose brackets
              if(bold_labels/* && !helvetica_font*/) {node_content_ss << "}";}
              node_content_ss << "}";
              // create node
              labels_data_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);

              ////////////////////////////////////////////////////////////////
              // END Normal labels
              ////////////////////////////////////////////////////////////////
            }
          }
        }
      }
      // merge labels data
      if(plot_off_hull && !points_data_ss.str().empty()) {points_data_ss << "};" << endl;}
      if(!points_data_ss.str().empty()) {tikzpic_TEX_ss << _points_data_ss.str() << points_data_ss.str();}
      if(!labels_data_ss.str().empty()) {
        tikzpic_TEX_ss << "\\begin{pgfonlayer}{foreground}" << endl;  // for overlap
        tikzpic_TEX_ss << labels_data_ss.str();
        tikzpic_TEX_ss << "\\end{pgfonlayer}{foreground}" << endl;
      }
    }

    ////////////////////////////////////////////////////////////////////////////
    // END Plotting off hull points
    ////////////////////////////////////////////////////////////////////////////

    if(dimension == 2) {tikzpic_TEX_ss << "\\end{axis}" << endl;}
    else{tikzpic_TEX_ss << "\\end{ternaryaxis}" << endl;}

    ////////////////////////////////////////////////////////////////////////////
    // END Axis
    ////////////////////////////////////////////////////////////////////////////

    if(!no_banner) {
      if(dimension == 2) {
        ////////////////////////////////////////////////////////////////////////
        // START Logo on top left
        ////////////////////////////////////////////////////////////////////////

        //if(XHOST.hostname == "aflowlib.mems.duke.edu" &&
        if(print_aflow_logo) {
          if(image_only) {
            tikzpic_TEX_ss << "\\begin{scope}[remember picture]" << endl;
            if(!small_banner) {
              // get node option
              node_option_ss << "shift={(2.75cm,0.25cm)}";
              // get node position
              node_position_ss << "current bounding box.north west";
            }
          } else {
            tikzpic_TEX_ss << "\\begin{scope}[remember picture,overlay]" << endl;
            if(!small_banner) {
              // get node option
              node_option_ss << "shift={(2cm,0cm)}";
              // get node position
              node_position_ss << "current bounding box.north west";
            }
          }
          if(!small_banner) {
            // get node content
            if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
            node_content_ss << "{\\includegraphics[scale=0.2]{" << aflow_logo_file << "}}";
          }
        } else {
          if(image_only) {
            tikzpic_TEX_ss << "\\begin{scope}[remember picture]" << endl;
            if(!small_banner) {
              // get node option
              node_option_ss << "shift={(3.5cm,0cm)}";
              // get node position
              node_position_ss << "current bounding box.north west";
            }
          } else {
            tikzpic_TEX_ss << "\\begin{scope}[remember picture,overlay]" << endl;
            if(!small_banner) {
              // get node option
              node_option_ss << "shift={(2.5cm,0.25cm)}";
              // get node position
              node_position_ss << "current bounding box.north west";
            }
          }
          if(!small_banner) {
            // get node content
            node_content_ss << "\\shortstack[l]{";
            if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
            node_content_ss << "{\\huge AFLOW V" << string(AFLOW_VERSION) << "}";
            node_content_ss << "\\\\";
            node_content_ss << "{\\normalsize Stefano Curtarolo}}";
          }
        }
        if(!small_banner) {
          // create node
          tikzpic_TEX_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);
        }

        ////////////////////////////////////////////////////////////////////////
        // END Logo on top left
        ////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////
        // START AFLOW.org on top right
        ////////////////////////////////////////////////////////////////////////

        if(image_only) {
          // get node option
          if(!small_banner) {node_option_ss << "shift={(-2cm,-0.75cm)}";}
          else {node_option_ss << "shift={(-2cm,0cm)}";}
          // get node position
          node_position_ss << "current bounding box.north east";
        } else {
          // get node option
          node_option_ss << "shift={(-0.5cm,0.25cm)}";
          // get node position
          node_position_ss << "current bounding box.north east";
        }
        // get node content
        node_content_ss << "\\large";
        node_content_ss << "{\\fontfamily{phv}\\selectfont";
        if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
        node_content_ss << "{" << AFLOWLIB_MATERIALS_SERVER << "}}";
        // create node
        tikzpic_TEX_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);

        ////////////////////////////////////////////////////////////////////////
        // END AFLOW.org on top right
        ////////////////////////////////////////////////////////////////////////

        if(!small_banner) {
          //////////////////////////////////////////////////////////////////////
          // START Count on bottom left
          //////////////////////////////////////////////////////////////////////

          if(image_only) {
            // get node option
            node_option_ss << "shift={(2.5cm,-0.5cm)}";
            // get node position
            node_position_ss << "current bounding box.south west";
          } else {
            // get node option
            node_option_ss << "shift={(1cm,-0.1cm)}";
            // get node position
            node_position_ss << "current bounding box.south west";
          }
          // get node content
          node_content_ss << "Count=" << count_entries;
          // create node
          tikzpic_TEX_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);

          //////////////////////////////////////////////////////////////////////
          // END Count on bottom left
          //////////////////////////////////////////////////////////////////////

          //////////////////////////////////////////////////////////////////////
          // START Date on bottom right
          //////////////////////////////////////////////////////////////////////

          if(image_only) {
            // get node option
            node_option_ss << "shift={(-4.25cm,0.5cm)}";
            // get node position
            node_position_ss << "current bounding box.south east";
          } else {
            // get node option
            node_option_ss << "shift={(-2cm,-0.1cm)}";
            // get node position
            node_position_ss << "current bounding box.south east";
          }
          // get node content
          node_content_ss << "\\today~\\currenttime";
          // create node
          tikzpic_TEX_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);

          //////////////////////////////////////////////////////////////////////
          // END Date on bottom right
          //////////////////////////////////////////////////////////////////////
        }
        tikzpic_TEX_ss << "\\end{scope}" << endl;
      } else {  // dimension==3

        ////////////////////////////////////////////////////////////////////////
        // START Full banner on left (logo,count,date)
        ////////////////////////////////////////////////////////////////////////

        tikzpic_TEX_ss << "\\begin{scope}[remember picture,overlay]" << endl;
        if(!small_banner) {
          if(include_color_bar) {
            if(print_aflow_logo) {
              if(image_only) {
                // get node option
                node_option_ss << "shift={(3.75cm,-2.5cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              } else {
                // get node option
                node_option_ss << "shift={(3.25cm,-1.5cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              }
              // get node content
              node_content_ss << "\\shortstack[l]{";
              if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
              node_content_ss << "{\\includegraphics[scale=0.25]{" << aflow_logo_file << "}}";
            } else {
              if(image_only) {
                // get node option
                node_option_ss << "shift={(4cm,-2.25cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              } else {
                // get node option
                node_option_ss << "shift={(3.25cm,-1.25cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              }
              // get node content
              node_content_ss << "\\shortstack[l]{";
              if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
              node_content_ss << "{\\huge AFLOW V" << string(AFLOW_VERSION) << "}";
              node_content_ss << "\\\\";
              node_content_ss << "{\\normalsize Stefano Curtarolo}";
            }
          } else {
            if(print_aflow_logo) {
              if(image_only) {
                // get node option
                node_option_ss << "shift={(3.25cm,-2.25cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              } else {
                // get node option
                node_option_ss << "shift={(2.25cm,-1.5cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              }
              // get node content
              node_content_ss << "\\shortstack[l]{";
              if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
              node_content_ss << "{\\includegraphics[scale=0.25]{" << aflow_logo_file << "}}";
            } else {
              if(image_only) {
                // get node option
                node_option_ss << "shift={(4cm,-2.25cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              } else {
                // get node option
                node_option_ss << "shift={(2cm,-1.5cm)}";
                // get node position
                node_position_ss << "current bounding box.north west";
              }
              // get node content
              node_content_ss << "\\shortstack[l]{";
              if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
              node_content_ss << "{\\huge AFLOW V" << string(AFLOW_VERSION) << "}";
              node_content_ss << "\\\\";
              node_content_ss << "{\\normalsize Stefano Curtarolo}";
            }
          }
          // get node content
          node_content_ss << "\\\\";
          node_content_ss << "\\\\";
          node_content_ss << "\\large Count=" << count_entries;
          node_content_ss << "\\\\";
          node_content_ss << "\\large \\today~\\currenttime";
          node_content_ss << "}";
          // create node
          tikzpic_TEX_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);
        }
        ////////////////////////////////////////////////////////////////////////
        // END Full banner on top left (logo,count,date)
        ////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////
        // START AFLOW.org on top right
        ////////////////////////////////////////////////////////////////////////

        if(include_color_bar) {
          if(image_only) {
            // get node option
            node_option_ss << "shift={(-2cm,-0.75cm)}";
            // get node position
            node_position_ss << "current bounding box.north east";
          } else {
            // get node option
            node_option_ss << "shift={(-1.5cm,-0.5cm)}";
            // get node position
            node_position_ss << "current bounding box.north east";
          }
        } else {
          if(image_only) {
            // get node option
            node_option_ss << "shift={(-2.5cm,-1.25cm)}";
            // get node position
            node_position_ss << "current bounding box.north east";
          } else {
            // get node option
            node_option_ss << "shift={(-0.25cm,-0.5cm)}";
            // get node position
            node_position_ss << "current bounding box.north east";
          }
        }
        // get node content
        node_content_ss << "\\shortstack[l]{";
        node_content_ss << "{\\large";
        node_content_ss << "{\\fontfamily{phv}\\selectfont";
        if(!no_hyperlinks) {node_content_ss << "\\href{" << AFLOW_WEB << "}";}
        node_content_ss << "{" << AFLOWLIB_MATERIALS_SERVER << "}}";
        node_content_ss << "}";
        node_content_ss << "}";
        // create node
        tikzpic_TEX_ss << nodeCreator(node_option_ss, node_position_ss, node_content_ss);

        ////////////////////////////////////////////////////////////////////////
        // END AFLOW.org on top right
        ////////////////////////////////////////////////////////////////////////

        tikzpic_TEX_ss << "\\end{scope}" << endl;
      }
    }
    tikzpic_TEX_ss << "\\end{tikzpicture}" << endl;
    if(image_only) {tikzpic_TEX_ss << "\\endpgfgraphicnamed" << endl;}
    else {
      tikzpic_TEX_ss << "\\vspace*{\\fill}" << endl;
      tikzpic_TEX_ss << "}" << endl;
      tikzpic_TEX_ss << "\\end{landscape}" << endl;
      if(!no_doc) {tikzpic_TEX_ss << "\\restoregeometry" << endl;}
    }
  } else {
    // make sure to add this in
    doc_header_TEX_ss << "\\usepackage{graphicx}" << endl;
    // contains begin{document}, which needs to go in sooner
    doc_header_TEX_ss << _doc_header_TEX_ss.str();
    _doc_header_TEX_ss.str("");
  }

  // BIG MERGE
  main_TEX_ss << doc_header_TEX_ss.str();
  doc_header_TEX_ss.str("");

  if(!doc_only && (dimension == 2 || dimension == 3)) {
    main_TEX_ss << _tikzpic_settings_TEX_ss.str();
    _tikzpic_settings_TEX_ss.str("");
    main_TEX_ss << unary_label_TEX_ss.str();
    unary_label_TEX_ss.str("");
    main_TEX_ss << tikzpic_settings_TEX_ss.str();
    tikzpic_settings_TEX_ss.str("");
    if(show_heat_map && num_horizontal_planes > 1) {
      main_TEX_ss << heat_map_TEX_ss.str();
      heat_map_TEX_ss.str("");
    }
    main_TEX_ss << tikzpic_TEX_ss.str();
    tikzpic_TEX_ss.str("");
  }

  //////////////////////////////////////////////////////////////////////////////
  // END Image on first page
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // START Report
  //////////////////////////////////////////////////////////////////////////////

  if(!no_doc && !image_only) {
    if(!doc_only) {main_TEX_ss << "\\newpage" << endl;}
    ////////////////////////////////////////////////////////////////////////////
    // START Column header setup
    ////////////////////////////////////////////////////////////////////////////
    main_TEX_ss << "\\newlength{\\headerwidth}" << endl;
    main_TEX_ss << "\\setlength{\\headerwidth}{\\textwidth}" << endl;
    main_TEX_ss << "\\newsavebox{\\aflowLogo}" << endl;
    main_TEX_ss << "\\begin{lrbox}{\\aflowLogo}" << endl;
    main_TEX_ss << "\\begin{tabu}{X[1,l,m]X[1,r,m]}" << endl;
    if(!no_hyperlinks) {main_TEX_ss << "\\href{" << AFLOW_WEB << "}";}
    //if(XHOST.hostname == "aflowlib.mems.duke.edu" &&
    if(print_aflow_logo) {
      main_TEX_ss << "{\\includegraphics[scale=0.25]{" << aflow_logo_file << "}}";
    } else {
      main_TEX_ss << "{\\large AFLOW V" << string(AFLOW_VERSION) << "}";
      main_TEX_ss << " \\large{-- Stefano Curtarolo}";
    }
    main_TEX_ss << " & ";
    //{\\large Materials Snapshot}" << endl;
    //include small redundant header - START
    main_TEX_ss << "\\begin{tabular}[x]{@{}r@{}}";
    main_TEX_ss << "\\large Materials Snapshot";
    main_TEX_ss << "\\\\";
    main_TEX_ss << "\\large Count=" << count_entries;
    main_TEX_ss << "\\\\\\large \\today~\\currenttime";
    main_TEX_ss << "\\end{tabular}" << endl;
    main_TEX_ss << "\\end{tabu}" << endl;
    //include small redundant header - END
    main_TEX_ss << "\\end{lrbox}" << endl;
    main_TEX_ss << "\\newsavebox{\\myheader}" << endl;
    main_TEX_ss << "\\begin{lrbox}{\\myheader}" << endl;
    if(compounds_column_report) {
      main_TEX_ss << "\\begin{tabu}{|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|}" << endl;
      main_TEX_ss << "\\toprule" << endl;
      main_TEX_ss << aurostd::PaddedPOST("\\rowcolor{white}", 30);
      main_TEX_ss << aurostd::PaddedPOST("{\\small Compound}", 80);
      main_TEX_ss << " & ";
    } else {
      main_TEX_ss << "\\begin{tabu}{|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|X[1,c,m]|}" << endl;
      main_TEX_ss << "\\toprule" << endl;
      main_TEX_ss << aurostd::PaddedPOST("\\rowcolor{white}", 30);
    }
    main_TEX_ss << aurostd::PaddedPOST("{\\small prototype}", 80);
    main_TEX_ss << " & ";
    main_TEX_ss << aurostd::PaddedPOST("{\\small $SG_{\\mathrm{pre}}$}", 30);
    main_TEX_ss << " & ";
    main_TEX_ss << aurostd::PaddedPOST("{\\small $SG_{\\mathrm{post}}$}", 30);
    main_TEX_ss << " & ";
    main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small spin $\\left(\\mu_{\\mathrm{B}}\\mathrm{/atom}\\right)$}", 30);
    main_TEX_ss << " & ";
    main_TEX_ss << aurostd::PaddedPOST("{\\small $H_{\\mathrm{F}}$ (meV/atom)}", 30);
    main_TEX_ss << " & ";
    main_TEX_ss << aurostd::PaddedPOST("{\\small $T_{\\mathrm{S}}$ (K)}", 30);
    main_TEX_ss << " & ";
    if(m_formation_energy_hull) {main_TEX_ss << aurostd::PaddedPOST("{\\small $\\Delta H_{\\mathrm{F}}$ (meV/atom)}", 30);}
    else{main_TEX_ss << aurostd::PaddedPOST("{\\small $\\Delta T_{\\mathrm{S}}$ (K)}", 30);}
    main_TEX_ss << " \\\\";
    main_TEX_ss << endl;
    main_TEX_ss << "\\midrule" << endl;
    main_TEX_ss << "\\end{tabu}" << endl;
    main_TEX_ss << "\\end{lrbox}" << endl;
    // fancypagestyle1 for first page of report
    main_TEX_ss << "\\fancypagestyle{style1}{" << endl;
    main_TEX_ss << "\\fancyhf{}" << endl;
    main_TEX_ss << "\\fancyhead[C]{\\usebox{\\aflowLogo}}" << endl;
    main_TEX_ss << "\\fancyfoot[C]{\\thepage}" << endl;
    main_TEX_ss << "\\renewcommand{\\headrulewidth}{0pt}     \% size of header line" << endl;
    main_TEX_ss << "\\renewcommand{\\footrulewidth}{0pt}     \% size of header line" << endl;
    main_TEX_ss << "}" << endl;
    // fancypagestyle1 for beyond first page
    main_TEX_ss << "\\fancypagestyle{style2}{" << endl;
    main_TEX_ss << "\\fancyhf{}" << endl;
    main_TEX_ss << "\\fancyhead[C]{\\usebox{\\myheader}}" << endl;
    main_TEX_ss << "\\fancyfoot[C]{\\thepage}" << endl;
    main_TEX_ss << "\\renewcommand{\\headrulewidth}{0pt}     \% size of header line" << endl;
    main_TEX_ss << "\\renewcommand{\\footrulewidth}{0pt}     \% size of header line" << endl;
    main_TEX_ss << "}" << endl;

    main_TEX_ss << "\\thispagestyle{style1}" << endl;
    main_TEX_ss << "\\pagestyle{style2}" << endl;

    //citation
    main_TEX_ss << "\\noindent Use of this data welcomes reference to the following publication:" << endl;
    main_TEX_ss << "\\begin{quote}" << endl;
    main_TEX_ss << CHULL_AUTHORS << ", ";
    main_TEX_ss << "\\textit{" << CHULL_TITLE << "}, ";
    main_TEX_ss << CHULL_JOURNAL << "." << endl;
    main_TEX_ss << "\\end{quote}" << endl;

    ////////////////////////////////////////////////////////////////////////////
    // END Column header setup
    ////////////////////////////////////////////////////////////////////////////

    uint counter;
    bool putColumnHeader = true;  // only put it for the first reported stoich
    vector<vector<uint> > equilibrium_phases;
    vector<vector<ChullPoint> > equilibrium_phases_CP;
    vector<ChullPoint> dummyDCP;
    vector<string> equilibrium_phases_vs, _equilibrium_phases_vs;
    vector<uint> decomposition_phases;
    xvector<double> decomposition_coefficients;
    vector<string> decompositionCoefPhase_vs;  // combined coef * phase
    string misc;
    uint i_phase;

    ////////////////////////////////////////////////////////////////////////////
    // START Stoichiometry group loop
    ////////////////////////////////////////////////////////////////////////////

    for (uint i = 0; i < m_coord_groups.size(); i++) {
      counter = 0;

      //////////////////////////////////////////////////////////////////////////
      // START Stoichiometry group points loop
      //////////////////////////////////////////////////////////////////////////

      for (uint j = 0; j < m_coord_groups[i].m_points.size(); j++) {
        ////////////////////////////////////////////////////////////////////////
        // START Entries filter
        ////////////////////////////////////////////////////////////////////////

        const ChullPoint& point = m_points[m_coord_groups[i].m_points[j]];
        if(!point.m_has_entry) {continue;}
        const aflowlib::_aflowlib_entry& entry = point.m_entry;

        ////////////////////////////////////////////////////////////////////////
        // END Entries filter
        ////////////////////////////////////////////////////////////////////////

        if(!counter) {
          //////////////////////////////////////////////////////////////////////
          // START Concentration label
          //////////////////////////////////////////////////////////////////////

          if(composition_header_report) {
            for (uint j = 0; j < (uint)point.m_elements_present.rows; j++) {
              if(point.m_elements_present[j]==1){
                _report_data_ss << m_velements[j] << "$_{" << aurostd::utype2string(point.s_coords[j],COEF_PRECISION) << "}$";
              }
            }
          } else {_report_data_ss << prettyPrintCompound(entry,true,true,_latex_);}

          //////////////////////////////////////////////////////////////////////
          // START Concentration label
          //////////////////////////////////////////////////////////////////////

          //////////////////////////////////////////////////////////////////////
          // START Gathering info about equilibrium phases / decomposition
          // reaction
          //////////////////////////////////////////////////////////////////////

          if(m_coord_groups[i].m_is_on_hull) {

            const vector<vector<uint> >& equilibrium_phases=m_coord_groups[i].m_equilibrium_phases;
            //nice fast way to toggle equivalent_phases on/off
            //if(include_equilibrium_phases) {equilibrium_phases = m_coord_groups[i].m_equilibrium_phases;}
            //else {equilibrium_phases.clear();}

            if(include_equilibrium_phases && !equilibrium_phases.empty()) {
              for (uint k = 0; k < equilibrium_phases.size(); k++) {
                for (uint l = 0; l < equilibrium_phases[k].size(); l++) {
                  i_phase=artificialMap(equilibrium_phases[k][l]);
                  const ChullPoint& eq_phase=m_points[i_phase];
                  if(!eq_phase.m_has_entry) {
                    // we need to adjust for missing unaries
                    // look for coords
                    output_name=aurostd::joinWDelimiter(alloyToElements(eq_phase),"");
                  } else {
                    const aflowlib::_aflowlib_entry& equation_entry = eq_phase.m_entry;

                    output_name=prettyPrintCompound(equation_entry,true,true,_latex_);
                    // do not hyperlink current point (pointless)
                    if(!aurostd::identical(point.getTruncatedGenCoords(), eq_phase.getTruncatedGenCoords(), ZERO_TOL)) {
                      if(!no_links) {
                        misc_ss << "\\hyperref[" << input << "_" << equation_entry.auid << "]{";
                        misc_ss << output_name;
                        misc_ss << "}";
                        output_name = misc_ss.str();
                        misc_ss.str("");
                      }
                    }
                  }
                  _equilibrium_phases_vs.push_back(output_name);
                }
                if(m_coord_groups[i].getDim() > 6) {equilibrium_phases_vs.push_back(aurostd::joinWDelimiter(_equilibrium_phases_vs, " -- "));}  // that way, we don't run off the line
                else {equilibrium_phases_vs.push_back(aurostd::joinWDelimiter(_equilibrium_phases_vs, "--"));}
                _equilibrium_phases_vs.clear();
              }
              equilibrium_phases_TEX_ss << aurostd::joinWDelimiter(equilibrium_phases_vs, ", ", " and ", ", and ");
              equilibrium_phases_vs.clear();
              equilibrium_phases_CP.clear();
              //get header
              //misc = prettyPrintCompound(entry,true,true,_latex_);
              equilibrium_phases_header_TEX_ss << m_coord_groups[i].getDim() << "-phase equilibria";
              //equilibrium_phases_header_TEX_ss << " with " << misc;
              equilibrium_phases_header_TEX_ss << ":";
            }
          } else {
            // decomposition equation
            const vector<uint>& decomposition_phases = m_coord_groups[i].m_decomp_phases;
            const xvector<double>& decomposition_coefficients = m_coord_groups[i].m_decomp_coefs;
            if(!decomposition_phases.empty() && scalar_product(decomposition_coefficients, decomposition_coefficients) >= ZERO_TOL) {
              if(decomposition_phases.size() != (uint)decomposition_coefficients.rows-1) {
                throw CHullLogicError(soliloquy,"Size of decomposition phases != size of decomposition coefficients for coordgroup["+aurostd::utype2string(i)+"]");
              }
              // write out decomposition equation
              reaction_chem_eq_TEX_ss << prettyPrintCompound(entry,true,true,_latex_);
              reaction_chem_eq_TEX_ss << " $\\to$ ";
              for (uint k = 0; k < decomposition_phases.size(); k++) {
                if(abs(decomposition_coefficients[k+1]) < ZERO_TOL) {continue;}
                i_phase=artificialMap(decomposition_phases[k]);
                const ChullPoint& dc_phase=m_points[i_phase];
                if(!dc_phase.m_has_entry) {
                  // we need to adjust for missing unaries
                  // look for coords
                  output_name=aurostd::joinWDelimiter(alloyToElements(dc_phase),"");
                } else {
                  const aflowlib::_aflowlib_entry& equation_entry = dc_phase.m_entry;
                  output_name=prettyPrintCompound(equation_entry,true,true,_latex_);
                  if(!no_links) {
                    misc_ss << "\\hyperref[" << input << "_" << equation_entry.auid << "]{";
                    misc_ss << output_name;
                    misc_ss << "}";
                    output_name = misc_ss.str();
                    misc_ss.str("");
                  }
                }
                misc_ss << aurostd::utype2string(abs(decomposition_coefficients[k+1]),COEF_PRECISION) << "~";
                misc_ss << output_name;
                decompositionCoefPhase_vs.push_back(misc_ss.str());
                misc_ss.str("");
              }
              reaction_chem_eq_TEX_ss << aurostd::joinWDelimiter(decompositionCoefPhase_vs, " + ");
              decompositionCoefPhase_vs.clear();
            }
          }

          //////////////////////////////////////////////////////////////////////
          // END Gathering info about equilibrium phases / decomposition
          // reaction
          //////////////////////////////////////////////////////////////////////
        }

        ////////////////////////////////////////////////////////////////////////
        // START Row properties set up
        ////////////////////////////////////////////////////////////////////////

        sg_tokens=entry.vsg;
        //if(!entry.sg.empty()) {
        //  aurostd::string2tokens(entry.sg, sg_tokens, ",");
          //  if(sg_tokens.size() != 3) {
          //    continue;
          //  }
        //}
        if(point.isGState()) {report_data_ss << aurostd::PaddedPOST("\\rowcolor{green!85!blue} ", 30);} //red!25
        else if(point.m_is_sym_equivalent_g_state) {report_data_ss << aurostd::PaddedPOST("\\rowcolor{orange!85} ", 30);}  // odd should be white
        else if(counter % 2) {report_data_ss << aurostd::PaddedPOST("\\rowcolor{white} ", 30);}  // odd should be white
        else {report_data_ss << aurostd::PaddedPOST("\\rowcolor{gray!25} ", 30);}
        misc = "";
        if(compounds_column_report) {
          misc=prettyPrintCompound(entry,false,true,_latex_);
          if(!no_hyperlinks) {
            misc_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << entry.auid << "}{";
            misc_ss << misc;
            misc_ss << "}";
            //if(point.isGState()){misc_ss << "$^{**}$";}
            report_data_ss << aurostd::PaddedPOST(misc_ss.str(), 100);
            misc_ss.str("");
          } else{report_data_ss << aurostd::PaddedPOST(misc, 30);}
          report_data_ss << " & ";
        }
        misc = "";
        if(!entry.prototype.empty()) {
          misc=prettyPrintPrototype(entry,false);
          if(!no_hyperlinks) {
            misc_ss << "\\href{" << ENTRY_PAGE_URL_PREFIX << entry.auid << "}{";
            misc_ss << misc;
            misc_ss << "}";
            //if(point.isGState()){misc_ss << "$^{**}$";}
            report_data_ss << aurostd::PaddedPOST(misc_ss.str(), 100);
            misc_ss.str("");
          } else { report_data_ss << aurostd::PaddedPOST(misc, 30);}
        } else { report_data_ss << aurostd::PaddedPOST(" ", 30);}

        ////////////////////////////////////////////////////////////////////////
        // END Row properties set up
        ////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////
        // START Entry properties output
        ////////////////////////////////////////////////////////////////////////

        misc = "";
        report_data_ss << " & ";
        if(!entry.sg.empty()) {
          // pre
          misc=fixStringLatex(sg_tokens.front(),false,true);
          //put in math mode
          report_data_ss << aurostd::PaddedPOST("$" + misc + "$", 30);
          report_data_ss << " & ";
          // post
          misc=fixStringLatex(sg_tokens.back(),false,true);
          //put in math mode
          report_data_ss << aurostd::PaddedPOST("$" + misc + "$", 30);
        } else {
          report_data_ss << aurostd::PaddedPOST(" ", 30);
          report_data_ss << " & ";
          report_data_ss << aurostd::PaddedPOST(" ", 30);
        }
        report_data_ss << " & ";
        report_data_ss << aurostd::PaddedPOST(aurostd::utype2string(entry.spin_atom,2,true,ROUNDOFF_TOL,FIXED_STREAM), 30);
        report_data_ss << " & ";
        report_data_ss << aurostd::PaddedPOST(aurostd::utype2string(chull::Hf_atom(entry,_m_),0,true,ROUNDOFF_TOL,FIXED_STREAM), 30);
        report_data_ss << " & ";
        report_data_ss << aurostd::PaddedPOST(aurostd::utype2string(chull::Ts(entry),0,true,ROUNDOFF_TOL,FIXED_STREAM), 30);
        report_data_ss << " & ";
        if(m_formation_energy_hull) {report_data_ss << aurostd::PaddedPOST(aurostd::utype2string(chull::dist2Hull(point,_m_),0,true,ROUNDOFF_TOL,FIXED_STREAM), 30);}
        else {report_data_ss << aurostd::PaddedPOST(aurostd::utype2string(chull::dist2Hull(point),0,true,ROUNDOFF_TOL,FIXED_STREAM), 30);}
        report_data_ss << " \\\\" << endl;
        counter++;
      }

      //////////////////////////////////////////////////////////////////////////
      // END Entry properties output
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // START Entry table creation
      //////////////////////////////////////////////////////////////////////////

      if(!report_data_ss.str().empty()) {
        if(compounds_column_report) {
          main_TEX_ss << "{\\fontsize{6}{9}\\selectfont" << endl;
          main_TEX_ss << "\\begin{longtabu}{|X[1,l,m]|X[1,l,m]|X[1,l,m]|X[1,l,m]|X[1,r,m]|X[1,r,m]|X[1,r,m]|X[1,r,m]|}" << endl;
          if(putColumnHeader) {
            main_TEX_ss << "\\toprule" << endl;
            main_TEX_ss << aurostd::PaddedPOST("\\rowcolor{white}", 30);
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small Compound}",80);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small prototype}",30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $SG_{\\mathrm{pre}}$}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $SG_{\\mathrm{post}}$}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small spin $\\left(\\mu_{\\mathrm{B}}\\mathrm{/atom}\\right)$}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $H_{\\mathrm{F}}$ (meV/atom)}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $T_{\\mathrm{S}}$ (K)}", 30);
            main_TEX_ss << " & ";
            if(m_formation_energy_hull) {
              main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $\\Delta H_{\\mathrm{F}}$ (meV/atom)}", 30);
            } else {
              main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $\\Delta T_{\\mathrm{S}}$ (K)}", 30);
            }
            main_TEX_ss << " \\\\";
            main_TEX_ss << endl;
            main_TEX_ss << "\\midrule" << endl;
          }
          putColumnHeader = false;
          if(!no_links && isViablePoint(m_coord_groups[i].m_ref_state)) {
            uint ref_state=m_coord_groups[i].m_ref_state;
            main_TEX_ss << "\\multicolumn{8}{l}{\\phantomsection\\label{"+input + "_" + m_points[ref_state].m_entry.auid + "}} \\\\[0.1cm]" << endl;
          } else {main_TEX_ss << "\\multicolumn{8}{l}{} \\\\[0.1cm]" << endl;}
          if(m_coord_groups[i].m_is_on_hull) {_report_data_ss << " " << "(ground state)";}
          // compound name
          main_TEX_ss << "\\multicolumn{8}{l}{";
          main_TEX_ss << "\\cellcolor{white}\\normalsize{" + _report_data_ss.str();
          main_TEX_ss << "}} \\\\[0.1cm]" << endl;
        } else {
          main_TEX_ss << "{\\fontsize{5}{7}\\selectfont" << endl;
          main_TEX_ss << "\\begin{longtabu}{|X[1,l,m]|X[1,l,m]|X[1,l,m]|X[1,r,m]|X[1,r,m]|X[1,r,m]|X[1,r,m]|}" << endl;
          if(putColumnHeader) {
            main_TEX_ss << "\\toprule" << endl;
            main_TEX_ss << aurostd::PaddedPOST("\\rowcolor{white}", 30);
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small prototype}", 80);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $SG_{\\mathrm{pre}}$}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $SG_{\\mathrm{post}}$}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small spin $\\left(\\mu_{\\mathrm{B}}\\mathrm{/atom}\\right)$}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $H_{\\mathrm{F}}$ (meV/atom)}", 30);
            main_TEX_ss << " & ";
            main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $T_{\\mathrm{S}}$ (K)}", 30);
            main_TEX_ss << " & ";
            if(m_formation_energy_hull) {main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $\\Delta H_{\\mathrm{F}}$ (meV/atom)}", 30);}
            else {main_TEX_ss << aurostd::PaddedPOST("\\centering{\\small $\\Delta T_{\\mathrm{S}}$ (K)}", 30);}
            main_TEX_ss << " \\\\";
            main_TEX_ss << endl;
            main_TEX_ss << "\\midrule" << endl;
          }
          putColumnHeader = false;
          if(!no_links && isViablePoint(m_coord_groups[i].m_ref_state)) {
            uint ref_state=m_coord_groups[i].m_ref_state;
            main_TEX_ss << "\\multicolumn{7}{l}{\\phantomsection\\label{" +input + "_" + m_points[ref_state].m_entry.auid + "}} \\\\[0.1cm]" << endl;
          } else {main_TEX_ss << "\\multicolumn{7}{l}{} \\\\[0.1cm]" << endl;}
          if(m_coord_groups[i].m_is_on_hull) {_report_data_ss << " " << "(ground state)";}
          // compound name
          main_TEX_ss << "\\multicolumn{7}{l}{";
          main_TEX_ss << "\\cellcolor{white}\\normalsize{" + _report_data_ss.str();
          main_TEX_ss << "}} \\\\[0.1cm]" << endl;
        }
        main_TEX_ss << "\\hline" << endl;
        main_TEX_ss << report_data_ss.str();
        main_TEX_ss << "\\hline" << endl;
        main_TEX_ss << "\\end{longtabu}" << endl;
        main_TEX_ss << "}" << endl;

        ////////////////////////////////////////////////////////////////////////
        // END Entry table creation
        ////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////
        // START Equilibrium phases / decomposition reaction table
        ////////////////////////////////////////////////////////////////////////

        if(!(equilibrium_phases_header_TEX_ss.str().empty() && equilibrium_phases_TEX_ss.str().empty() && reaction_chem_eq_TEX_ss.str().empty())) {
          main_TEX_ss << "\\vspace{-20pt}" << endl;
          main_TEX_ss << "\\begin{longtabu}{X[1,l]X[3,r]}" << endl;
          if(m_coord_groups[i].m_is_on_hull) {
            if(include_equilibrium_phases && !(equilibrium_phases_header_TEX_ss.str().empty() && equilibrium_phases_TEX_ss.str().empty())) {
              main_TEX_ss << equilibrium_phases_header_TEX_ss.str();
              main_TEX_ss << " & ";
              main_TEX_ss << equilibrium_phases_TEX_ss.str() << endl;
            }
          } else {
            if(!reaction_chem_eq_TEX_ss.str().empty()) {
              main_TEX_ss << "decomposition reaction: & ";
              main_TEX_ss << reaction_chem_eq_TEX_ss.str() << endl;
            }
          }
          main_TEX_ss << "\\end{longtabu}" << endl;
        }

        ////////////////////////////////////////////////////////////////////////
        // END Equilibrium phases / decomposition reaction table
        ////////////////////////////////////////////////////////////////////////

        equilibrium_phases_header_TEX_ss.str("");
        equilibrium_phases_TEX_ss.str("");
        reaction_chem_eq_TEX_ss.str("");
        if(i != m_coord_groups.size() - 1) {main_TEX_ss << "\\vspace{-20pt}" << endl;}
      }
      _report_data_ss.str("");
      report_data_ss.str("");
      reaction_chem_eq_TEX_ss.str("");
    }

    ////////////////////////////////////////////////////////////////////////////
    // END Stoichiometry group points loop
    ////////////////////////////////////////////////////////////////////////////
  }
  //////////////////////////////////////////////////////////////////////////////
  // END Stoichiometry group loop
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // END Report
  //////////////////////////////////////////////////////////////////////////////

  main_TEX_ss << "\\end{document}" << endl;

  //////////////////////////////////////////////////////////////////////////////
  // START Create tmp directory for compilation of .tex document
  //////////////////////////////////////////////////////////////////////////////

  string PWD = aurostd::execute2string(XHOST.command("pwd")) + "/";
  string path = getPath(m_cflags,*p_FileMESSAGE, *p_oss);
  string destination = path+main_PDF_file;
  string LATEX_dir = aurostd::TmpDirectoryCreate("chullLATEX");
  chdir(LATEX_dir.c_str());
  aurostd::stringstream2file(main_TEX_ss, main_TEX_file);
  if(!aurostd::FileExist(main_TEX_file)) {
    chdir(PWD.c_str());
    aurostd::RemoveDirectory(LATEX_dir);
    throw CHullRuntimeError(soliloquy,"Could not write "+main_TEX_file+" to "+LATEX_dir);
  }
  if(print_aflow_logo) {
    aurostd::base642bin(_AFLOW_LOGO_BASE64_, aflow_logo_file);
    if(!aurostd::FileExist(aflow_logo_file)) {
      chdir(PWD.c_str());
      aurostd::RemoveDirectory(LATEX_dir);
      throw CHullRuntimeError(soliloquy,"Could not write "+aflow_logo_file+" to "+LATEX_dir);
    }
  }
  command.str("");
  stringstream rawPDFLaTeXCommand;
  uint num_compile;
  command << XHOST.command("pdflatex") << " ";
  rawPDFLaTeXCommand << XHOST.command("pdflatex") << " ";
  if(!show_latex_output) {command << "-interaction=batchmode ";}
  if(image_only) {
    command << "--jobname=" << main_file << " " << main_TEX_file << " ";
    rawPDFLaTeXCommand << "--jobname=" << main_file << " " << main_TEX_file << " ";
    num_compile = 1;
  } else {
    command << main_TEX_file << " ";
    rawPDFLaTeXCommand << main_TEX_file << " ";

    //if(doc_only && no_links) {
    if(no_links) {num_compile = 1;}
    else {num_compile = 2;}
  }
  if(!show_latex_output) {command << "1>/dev/null ";}
  message << "Attempting to compile " << main_TEX_file;  //CO 180220 //the .tex file";
  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_MESSAGE_);

  if(show_latex_output) {
    if(latex_interactive_mode) {
      // will not save output, allows you to interact with LaTEX
      for (uint i = 0; i < num_compile; i++) {aurostd::execute(command.str());}
      // saves output
    } else {
      for (uint i = 0; i < num_compile; i++) {*p_oss << aurostd::execute2string(command.str()) << endl;}
    }
  } else {
    // no output to save
    for (uint i = 0; i < num_compile; i++) {aurostd::execute(command.str());}
  }
  if(!aurostd::FileExist(main_PDF_file)) {
    message << main_PDF_file << " was not created successfully, likely a LaTeX issue";
    pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_ERROR_);
    message << "Moving " << main_TEX_file;
    if(print_aflow_logo){message << " and " << aflow_logo_file;}
    message << " to " << path; //CO 180220 - current directory";
    pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_MESSAGE_);
    message << "Try running \"" << aurostd::RemoveWhiteSpacesFromTheBack(rawPDFLaTeXCommand.str()) << "\"";
    pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_MESSAGE_);
    files_2_move.clear(); //only move these files
    files_2_move.push_back(main_TEX_file);
    if(print_aflow_logo){files_2_move.push_back(aflow_logo_file);}
    aurostd::MoveFiles(files_2_move, path);
    chdir(PWD.c_str());
    aurostd::RemoveDirectory(LATEX_dir);
    throw CHullRuntimeError(soliloquy,"Issues compiling .tex file");
  }
  files_2_move.push_back(main_PDF_file);
  if(keep_tex) {
    files_2_move.push_back(main_TEX_file);
    if(print_aflow_logo){files_2_move.push_back(aflow_logo_file);}
    message << "Moving " << main_TEX_file << " and " << aflow_logo_file << " to " << path; //CO 180220 - current directory";
    pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_MESSAGE_);
  }
  if(!aurostd::MoveFiles(files_2_move, path)) {
    chdir(PWD.c_str());
    aurostd::RemoveDirectory(LATEX_dir);
    throw CHullRuntimeError(soliloquy,"Unable to move files out of temporary compilation directory");
  }
  chdir(PWD.c_str());
  aurostd::RemoveDirectory(LATEX_dir);
  if(!aurostd::FileExist(destination)){throw CHullRuntimeError(soliloquy,"Unable to write "+main_PDF_file+" to "+path);}
  message << main_PDF_file << " was created successfully, see destination=" << path;
  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_COMPLETE_);

  //////////////////////////////////////////////////////////////////////////////
  // END Create tmp directory for compilation of .tex document
  //////////////////////////////////////////////////////////////////////////////
}

string ConvexHull::getPlainTextHeader() const {
  stringstream main_text_ss;main_text_ss.str("");
  stringstream misc_ss;misc_ss.str("");
  const uint width_page = 130;   // helps with formatting of output
  misc_ss << "AFLOW V" << string(AFLOW_VERSION) << " Materials Snapshot";
  main_text_ss << aurostd::PaddedPOST(misc_ss.str(), width_page / 2); misc_ss.str("");
  misc_ss << AFLOW_WEB;
  main_text_ss << aurostd::PaddedPRE(misc_ss.str(), width_page / 2); misc_ss.str("");
  main_text_ss << endl;

  main_text_ss << aurostd::PaddedPOST(aurostd::get_datetime_formatted(true), width_page / 2);
  misc_ss << "count=" << getEntriesCount();
  main_text_ss << aurostd::PaddedPRE(misc_ss.str(), width_page / 2); misc_ss.str("");
  main_text_ss << endl;
  
  //cite as
  main_text_ss << endl;
  main_text_ss << "Use of this data welcomes reference to the following publication:" << endl;
  main_text_ss << "    " << CHULL_AUTHORS << "," << endl;
  main_text_ss << "    " << CHULL_TITLE << "," << endl;
  main_text_ss << "    " << CHULL_JOURNAL << "." << endl;
  main_text_ss << endl;
  return main_text_ss.str();
}

string ConvexHull::getJSONHeader() const {
  vector<string> vout;
  stringstream misc_ss;misc_ss.str("");
  
  misc_ss << "\"aflow_version\":\"aflow" << string(AFLOW_VERSION) << "\"";
  vout.push_back(misc_ss.str()); misc_ss.str("");

  misc_ss << "\"aflow_website\":\"" << AFLOW_WEB << "\"";
  vout.push_back(misc_ss.str()); misc_ss.str("");

  misc_ss << "\"datetime\":\"" << aurostd::get_datetime_formatted(false) << "\"";
  vout.push_back(misc_ss.str()); misc_ss.str("");
  
  misc_ss << "\"count\":\"" << getEntriesCount() << "\"";
  vout.push_back(misc_ss.str()); misc_ss.str("");
  
  misc_ss << "\"publication\":\"";
  misc_ss << CHULL_AUTHORS << ", ";
  misc_ss << CHULL_TITLE << ", ";
  misc_ss << CHULL_JOURNAL;
  misc_ss << "\"";
  vout.push_back(misc_ss.str()); misc_ss.str("");
  
  return aurostd::wrapString(aurostd::joinWDelimiter(vout,","),"{","}");
}

string ConvexHull::grabCHPointProperty(const ChullPoint& point,const string& property,char mode) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::grabCHPointProperty():";
  uint precision=COEF_PRECISION;
  string value="";
  string equilibrium_phases_delimiter="-";
  string string_wrapper="";
  string list_prefix="";
  string list_suffix="";
  string null_value="-";
  if(mode==_json_){
    equilibrium_phases_delimiter=",";
    string_wrapper="\"";
    list_prefix="[";
    list_suffix="]";
    null_value="null";
  }
  if(LDEBUG){cerr << soliloquy << " starting property=" << property << endl;}
  if(property=="compound"){value=aurostd::wrapString(point.m_entry.compound,string_wrapper);}
  else if(property=="prototype"){value=aurostd::wrapString(point.m_entry.prototype,string_wrapper);}
  else if(property=="auid"){value=aurostd::wrapString(point.m_entry.auid,string_wrapper);}
  else if(property=="aurl"){value=aurostd::wrapString(point.m_entry.aurl,string_wrapper);}
  else if(property=="url_entry_page"){value=aurostd::wrapString(ENTRY_PAGE_URL_PREFIX+point.m_entry.auid,string_wrapper);}
  else if(property=="space_group_orig"){value=aurostd::wrapString(point.m_entry.vsg.front(),string_wrapper);}
  else if(property=="space_group_relax"){value=aurostd::wrapString(point.m_entry.vsg.back(),string_wrapper);}
  else if(property=="spin_atom"){value=aurostd::utype2string(point.m_entry.spin_atom,precision,true,ROUNDOFF_TOL,FIXED_STREAM);}
  else if(property=="enthalpy_formation_atom"){value=aurostd::utype2string(Hf_atom(point,_m_),precision,true,ROUNDOFF_TOL,FIXED_STREAM);}
  else if(property=="entropic_temperature"){value=aurostd::utype2string(point.m_entry.entropic_temperature,precision,true,ROUNDOFF_TOL,FIXED_STREAM);}
  else if(property=="ground_state"){value=(point.isGState()?"true":"false");}
  else if(property=="phases_equilibrium_compound"){
    if(point.isGState()&&!point.isUnary()){ //unaries are always gstates, but do NOT have any mixture context
      //need to grab from coord_group
      uint i_coord_group;
      if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Coordgroup index not set");}
      if(m_coord_groups[i_coord_group].m_equilibrium_phases.size()==0){throw CHullLogicError(soliloquy,"Equilibrium phases not set");}
      vector<string> compounds,_compounds;
      uint i_point;
      const vector<vector<uint> >& equilibrium_phases=m_coord_groups[i_coord_group].m_equilibrium_phases;
      if(equilibrium_phases.size()){
        for(uint i=0;i<equilibrium_phases.size();i++){
          if(equilibrium_phases[i].size()==0){compounds.push_back(null_value);continue;}
          _compounds.clear();
          for(uint j=0;j<equilibrium_phases[i].size();j++){
            i_point=artificialMap(equilibrium_phases[i][j]);
            if(m_points[i_point].m_has_entry){
              _compounds.push_back(aurostd::wrapString(m_points[i_point].m_entry.compound,string_wrapper));
            }else{_compounds.push_back(null_value);}
          }
          compounds.push_back(aurostd::wrapString(aurostd::joinWDelimiter(_compounds,equilibrium_phases_delimiter),list_prefix,list_suffix));
        }
        value=aurostd::wrapString(aurostd::joinWDelimiter(compounds,","),list_prefix,list_suffix);
      }
    }
  }
  else if(property=="phases_equilibrium_auid"){
    if(point.isGState()&&!point.isUnary()){
      //need to grab from coord_group
      uint i_coord_group;
      if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Coordgroup index not set");}
      if(m_coord_groups[i_coord_group].m_equilibrium_phases.size()==0){throw CHullLogicError(soliloquy,"Equilibrium phases not set");}
      vector<string> auids,_auids;
      uint i_point;
      const vector<vector<uint> >& equilibrium_phases=m_coord_groups[i_coord_group].m_equilibrium_phases;
      if(equilibrium_phases.size()){
        for(uint i=0;i<equilibrium_phases.size();i++){
          if(equilibrium_phases[i].size()==0){auids.push_back(null_value);continue;}
          _auids.clear();
          for(uint j=0;j<equilibrium_phases[i].size();j++){
            i_point=artificialMap(equilibrium_phases[i][j]);
            if(m_points[i_point].m_has_entry){
              _auids.push_back(aurostd::wrapString(m_points[i_point].m_entry.auid,string_wrapper));
            }else{_auids.push_back(null_value);}
          }
          auids.push_back(aurostd::wrapString(aurostd::joinWDelimiter(_auids,equilibrium_phases_delimiter),list_prefix,list_suffix));
        }
        value=aurostd::wrapString(aurostd::joinWDelimiter(auids,","),list_prefix,list_suffix);
      }
    }
  }
  else if(property=="phases_decomposition_compound"){
    if(!point.isGState()){
      //need to grab from coord_group
      uint i_coord_group;
      if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Coordgroup index not set");}
      if(!m_coord_groups[i_coord_group].m_is_on_hull){
        if(m_coord_groups[i_coord_group].m_decomp_phases.size()){
          vector<string> compounds;
          uint i_point;
          for(uint i=0;i<m_coord_groups[i_coord_group].m_decomp_phases.size();i++){
            i_point=artificialMap(m_coord_groups[i_coord_group].m_decomp_phases[i]);
            if((i+1<(uint)point.m_decomp_coefs.rows)&&(point.m_decomp_coefs[i+1]>=ZERO_TOL)){
              if(m_points[i_point].m_has_entry){
                compounds.push_back(aurostd::wrapString(m_points[i_point].m_entry.compound,string_wrapper));
              }else{compounds.push_back(null_value);} //already did artificialMap()
            } //else{compounds.push_back(null_value);}
          }
          value=aurostd::wrapString(aurostd::joinWDelimiter(compounds,","),list_prefix,list_suffix);
        }
      }
    }
  }
  else if(property=="phases_decomposition_auid"){
    if(!point.isGState()){
      //need to grab from coord_group
      uint i_coord_group;
      if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Coordgroup index not set");}
      if(!m_coord_groups[i_coord_group].m_is_on_hull){
        if(m_coord_groups[i_coord_group].m_decomp_phases.size()){
          vector<string> auids;
          uint i_point;
          for(uint i=0;i<m_coord_groups[i_coord_group].m_decomp_phases.size();i++){
            i_point=artificialMap(m_coord_groups[i_coord_group].m_decomp_phases[i]);
            if((i+1<(uint)point.m_decomp_coefs.rows)&&(point.m_decomp_coefs[i+1]>=ZERO_TOL)){
              if(m_points[i_point].m_has_entry){
                auids.push_back(aurostd::wrapString(m_points[i_point].m_entry.auid,string_wrapper));
              }else{auids.push_back(null_value);} //already did artificialMap()
            } //else{auids.push_back(null_value);}
          }
          value=aurostd::wrapString(aurostd::joinWDelimiter(auids,","),list_prefix,list_suffix);
        }
      }
    }
  }
  else if(property=="phases_decomposition_coefficient"){
    if(!point.isGState()){
      //need to grab from coord_group
      uint i_coord_group;
      if(!getCoordGroupIndex(point,i_coord_group)){throw CHullLogicError(soliloquy,"Coordgroup index not set");}
      if(!m_coord_groups[i_coord_group].m_is_on_hull){
        if(m_coord_groups[i_coord_group].m_decomp_phases.size()){
          vector<double> nonzero_coefs;
          for(int i=point.m_decomp_coefs.lrows;i<=point.m_decomp_coefs.urows;i++){
            if(point.m_decomp_coefs[i]>=ZERO_TOL){nonzero_coefs.push_back(point.m_decomp_coefs[i]);}
          }
          value=aurostd::wrapString(aurostd::joinWDelimiter(aurostd::xvecDouble2vecString(aurostd::vector2xvector<double>(nonzero_coefs),precision,true,ROUNDOFF_TOL,FIXED_STREAM),","),list_prefix,list_suffix);
        }
      }
    }
  }
  //COREY YOU ARE HERE, YOU HAVE TO FIX THIS TO INCLUDE FIXED FORMAT
  else if(property=="enthalpy_formation_atom_difference"){value=aurostd::utype2string(dist2Hull(point,_m_),precision,true,ROUNDOFF_TOL,FIXED_STREAM);}
  else if(property=="entropic_temperature_difference"){value=aurostd::utype2string(dist2Hull(point,_m_),precision,true,ROUNDOFF_TOL,FIXED_STREAM);}
  else{throw CHullLogicError(soliloquy,"Unknown property");}
  if(value.empty()){value=null_value;}
  return value;
}

string ConvexHull::grabCHFacetProperty(const ChullFacet& facet,const string& property,char mode) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::grabCHPointProperty():";
  uint precision=COEF_PRECISION;
  string value="";
  string vector_delimiter=";";
  string string_wrapper="";
  string list_prefix="";
  string list_suffix="";
  string null_value="-";
  if(mode==_json_){
    vector_delimiter=",";
    string_wrapper="\"";
    list_prefix="[";
    list_suffix="]";
    null_value="null";
  }
  if(LDEBUG){cerr << soliloquy << " starting property=" << property << endl;}
  if(property=="vertices_position"){
    vector<string> vstr;
    for(uint i=0;i<facet.m_vertices.size();i++){
      vstr.push_back(aurostd::joinWDelimiter(aurostd::xvecDouble2vecString(facet.m_vertices[i].ch_point.h_coords,precision,true,ROUNDOFF_TOL,FIXED_STREAM),vector_delimiter));
    }
    value=aurostd::wrapString(aurostd::joinWDelimiter(aurostd::wrapVecEntries(vstr,"[","]"),","),list_prefix,list_suffix);
  }
  else if(property=="vertices_compound"){
    vector<string> compounds;
    for(uint i=0;i<facet.m_vertices.size();i++){
      if(facet.m_vertices[i].ch_point.m_has_entry){
        if(!m_points[facet.m_vertices[i].ch_index].m_entry.compound.empty()){
          compounds.push_back(aurostd::wrapString(m_points[facet.m_vertices[i].ch_index].m_entry.compound,string_wrapper));
        }else{compounds.push_back(null_value);}
      }
      else if(facet.m_vertices[i].ch_point.m_is_artificial){
        uint i_nary=facet.m_vertices[i].ch_point.m_i_nary;
        uint i_alloy=facet.m_vertices[i].ch_point.m_i_alloy;
        string elements=aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"");
        compounds.push_back(aurostd::wrapString("artificial:"+elements,string_wrapper));
      }else{throw CHullLogicError(soliloquy,"Unknown print setting");}
    }
    value=aurostd::wrapString(aurostd::joinWDelimiter(compounds,","),list_prefix,list_suffix);
  }
  else if(property=="vertices_auid"){
    vector<string> auids;
    for(uint i=0;i<facet.m_vertices.size();i++){
      if(facet.m_vertices[i].ch_point.m_has_entry){
        if(!m_points[facet.m_vertices[i].ch_index].m_entry.auid.empty()){
          auids.push_back(aurostd::wrapString(m_points[facet.m_vertices[i].ch_index].m_entry.auid,string_wrapper));
        }else{auids.push_back(null_value);}
      }
      else if(facet.m_vertices[i].ch_point.m_is_artificial){
        uint i_nary=facet.m_vertices[i].ch_point.m_i_nary;
        uint i_alloy=facet.m_vertices[i].ch_point.m_i_alloy;
        string elements=aurostd::joinWDelimiter(alloyToElements(i_nary,i_alloy),"");
        auids.push_back(aurostd::wrapString("artificial:"+elements,string_wrapper));
      }else{throw CHullLogicError(soliloquy,"Unknown print setting");}
    }
    value=aurostd::wrapString(aurostd::joinWDelimiter(auids,","),list_prefix,list_suffix);
  }
  else if(property=="normal"){value="["+aurostd::joinWDelimiter(aurostd::xvecDouble2vecString(facet.m_normal,precision,true,ROUNDOFF_TOL,FIXED_STREAM),vector_delimiter)+"]";}
  else if(property=="offset"){value=aurostd::utype2string(facet.m_offset,precision,true,ROUNDOFF_TOL,FIXED_STREAM);}
  else if(property=="centroid"){value="["+aurostd::joinWDelimiter(aurostd::xvecDouble2vecString(facet.m_facet_centroid,precision,true,ROUNDOFF_TOL,FIXED_STREAM),vector_delimiter)+"]";}
  else if(property=="vertical"){value=(facet.m_is_vertical?"true":"false");}
  else if(property=="artificial"){value=(facet.m_is_artificial?"true":"false");}
  else{throw CHullLogicError(soliloquy,"Unknown property");}
  if(value.empty()){value=null_value;}
  return value;
}

vector<vector<string> > ConvexHull::getPointsData(const string& properties_str,vector<string>& headers,char mode) const {
  string soliloquy="ConvexHull::getPointsData():";
  stringstream message;

  vector<string> vproperties;
  uint i_point;
  string value;
  
  vector<vector<string> > ventries;
  aurostd::string2tokens(properties_str,vproperties,",");
  for(uint i_coord_group=0;i_coord_group<m_coord_groups.size();i_coord_group++){
    if(!m_coord_groups[i_coord_group].m_points.size()){continue;}
    if(!m_coord_groups[i_coord_group].m_initialized){throw CHullLogicError(soliloquy,"Coordgroup["+aurostd::utype2string(i_coord_group)+"] is not initialized");}
    for(uint i=0;i<m_coord_groups[i_coord_group].m_points.size();i++){
      i_point=m_coord_groups[i_coord_group].m_points[i];
      const ChullPoint& point=m_points[i_point];
      if(!point.m_initialized){throw CHullLogicError(soliloquy,"Point["+aurostd::utype2string(i_point)+"] is not initialized");}
      if(!point.m_has_entry){continue;}
      ventries.push_back(vector<string>(0));
      for(uint j=0;j<vproperties.size();j++){
        value=grabCHPointProperty(point,vproperties[j],mode);
        ventries.back().push_back(value);
      }
    }
  }
  
  string header;
  headers.clear();
  if(mode==_json_){
  //for json response, we want TRUE keywords as they would appear in aflowlib.out
    for(uint i=0;i<vproperties.size();i++){
      header=vproperties[i];
      //add any processing here
      headers.push_back(header);
    }
  }else{
  //for text response, we decorate nicely by replacing _atom with _[/atom]
    for(uint i=0;i<vproperties.size();i++){
      header=vproperties[i];
      //while this is "pretty", it's NON-STANDARD
      //define in the paper, and leave it be
      //if(vproperties[i]=="url_entry_page"){header="entry_page_url";}
      //if(vproperties[i]=="enthalpy_formation_atom"){header="formation_enthalpy";}
      //if(vproperties[i]=="spin_atom"){header="spin";}
      //if(vproperties[i]=="phases_equilibrium_compound"){header="equilibrium_phases";}
      //if(vproperties[i]=="phases_equilibrium_auid"){header="equilibrium_phases_auids";}
      //if(vproperties[i]=="phases_decomposition_compound"){header="decomposition_phases";}
      //if(vproperties[i]=="phases_decomposition_auid"){header="decomposition_phases_auids";}
      //if(vproperties[i]=="phases_decomposition_coefficient"){header="decomposition_coefficients";}
      //if(vproperties[i]=="enthalpy_formation_atom_difference"){header="formation_enthalpy_difference";}
      //add any processing here before upper
      header=aurostd::toupper(header);
      //units are nice, but again, NON-STANDARD
      //define in the ppaer, and leave it be
      //add any processing here after upper
      //if(vproperties[i]=="enthalpy_formation_atom"){header+="_[meV/atom]";}
      //if(vproperties[i]=="entropic_temperature"){header+="_[K]";}
      //if(vproperties[i]=="spin_atom"){header+="_[mu_B/atom]";}
      //if(vproperties[i]=="enthalpy_formation_atom_difference"){header+="_[meV/atom]";}
      //if(vproperties[i]=="entropic_temperature_difference"){header+="_[K]";}
      headers.push_back(header);
    }
  }
  return ventries;
}

vector<vector<vector<vector<string> > > > ConvexHull::getFacetsData(const string& facet_properties_str,vector<string>& headers,char mode) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getFacetsData():";
  stringstream message;
  
  if(m_naries.size()<2){throw CHullLogicError(soliloquy,"No naries (larger than 1) found");}

  vector<string> vproperties;
  string value;
  vector<vector<vector<vector<string> > > > ventries;
  
  aurostd::string2tokens(facet_properties_str,vproperties,",");
  uint i_facet;
  for(uint i_nary=1;i_nary<m_naries.size();i_nary++){
    if(!m_naries[i_nary].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary["+aurostd::utype2string(i_nary)+"]");}
    if(m_naries[i_nary].m_alloys.size()==0){throw CHullLogicError(soliloquy,"No alloys found in nary["+aurostd::utype2string(i_nary)+"]");}
    if(LDEBUG){cerr << soliloquy << " looking at i_nary=" << i_nary << endl;}
    ventries.push_back(vector<vector<vector<string> > >(0));
    for(uint i_alloy=0;i_alloy<m_naries[i_nary].m_alloys.size();i_alloy++){
      if(!m_naries[i_nary].m_alloys[i_alloy].m_initialized){throw CHullLogicError(soliloquy,"Uninitialized nary[i_nary="+aurostd::utype2string(i_nary)+",i_alloy="+aurostd::utype2string(i_alloy)+"]");}
      if(m_naries[i_nary].m_alloys[i_alloy].m_facets.size()==0){throw CHullLogicError(soliloquy,"No facets found in nary[i_nary="+aurostd::utype2string(i_nary)+",i_alloy"+aurostd::utype2string(i_alloy)+"]");}
      if(LDEBUG){cerr << soliloquy << " looking at i_nary=" << i_nary << ",i_alloy=" << i_alloy << endl;}
      ventries.back().push_back(vector<vector<string> >(0));
      for(uint i=0;i<m_naries[i_nary].m_alloys[i_alloy].m_facets.size();i++){
        i_facet=m_naries[i_nary].m_alloys[i_alloy].m_facets[i];
        const ChullFacet& facet=m_facets[i_facet];
        if(!facet.m_initialized){throw CHullLogicError(soliloquy,"Facet[i_nary="+aurostd::utype2string(i_nary)+",i_alloy"+aurostd::utype2string(i_alloy)+",i_facet="+aurostd::utype2string(i_facet)+"] is not initialized");}
        if(LDEBUG){cerr << soliloquy << " looking at i_nary=" << i_nary << ",i_alloy=" << i_alloy << ",i_facet=" << i_facet << endl;}
        ventries.back().back().push_back(vector<string>(0));
        for(uint j=0;j<vproperties.size();j++){
          value=grabCHFacetProperty(facet,vproperties[j],mode);
          ventries.back().back().back().push_back(value);
        }
      }
    }
  }
  if(LDEBUG){cerr << soliloquy << " created ventries" << endl;}

  string header;
  headers.clear();
  if(mode==_json_){
  //for json response, we want TRUE keywords as they would appear in aflowlib.out
    for(uint i=0;i<vproperties.size();i++){
      header=vproperties[i];
      //add any processing here
      headers.push_back(header);
    }
  }else{
  //for text response, we decorate nicely by replacing _atom with _[/atom]
    for(uint i=0;i<vproperties.size();i++){
      header=vproperties[i];
      //add any processing here before upper
      header=aurostd::toupper(header);
      //add any processing here after upper
      headers.push_back(header);
    }
  }
  if(LDEBUG){cerr << soliloquy << " created headers" << endl;}
  return ventries;
}

void ConvexHull::getPlainTextColumnSizes(const vector<string>& headers,const vector<vector<string> >& ventries,vector<uint>& sizes) const {
  string soliloquy="ConvexHull::getPlainTextColumnSizes():";
  for(uint i=0;i<ventries.size();i++){
    if(headers.size()!=ventries[i].size()){throw CHullLogicError(soliloquy,"Dimension mismatch between headers and ventries");}
  }
  if(sizes.size()==0){  //initialize
    sizes.resize(headers.size());
    for(uint i=0;i<headers.size();i++){sizes[i]=headers[i].size();}
  }
  if(sizes.size()!=headers.size()){throw CHullLogicError(soliloquy,"Dimension mismatch between sizes and headers");}
  uint p_size;
  for(uint i=0;i<ventries.size();i++){
    for(uint j=0;j<ventries[i].size();j++){
      p_size=ventries[i][j].size();
      sizes[j]=std::max(sizes[j],p_size);
    }
  }
}

void ConvexHull::getPlainTextColumnSizesPoints(const vector<string>& headers,const vector<vector<string> >& ventries,vector<uint>& sizes) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getPlainTextColumnSizesPoints():";
  stringstream message;
  sizes.clear();
  getPlainTextColumnSizes(headers,ventries,sizes);
  if(LDEBUG){cerr << soliloquy << " sizes=" << sizes.size() << endl;}
  if(LDEBUG){cerr << soliloquy << " determined sizes" << endl;}
}

void ConvexHull::getPlainTextColumnSizesFacets(const vector<string>& headers,const vector<vector<vector<vector<string> > > >& ventries,vector<uint>& sizes) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::getPlainTextColumnSizesFacets():";
  stringstream message;
  sizes.clear();
  for(uint i=0;i<ventries.size();i++){
    for(uint j=0;j<ventries[i].size();j++){
      getPlainTextColumnSizes(headers,ventries[i][j],sizes);
    }
  }
  if(LDEBUG){cerr << soliloquy << " sizes=" << sizes.size() << endl;}
  if(LDEBUG){cerr << soliloquy << " determined sizes" << endl;}
}

string ConvexHull::addPlainTextTable(const vector<string>& headers,const vector<vector<string> >& ventries,const vector<uint>& sizes) const {
  stringstream out_ss;
  for(uint i=0;i<headers.size();i++){out_ss << aurostd::PaddedPOST(headers[i],sizes[i]+5);}
  out_ss << endl;
  for(uint i=0;i<ventries.size();i++){
    for(uint j=0;j<ventries[i].size();j++){
      out_ss << aurostd::PaddedPOST(ventries[i][j],sizes[j]+5);
    }
    out_ss << endl;
  }
  return out_ss.str();
}

string ConvexHull::addJSONTable(const vector<string>& headers,const vector<vector<string> >& ventries) const {
  stringstream misc_ss;misc_ss.str("");
  vector<string> _vout;_vout.clear();
  vector<string> vout;vout.clear();
  for(uint i=0;i<ventries.size();i++){
    for(uint j=0;j<ventries[i].size();j++){
      misc_ss << aurostd::wrapString(headers[j],"\"") << ":" << ventries[i][j];
      _vout.push_back(misc_ss.str()); misc_ss.str("");
    }
    vout.push_back(aurostd::wrapString(aurostd::joinWDelimiter(_vout,","),"{","}")); _vout.clear();
  }
  return aurostd::wrapString(aurostd::joinWDelimiter(vout,","),"[","]");
}

void ConvexHull::writeText(char mode) const {
  bool LDEBUG=(FALSE || XHOST.DEBUG);
  string soliloquy="ConvexHull::writeText():";
  stringstream message;
  
  if(!(mode==_txt_ || mode==_json_)){throw CHullLogicError(soliloquy,"Unknown mode");}

  if(!m_initialized){throw CHullLogicError(soliloquy,"Hull not initialized");}

  if(mode==_txt_){message << "Starting plain text generator";}
  else{message << "Starting json generator";}
  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_MESSAGE_);

  bool terse_output=false;

  string properties_str_points="compound";
  properties_str_points+=",prototype";
  properties_str_points+=",auid";
  properties_str_points+=",aurl";
  if(!terse_output){properties_str_points+=",url_entry_page";}
  properties_str_points+=",space_group_orig";
  properties_str_points+=",space_group_relax";
  properties_str_points+=",spin_atom";                  //add units later
  properties_str_points+=",enthalpy_formation_atom";    //add units later
  properties_str_points+=",entropic_temperature";       //add units later
  properties_str_points+=",ground_state";
  if(!terse_output){properties_str_points+=",phases_equilibrium_compound";}
  properties_str_points+=",phases_equilibrium_auid";
  if(!terse_output){properties_str_points+=",phases_decomposition_compound";}
  properties_str_points+=",phases_decomposition_auid";
  properties_str_points+=",phases_decomposition_coefficient";
  if(m_formation_energy_hull){properties_str_points+=",enthalpy_formation_atom_difference";}  //add units later
  else{properties_str_points+=",entropic_temperature_difference";}                        //add units later
  
  string facet_properties_str="vertices_position";
  if(!terse_output){facet_properties_str+=",vertices_compound";}
  facet_properties_str+=",vertices_auid";
  facet_properties_str+=",normal";
  facet_properties_str+=",offset";
  facet_properties_str+=",centroid";
  facet_properties_str+=",vertical";
  facet_properties_str+=",artificial";

  stringstream main_text_ss;main_text_ss.str("");
  vector<string> vout;        //json only
  vector<uint> column_sizes;  //plain text only
  
  //POINTS DATA
  vector<string> headers_points;
  vector<vector<string> > ventries_points=getPointsData(properties_str_points,headers_points,mode);
  if(LDEBUG){cerr << soliloquy << " got points data" << endl;}
  
  //FACETS DATA
  vector<string> headers_facets;
  //first layer=nary, second=alloy, third=facet, fourth=properties
  vector<vector<vector<vector<string> > > > ventries_facets=getFacetsData(facet_properties_str,headers_facets,mode);
  if(LDEBUG){cerr << soliloquy << " got facets data" << endl;}
  
  //HEADER
  if(mode==_json_){vout.push_back("\"hull_data\":"+getJSONHeader());}
  else{main_text_ss << getPlainTextHeader();}
  if(LDEBUG){cerr << soliloquy << " created doc header" << endl;}
  
  //points data
  if(mode==_json_){vout.push_back("\"points_data\":"+addJSONTable(headers_points,ventries_points));}
  else{
    getPlainTextColumnSizesPoints(headers_points,ventries_points,column_sizes);
    main_text_ss << "POINTS DATA" << endl;
    main_text_ss << addPlainTextTable(headers_points,ventries_points,column_sizes);
    main_text_ss << endl;
    main_text_ss << endl;
  }
  if(LDEBUG){cerr << soliloquy << " added points data" << endl;}
  
  //facets data
  if(mode==_json_){
    stringstream misc_ss;misc_ss.str("");
    vector<string> _vout;
    for(uint i=0;i<ventries_facets.size();i++){
      for(uint j=0;j<ventries_facets[i].size();j++){
        misc_ss << "\"" << i+2 << "-nary:";
        if(m_velements.size()){misc_ss << aurostd::joinWDelimiter(alloyToElements(i+1,j),"");}
        else{misc_ss << j+1;}
        misc_ss << "\":" << addJSONTable(headers_facets,ventries_facets[i][j]);
        _vout.push_back(misc_ss.str()); misc_ss.str("");
      }
    }
    vout.push_back("\"facets_data\":"+aurostd::wrapString(aurostd::joinWDelimiter(_vout,","),"{","}"));
  }
  else{
    getPlainTextColumnSizesFacets(headers_facets,ventries_facets,column_sizes);
    for(uint i=0;i<ventries_facets.size();i++){
      for(uint j=0;j<ventries_facets[i].size();j++){
        main_text_ss << "FACETS DATA " << i+2 << "-nary ";
        if(m_velements.size()){main_text_ss << "(" << aurostd::joinWDelimiter(alloyToElements(i+1,j),"") << ")";}
        else{main_text_ss << "(" << j+1 << ")";}
        main_text_ss << endl;
        main_text_ss << addPlainTextTable(headers_facets,ventries_facets[i][j],column_sizes);
        if(!(i==ventries_facets.size()-1 && j==ventries_facets[i].size()-1)){main_text_ss << endl;}
      }
      if(i!=ventries_facets.size()-1){main_text_ss << endl;}
    }
  }
  if(LDEBUG){cerr << soliloquy << " added facets data" << endl;}
  
  if(mode==_json_){main_text_ss << aurostd::wrapString(aurostd::joinWDelimiter(vout,","),"{","}");}

  string file_name="aflow_"+aurostd::joinWDelimiter(m_velements,"")+"_hull";
  if(mode==_json_){file_name+=".json";}
  else{file_name+=".txt";}
  
  if(m_cflags.flag("CHULL::SCREEN_ONLY")){
    *p_oss << main_text_ss.str();
    return;
  }
  
  if(LDEBUG){cerr << soliloquy << " now writting to file" << endl;}
  string path = getPath(m_cflags,*p_FileMESSAGE, *p_oss);
  string destination = path + file_name;
  aurostd::stringstream2file(main_text_ss,destination);
  if(!aurostd::FileExist(destination)){throw CHullRuntimeError(soliloquy,"Unable to write "+file_name+" to "+path);}
  message << file_name << " was created successfully, see destination=" << path;
  pflow::logger(soliloquy,message,*p_FileMESSAGE,*p_oss,_LOGGER_COMPLETE_);
}

void ConvexHull::writeWebApp() const {
  string soliloquy = "ConvexHull::writeWebApp():";
  stringstream message;
  pflow::logger(soliloquy, "Starting web-specific JSONifier", *p_FileMESSAGE, *p_oss, _LOGGER_MESSAGE_);

  // initializing stringstreams to use
  stringstream main_JSON_ss;
  stringstream id_data_JSON_ss;
  stringstream species_data_JSON_ss;
  vector<string> points_data_JSON_vs;
  vector<string> distances_data_JSON_vs;
  stringstream distances_data_JSON_ss;
  vector<string> stoich_comp_JSON_vs;
  stringstream stoich_comp_JSON_ss;
  vector<string> stoich_data_JSON_vs;
  stringstream stoich_data_JSON_ss;
  vector<string> stoich_points_data_JSON_vs;
  vector<string> vertices_data_JSON_vs;
  stringstream vertices_data_JSON_ss;
  vector<string> hull_points_data_JSON_vs;
  stringstream hull_points_data_JSON_ss;
  vector<string> planes_data_JSON_vs;
  vector<string> decomp_data_JSON_vs;
  stringstream decomp_data_JSON_ss;
  stringstream data_helper_ss;
  stringstream num_ss;  // no precision, for properties calculated by AFLOW

  // initializing some strings
  string main_JSON_file;
  string input;

  // creating name of output file
  input=aurostd::joinWDelimiter(m_velements,"");
  main_JSON_file="aflow_"+input+"_hull.json";
  species_data_JSON_ss << aurostd::joinWDelimiter(aurostd::wrapVecEntries(m_velements,"\""),",");
  //for (uint i = 0; i < m_velements.size(); i++) {
  //  main_JSON_file.append(m_velements[i]);
  //  species_data_JSON_ss << "\"" << m_velements[i] << "\"";
  //  if(i != m_velements.size() - 1) {
  //    species_data_JSON_ss << ",";
  //  }
  //}
  //input = main_JSON_file;
  //main_JSON_file.append("_hull.json");

  // other initializations
  bool stoich_groups_set;
  xvector<double> coord;
  xvector<double> normal;

  //////////////////////////////////////////////////////////////////////////////
  // START Stoichiometry group loop
  //////////////////////////////////////////////////////////////////////////////

  uint i_point,i_phase;
  for (uint i = 0; i < m_coord_groups.size(); i++) {
    stoich_groups_set = false;

    ////////////////////////////////////////////////////////////////////////////
    // START Stoichiometry group points loop
    ////////////////////////////////////////////////////////////////////////////

    for (uint j = 0; j < m_coord_groups[i].m_points.size(); j++) {
      //////////////////////////////////////////////////////////////////////////
      // START Entries filter
      //////////////////////////////////////////////////////////////////////////
      i_point=m_coord_groups[i].m_points[j];
      const ChullPoint& point = m_points[i_point];
      const aflowlib::_aflowlib_entry& entry = point.m_entry;

      //////////////////////////////////////////////////////////////////////////
      // END Entries filter
      //////////////////////////////////////////////////////////////////////////

      if(!stoich_groups_set) {
        ////////////////////////////////////////////////////////////////////////
        // START Stoichiometry group properties output
        ////////////////////////////////////////////////////////////////////////

        stoich_data_JSON_ss << "{";
        // get stoich id and stoichiometries at the same time
        // id_data_JSON_ss will take care of id
        for (uint j = 0; j < (uint)point.m_elements_present.rows; j++) {
          if(point.m_elements_present[j]==1){
            stoich_comp_JSON_ss << "{";
            stoich_comp_JSON_ss << "\"element\":\"" << m_velements[j] << "\",";
            id_data_JSON_ss << m_velements[j] << aurostd::utype2string(point.s_coords[j],CHULL_PRECISION); // make id out of nonzero components
            stoich_comp_JSON_ss << "\"stoichiometry\":" << aurostd::utype2string(point.s_coords[j],CHULL_PRECISION) << "}";
            stoich_comp_JSON_vs.push_back(stoich_comp_JSON_ss.str());
            stoich_comp_JSON_ss.str("");
          }
        }
        stoich_data_JSON_ss << "\"stoichiometries\":[" << aurostd::joinWDelimiter(stoich_comp_JSON_vs, ',') << "],";
        stoich_data_JSON_ss << "\"id\":\"" << id_data_JSON_ss.str() << "\",";
        id_data_JSON_ss.str("");
        // get is_hull
        stoich_data_JSON_ss << "\"isGroundState\":" << (m_coord_groups[i].m_is_on_hull?"true":"false") << ",";
        // get endPoint
        stoich_data_JSON_ss << "\"endPoint\":" << (m_coord_groups[i].m_i_nary==0?"true":"false") << ",";
        // get decomposition information for all phases
        const vector<uint>& decomposition_phases = m_coord_groups[i].m_decomp_phases;
        const xvector<double>& decomposition_coefficients = m_coord_groups[i].m_decomp_coefs;

        ////////////////////////////////////////////////////////////////////////
        // START Gathering info about decomposition reaction (equilibrium phase
        // stuff handled by javascript with FACES)
        ////////////////////////////////////////////////////////////////////////

        if(!decomposition_phases.empty() && scalar_product(decomposition_coefficients, decomposition_coefficients) >= ZERO_TOL) {
          if(decomposition_phases.size() != (uint)decomposition_coefficients.rows-1) {
            throw CHullLogicError(soliloquy,"Size of decomposition phases != size of decomposition coefficients for coordgroup["+aurostd::utype2string(i)+"]");
          }
          for (uint k = 0; k < decomposition_phases.size(); k++) {
            if(abs(decomposition_coefficients(k+1)) < ZERO_TOL) {continue;}
            decomp_data_JSON_ss << "{";
            i_phase=artificialMap(decomposition_phases[k]);
            const ChullPoint& dc_phase=m_points[i_phase];
            if(!dc_phase.m_has_entry) {
              // we need to adjust for missing unaries
              // look for coords
              decomp_data_JSON_ss << "\"entry\":\"" << AFLOW_HULL_ENDPOINT_STRING << ":" << aurostd::joinWDelimiter(alloyToElements(dc_phase),"") << "\",";
            } else {
              const aflowlib::_aflowlib_entry& equation_entry = dc_phase.m_entry;
              decomp_data_JSON_ss << "\"entry\":\"" << equation_entry.auid << "\",";
            }
            decomp_data_JSON_ss << "\"coefficient\":" << aurostd::utype2string(decomposition_coefficients(k+1),CHULL_PRECISION);
            decomp_data_JSON_ss << "}";
            decomp_data_JSON_vs.push_back(decomp_data_JSON_ss.str());
            decomp_data_JSON_ss.str("");
          }
        }
        // print even if empty
        stoich_data_JSON_ss << "\"decomposition_phases\":[" << aurostd::joinWDelimiter(decomp_data_JSON_vs, ',') << "],";
        decomp_data_JSON_vs.clear();
        // filling in "points" is last
        stoich_groups_set = true;

        ////////////////////////////////////////////////////////////////////////
        // END Gathering info about decomposition reaction
        ////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////
        // END Stoichiometry group properties output
        ////////////////////////////////////////////////////////////////////////
      }

      //////////////////////////////////////////////////////////////////////////
      // START Entry properties output
      //////////////////////////////////////////////////////////////////////////

      if(point.m_has_entry) {
        data_helper_ss << "\"" << entry.auid << "\"";
        stoich_points_data_JSON_vs.push_back(data_helper_ss.str());
        data_helper_ss.str("");
        // remove artificial points from distances
        distances_data_JSON_ss << "{";
        distances_data_JSON_ss << "\"auid\":";
      }
      // get points, distances, vertices
      if(point.m_is_g_state) {
        hull_points_data_JSON_ss << "{";
        hull_points_data_JSON_ss << "\"auid\":";  // why not entry? or all auid? why two different names?
      }
      if(!point.m_has_entry) {
        data_helper_ss << "\"" << AFLOW_HULL_ENDPOINT_STRING << ":" << aurostd::joinWDelimiter(alloyToElements(point),"") << "\"";
        if(point.m_is_g_state) {hull_points_data_JSON_ss << data_helper_ss.str();}
      } else {
        data_helper_ss << "\"" << entry.auid << "\"";
        points_data_JSON_vs.push_back(data_helper_ss.str());
        distances_data_JSON_ss << data_helper_ss.str();
        if(point.m_is_g_state) {hull_points_data_JSON_ss << data_helper_ss.str();}
        data_helper_ss.str("");
        // wrap up distances data
        distances_data_JSON_ss << ",";
        distances_data_JSON_ss << "\"distanceToHull\":" << aurostd::utype2string(chull::convertUnits(point.m_dist_2_hull, _std_),CHULL_PRECISION);
        // ADDED BY EGOSS
        //
        // Changed distances_data to be points data. I believe 
        // points_data_JSON may be removed and replaced with this.
        //
        distances_data_JSON_ss << ",";
        distances_data_JSON_ss << "\"compound\": \""<< entry.compound << "\"";
        distances_data_JSON_ss << ",";
        distances_data_JSON_ss << "\"composition\":[";
        // explicit dimensions
        const xvector<double>& coord = point.s_coords;
        for (uint k = 0; k < (uint)coord.rows; k++) {
          distances_data_JSON_ss << aurostd::utype2string(coord(k),CHULL_PRECISION);  // is 3 digits okay? I normally do 15
          if(k!=(uint)coord.rows-1){distances_data_JSON_ss << ",";}
        }
        distances_data_JSON_ss << "],";
        // fix for unaries, set to 0
        if(!point.m_has_entry) {  // these are only hull_members, so they only happen to
          // endpoints
          // enthalpy of formation, row 4
          // no need for precision for next few columns, leave it same way as
          // received from AFLOW
          distances_data_JSON_ss << "\"enthalpyFormationAtom\":" << aurostd::utype2string(0.0,CHULL_PRECISION);
          distances_data_JSON_ss << ",";
          // entropic temperature, row 5
          distances_data_JSON_ss << "\"entropicTemperature\":" << aurostd::utype2string(0.0,CHULL_PRECISION);
        } else {
          // enthalpy of formation, row 4
          // no need for precision for next few columns, leave it same way as
          // received from AFLOW
          num_ss << chull::Hf_atom(entry, _std_);
          distances_data_JSON_ss << "\"enthalpyFormationAtom\":" << num_ss.str();
          distances_data_JSON_ss << ",";
          num_ss.str("");
          // entropic temperature, row 5
          num_ss << chull::Ts(entry);
          distances_data_JSON_ss << "\"entropicTemperature\":" << num_ss.str();
          num_ss.str("");
        }
        distances_data_JSON_ss << "}";
        distances_data_JSON_vs.push_back(distances_data_JSON_ss.str());
        distances_data_JSON_ss.str("");
      }
      // distances
      // vertices
      if(point.m_is_g_state) {
        hull_points_data_JSON_ss << ",";
        hull_points_data_JSON_ss << "\"compound\": \""<< entry.compound << "\"";
        hull_points_data_JSON_ss << ",";
        hull_points_data_JSON_ss << "\"composition\":[";
        // explicit dimensions
        const xvector<double>& coord = point.s_coords;
        for (uint k = 0; k < (uint)coord.rows; k++) {
          hull_points_data_JSON_ss << aurostd::utype2string(coord(k),CHULL_PRECISION);  // is 3 digits okay? I normally do 15
          if(k!=(uint)coord.rows-1){hull_points_data_JSON_ss << ",";}
        }
        // implicit dimension
        hull_points_data_JSON_ss << "],";
        // fix for unaries, set to 0
        if(!point.m_has_entry) {  // these are only hull_members, so they only happen to
          // endpoints
          // enthalpy of formation, row 4
          // no need for precision for next few columns, leave it same way as
          // received from AFLOW
          hull_points_data_JSON_ss << "\"enthalpyFormationAtom\":" << aurostd::utype2string(0.0,CHULL_PRECISION);
          hull_points_data_JSON_ss << ",";
          // entropic temperature, row 5
          hull_points_data_JSON_ss << "\"entropicTemperature\":" << aurostd::utype2string(0.0,CHULL_PRECISION);
        } else {
          // enthalpy of formation, row 4
          // no need for precision for next few columns, leave it same way as
          // received from AFLOW
          num_ss << chull::Hf_atom(entry, _std_);
          hull_points_data_JSON_ss << "\"enthalpyFormationAtom\":" << num_ss.str();
          hull_points_data_JSON_ss << ",";
          num_ss.str("");
          // entropic temperature, row 5
          num_ss << chull::Ts(entry);
          hull_points_data_JSON_ss << "\"entropicTemperature\":" << num_ss.str();
          num_ss.str("");
        }
        hull_points_data_JSON_ss << "}";
        hull_points_data_JSON_vs.push_back(hull_points_data_JSON_ss.str());
        hull_points_data_JSON_ss.str("");
      }

      //////////////////////////////////////////////////////////////////////////
      // END Entry properties output
      //////////////////////////////////////////////////////////////////////////
    }
    if(stoich_groups_set) {
      stoich_data_JSON_ss << "\"points\":[" << aurostd::joinWDelimiter(stoich_points_data_JSON_vs, ',') << "]";
      stoich_data_JSON_ss << "}";
      stoich_data_JSON_vs.push_back(stoich_data_JSON_ss.str());
      stoich_points_data_JSON_vs.clear();
      stoich_data_JSON_ss.str("");
    }

    ////////////////////////////////////////////////////////////////////////////
    // END Stoichiometry group points loop
    ////////////////////////////////////////////////////////////////////////////
  }

  //////////////////////////////////////////////////////////////////////////////
  // END Stoichiometry group loop
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // START Grabbing planes data
  //////////////////////////////////////////////////////////////////////////////
  // index specific, so we can't loop through stoichGroups

  for (uint i = 0; i < m_facets.size(); i++) {
    const xvector<double> normal = m_facets[i].m_normal;
    if(!m_facets[i].m_is_vertical){
      data_helper_ss << "[" << aurostd::joinWDelimiter(m_facets[i].getCHIndices(), ',') << "]";
      planes_data_JSON_vs.push_back(data_helper_ss.str());
      data_helper_ss.str("");
    }
  }
  //////////////////////////////////////////////////////////////////////////////
  // END Grabbing planes data
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // START Grabbing vertex data (for 3-D visualization of hull)
  //////////////////////////////////////////////////////////////////////////////
  // index specific, so we can't loop through stoichGroups

  vector<uint> vertices=getHullPoints(false);
  for (uint i = 0; i < vertices.size(); i++) {
    vertices_data_JSON_ss << "{";
    vertices_data_JSON_ss << "\"auid\":";  // why not entry? or all auid? why two different names?

    const ChullPoint& point = m_points[vertices[i]];
    const aflowlib::_aflowlib_entry& entry = point.m_entry;
    const xvector<double>& coord = point.s_coords;

    if(!point.m_has_entry) {
      vertices_data_JSON_ss << "\"" << AFLOW_HULL_ENDPOINT_STRING << ":" << aurostd::joinWDelimiter(alloyToElements(point),"") << "\"";
    } else {vertices_data_JSON_ss << "\"" << entry.auid << "\"";}

    vertices_data_JSON_ss << ",";
    vertices_data_JSON_ss << "\"compound\": \"" << entry.compound << "\","; 
    vertices_data_JSON_ss << "\"composition\":[";
    // explicit dimensions
    for (uint k = 0; k < (uint)coord.rows; k++) {
      vertices_data_JSON_ss << aurostd::utype2string(coord(k),CHULL_PRECISION); // is 3 digits okay? I normally do 15
      if(k!=(uint)coord.rows-1){vertices_data_JSON_ss << ",";}
    }
    vertices_data_JSON_ss << "],";
    // fix for unaries, set to 0
    if(!point.m_has_entry) {  // these are only hull_members, so they only happen to
      // endpoints
      // enthalpy of formation, row 4
      // no need for precision for next few columns, leave it same way as
      // received from AFLOW
      vertices_data_JSON_ss << "\"enthalpyFormationAtom\":" << aurostd::utype2string(0.0,CHULL_PRECISION);
      vertices_data_JSON_ss << ",";
      // entropic temperature, row 5
      vertices_data_JSON_ss << "\"entropicTemperature\":" << aurostd::utype2string(0.0,CHULL_PRECISION);
    } else {
      // enthalpy of formation, row 4
      // no need for precision for next few columns, leave it same way as
      // received from AFLOW
      num_ss << chull::Hf_atom(entry, _std_);
      vertices_data_JSON_ss << "\"enthalpyFormationAtom\":" << num_ss.str();
      vertices_data_JSON_ss << ",";
      num_ss.str("");
      // entropic temperature, row 5
      num_ss << chull::Ts(entry);
      vertices_data_JSON_ss << "\"entropicTemperature\":" << num_ss.str();
      num_ss.str("");
    }
    vertices_data_JSON_ss << "}";
    vertices_data_JSON_vs.push_back(vertices_data_JSON_ss.str());
    vertices_data_JSON_ss.str("");
  }
  //////////////////////////////////////////////////////////////////////////////
  // END Grabbing vertex data
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // START Output amalgamation and writing
  //////////////////////////////////////////////////////////////////////////////

  main_JSON_ss << "{";
  main_JSON_ss << "\"name\":\"" << input << "\",";
  main_JSON_ss << "\"species\":[" << species_data_JSON_ss.str() << "],";
  species_data_JSON_ss.str("");
  // CHANGE BY EGOSS 
  // replaced points_data_JSON_vs with distance_data_JSON_vs
  //
  // OLD
  //main_JSON_ss << "\"points\":[" << aurostd::joinWDelimiter(points_data_JSON_vs, ',')
  //             << "],";
  //points_data_JSON_vs.clear();
  main_JSON_ss << "\"points\":[" << aurostd::joinWDelimiter(distances_data_JSON_vs, ',') << "],";
  distances_data_JSON_vs.clear();
  main_JSON_ss << "\"groundStates\":[" << aurostd::joinWDelimiter(hull_points_data_JSON_vs, ',') << "],";
  hull_points_data_JSON_vs.clear();
  main_JSON_ss << "\"vertices\":[" << aurostd::joinWDelimiter(vertices_data_JSON_vs, ',') << "],";
  vertices_data_JSON_vs.clear();
  // CHANGE BY EGOSS
  // distanceToHull is removed. Now distances are contained within the entries 
  // of points
  //
  //main_JSON_ss << "\"distanceToHull\":["
  //             << aurostd::joinWDelimiter(distances_data_JSON_vs, ',') << "],";
  //distances_data_JSON_vs.clear();

  // CHANGE BY EGOSS
  // At this time I do not require stoichiometryGroups for the visualization. 
  // It should be hidden behind a flag for now.

  if(false) {
    main_JSON_ss << "\"stoichiometryGroups\":[" << aurostd::joinWDelimiter(stoich_data_JSON_vs, ',') << "],";
    stoich_data_JSON_vs.clear();
  }

  main_JSON_ss << "\"faces\":[" << aurostd::joinWDelimiter(planes_data_JSON_vs, ',') << "]";
  planes_data_JSON_vs.clear();  // no comma
  main_JSON_ss << "}";

  if(m_cflags.flag("CHULL::SCREEN_ONLY")){
    *p_oss << main_JSON_ss.str();
    return;
  }

  string path = getPath(m_cflags,*p_FileMESSAGE, *p_oss);
  string destination = path + main_JSON_file;
  aurostd::stringstream2file(main_JSON_ss, destination);
  if(!aurostd::FileExist(destination)) {throw CHullRuntimeError(soliloquy,"Could not write "+main_JSON_file+" to "+path);}

  //////////////////////////////////////////////////////////////////////////////
  // END Output amalgamation and writing
  //////////////////////////////////////////////////////////////////////////////

  message << main_JSON_file << " was created successfully, see destination=" << path;
  pflow::logger(soliloquy, message, *p_FileMESSAGE, *p_oss, _LOGGER_COMPLETE_);
}

void ConvexHull::writeAPool() const {
}

bool ConvexHull::sortWithinCoordGroup::operator() (uint i,uint j) {
  //ascending order
  string soliloquy="ConvexHull::sortWithinCoordGroup::operator():";
  if( (i>m_points.size()-1) || (j>m_points.size()-1) ) {throw CHullLogicError(soliloquy,"Invalid index within CoordGroup");}  //safety
  const ChullPoint& ci=m_points[i];
  const ChullPoint& cj=m_points[j];
  if(ci.isGState()!=cj.isGState()){return ci.isGState()>cj.isGState();}
  //always sort by last coord first
  bool energy_sort=(m_sort_energy_ascending ? (ci.getLastCoord()<cj.getLastCoord()) : (ci.getLastCoord()>cj.getLastCoord()));
  if(ci.m_has_entry && cj.m_has_entry){
    //if entry, then we also sort by proto, compound, and then aurl to make final print out pretty
    return ( energy_sort ||
               ((ci.getLastCoord() == cj.getLastCoord()) && 
                (ci.m_entry.prototype<cj.m_entry.prototype)) ||
               ((ci.getLastCoord() == cj.getLastCoord()) &&
                (ci.m_entry.prototype == cj.m_entry.prototype) && 
                (ci.m_entry.compound<cj.m_entry.compound)) ||
               ((ci.getLastCoord() == cj.getLastCoord()) &&
                (ci.m_entry.prototype == cj.m_entry.prototype) && 
                (ci.m_entry.compound == cj.m_entry.compound) && 
                (ci.m_entry.aurl<cj.m_entry.aurl)) );  //aurl is guaranteed to be unique (more so than auid)
  }else{return energy_sort;}
}

bool ConvexHull::sortCHullPoints::operator() (uint i,uint j) const{
  string soliloquy="ConvexHull::sortCHullPoints::operator():";
  if(i>m_points.size()-1 || j>m_points.size()-1){throw CHullLogicError(soliloquy,"Invalid index for m_points");}
  const ChullPoint& ci=m_points[i];
  const ChullPoint& cj=m_points[j];
  sortThermoPoints stp(m_sort_stoich_ascending,m_sort_energy_ascending);
  return stp.operator()(ci,cj);
}

bool ConvexHull::sortFacetsByPoints::operator() (const ChullFacet& fi,const ChullFacet& fj) const {
  string soliloquy="ConvexHull::sortFacetsByPoints::operator():";
  if(fi.m_vertices.size()!=fj.m_vertices.size()){throw CHullLogicError(soliloquy,"Dimension mismatch among facets");} //return m_ascending_order ? fi.m_vertices.size()<rj.m_vertices.size() : fi.m_vertices.size()>rj.m_vertices.size();}
  if(fi.m_normal.rows!=fj.m_normal.rows){throw CHullLogicError(soliloquy,"Dimension mismatch between facet normals");}
  if(!(fi.m_initialized&&fj.m_initialized)){throw CHullLogicError(soliloquy,"Uninitialized facet");}       //ensure we have inward pointing normal and angle
  
  if(m_auto_sort_energy){
    if(fi.m_in_lower_hemisphere!=fj.m_in_lower_hemisphere){return fi.m_in_lower_hemisphere>fj.m_in_lower_hemisphere;} //lower hemisphere first
    if(fi.m_is_vertical!=fj.m_is_vertical){return fi.m_is_vertical>fj.m_is_vertical;} //vertical first
  }

  for(uint i=0;i<fi.m_vertices.size();i++){
    if(fi.m_vertices[i].ch_index!=fj.m_vertices[i].ch_index){
      const ChullPoint& ci=m_points[fi.m_vertices[i].ch_index];
      const ChullPoint& cj=m_points[fj.m_vertices[i].ch_index];
      bool sort_stoich_ascending=m_sort_stoich_ascending;
      bool sort_energy_ascending=m_sort_energy_ascending;
      if(m_auto_sort_stoich){sort_stoich_ascending=!fi.m_in_lower_hemisphere;} //left to right in lower hemisphere
      if(m_auto_sort_energy){sort_energy_ascending=fi.m_in_lower_hemisphere;}  //bottom to top in lower hemisphere
      sortThermoPoints stp(sort_stoich_ascending,sort_energy_ascending);
      return stp.operator()(ci,cj);
    }
  }
  
  return false;
}
} // namespace chull

// ***************************************************************************
// *                                                                         *
// *           Aflow STEFANO CURTAROLO - Duke University 2003-2018           *
// *           Aflow COREY OSES - Duke University 2013-2018                  *
// *                                                                         *
// ***************************************************************************
